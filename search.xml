<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>seccomp-bpf</title>
      <link href="/2022/12/06/seccomp-bpf/"/>
      <url>/2022/12/06/seccomp-bpf/</url>
      
        <content type="html"><![CDATA[<h1 id="seccomp-bpf介绍"><a href="#seccomp-bpf介绍" class="headerlink" title="seccomp-bpf介绍"></a>seccomp-bpf介绍</h1><h2 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h2><p>Linux 2.6.12中的导入了第一个版本的seccomp，通过向&#x2F;proc&#x2F;PID&#x2F;seccomp接口中写入“1”来启动通过滤器，最初只有一个模型：严格模型下模（strict mode）编译限制的进程使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">read，write，_exit，sigreturn<br></code></pre></td></tr></table></figure><p>使用其他系统调用就会收到信号(SIGKILL)退出。测试代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">configure_seccomp</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Configuring seccomp\n&quot;</span>);<br>    prctl(PR_SET_SECCOMP, SECCOMP_MODE_STRICT);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>    <span class="hljs-type">int</span> infd, outfd;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage:\n\t%s &lt;input path&gt; &lt;output_path&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Starting test seccomp Y/N?&quot;</span>);<br>    <span class="hljs-type">char</span> c = getchar();<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;y&#x27;</span> || c == <span class="hljs-string">&#x27;Y&#x27;</span>) configure_seccomp();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Opening &#x27;%s&#x27; for reading\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span> ((infd = open(argv[<span class="hljs-number">1</span>], O_RDONLY)) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">ssize_t</span> read_bytes;<br>        <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Opening &#x27;%s&#x27; for writing\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span> ((outfd = open(argv[<span class="hljs-number">2</span>], O_WRONLY | O_CREAT, <span class="hljs-number">0644</span>)) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">while</span> ((read_bytes = read(infd, &amp;buffer, <span class="hljs-number">1024</span>)) &gt; <span class="hljs-number">0</span>)<br>                write(outfd, &amp;buffer, (<span class="hljs-type">ssize_t</span>)read_bytes);<br>        &#125;<br>        close(infd);<br>        close(outfd);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;End!\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/.com//../../img/seccomp_1.png" alt="header"><br>可以看到执行到22行就结束了没用执行到 Eed.</p><h2 id="seccomp-bpf"><a href="#seccomp-bpf" class="headerlink" title="seccomp-bpf"></a>seccomp-bpf</h2><p>Seccomp-BPF（Berkeley Packet Filter）是Linux内核中的一种安全机制，用于限制进程对系统调用的访问权限。它主要用于防止恶意软件对系统的攻击，提高系统的安全性。</p><p>Seccomp-BPF使用BPF（Berkeley Packet Filter）技术来实现系统调用过滤，可以使用BPF程序指定哪些系统调用可以被进程访问，哪些不能。BPF程序由一组BPF指令组成，可以在系统调用执行之前对其进行检查，以决定是否允许执行该系统调用。</p><p>Seccomp-BPF提供了两种模式：白名单模式和黑名单模式。白名单模式允许所有系统调用，除非明确指定不允许的系统调用。黑名单模式禁止所有系统调用，除非明确指定允许的系统调用。这两种模式的选择取决于您的实际需求。</p><p>Seccomp-BPF提供了一个钩子函数，在系统调用执行之前会进入到这个函数，对系统调用进行检查，如果BPF程序允许执行该系统调用，则进程可以继续执行，否则会抛出一个异常。</p><h3 id="1-BPF确定了一个可以在内核内部实现的虚拟机，该虚拟机具有以下特性："><a href="#1-BPF确定了一个可以在内核内部实现的虚拟机，该虚拟机具有以下特性：" class="headerlink" title="1.BPF确定了一个可以在内核内部实现的虚拟机，该虚拟机具有以下特性："></a>1.BPF确定了一个可以在内核内部实现的虚拟机，该虚拟机具有以下特性：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">简单指令集<br>    小型指令集<br>    所有的命令大小相一致<br>    实现过程简单、快速<br>只有分支向前指令<br>    程序是有向无环图(DAGs)，没有循环<br>易于验证程序的有效性/安全性<br>    简单的指令集⇒可以验证操作码和参数<br>    可以检测死代码<br>    程序必须以 Return 结束<br>    BPF过滤器程序仅限于4096条指令<br><br></code></pre></td></tr></table></figure><h3 id="2-Seccomp-BPF-使用的也只是BPF的子集功能："><a href="#2-Seccomp-BPF-使用的也只是BPF的子集功能：" class="headerlink" title="2.Seccomp-BPF 使用的也只是BPF的子集功能："></a>2.Seccomp-BPF 使用的也只是BPF的子集功能：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Conditional JMP(条件判断跳转)<br>    当匹配条件为真，跳转到true指定位置<br>    当 匹配条件为假，跳转到false指定位置<br>    跳转偏移量最大255<br>JMP(直接跳转)<br>    跳转目标是指令偏移量<br>    跳转 偏移量最大255<br>Load(数据读取)<br>    读取程序参数<br>    读取指定的16位内存地址<br>Store(数据存储)<br>    保存数据到指定的16位内存地址中<br>支持的运算<br>    + - * / &amp; | ^ &gt;&gt; &lt;&lt; !<br>返回值<br>    SECCOMP_RET_ALLOW -  允许继续使用系统调用<br>    SECCOMP_RET_KILL - 终止系统调用<br>    SECCOMP_RET_ERRNO -  返回设置的errno值<br>    SECCOMP_RET_TRACE -  通知附加的ptrace（如果存在）<br>    SECCOMP_RET_TRAP - 往进程发送 SIGSYS信号<br>最多只能有4096条命令<br>不能出现循环<br></code></pre></td></tr></table></figure><h1 id="Seccomp-BPF程序-接收以下结构作为输入参数："><a href="#Seccomp-BPF程序-接收以下结构作为输入参数：" class="headerlink" title="Seccomp-BPF程序 接收以下结构作为输入参数："></a>Seccomp-BPF程序 接收以下结构作为输入参数：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/**<br> * struct seccomp_data - the format the BPF program executes over.<br> * @nr: the system call number<br> * @arch: indicates system call convention as an AUDIT_ARCH_* value<br> *        as defined in &lt;linux/audit.h&gt;.<br> * @instruction_pointer: at the time of the system call.<br> * @args: up to 6 system call arguments always stored as 64-bit values<br> *        regardless of the architecture.<br> */<br>struct seccomp_data &#123;<br>int nr;<br>__u32 arch;<br>__u64 instruction_pointer;<br>__u64 args[6];<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以查看各个架构内核的系统调用号这里是arm64的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#define __NR_io_setup 0<br>#define __NR_io_destroy 1<br>#define __NR_io_submit 2<br>#define __NR_io_cancel 3<br>#define __NR_io_getevents 4<br>#define __NR_setxattr 5<br>#define __NR_lsetxattr 6<br>#define __NR_fsetxattr 7<br>#define __NR_getxattr 8<br>#define __NR_lgetxattr 9<br>#define __NR_fgetxattr 10<br>#define __NR_listxattr 11<br>...<br></code></pre></td></tr></table></figure><h1 id="Seccomp-BPF-简单应用代码"><a href="#Seccomp-BPF-简单应用代码" class="headerlink" title="Seccomp-BPF 简单应用代码"></a>Seccomp-BPF 简单应用代码</h1><p>只匹配arm64位架构下的系统调用<br>把想要阻断的系统调用号,返回错误码,和需要运行的程序为参数,运行上面的样例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/audit.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/filter.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">install_filter</span><span class="hljs-params">(<span class="hljs-type">int</span> syscall_nr, <span class="hljs-type">int</span> f_errno)</span> &#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> <span class="hljs-title">filter</span>[] =</span> &#123;<br>        <span class="hljs-comment">/* [0] Load architecture from &#x27;seccomp_data&#x27; buffer into accumulator */</span><br>        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(<span class="hljs-keyword">struct</span> seccomp_data, arch))),<br><br>        <span class="hljs-comment">/* [1] Jump forward 5 instructions if architecture does not match &#x27;t_arch&#x27; */</span><br>        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AUDIT_ARCH_X86_64, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>),<br><br>        <span class="hljs-comment">/* [2] Load system call number from &#x27;seccomp_data&#x27; buffer into accumulator */</span><br>        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(<span class="hljs-keyword">struct</span> seccomp_data, nr))),<br><br>        <span class="hljs-comment">/* [3] Check ABI - only needed for x86-64 in deny-list use</span><br><span class="hljs-comment">                      cases.  Use BPF_JGT instead of checking against the bit</span><br><span class="hljs-comment">                      mask to avoid having to reload the syscall number. */</span><br>        BPF_JUMP(BPF_JMP | BPF_JGT | BPF_K, <span class="hljs-number">0x40000000</span> - <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>),<br><br>        <span class="hljs-comment">/* [4] Jump forward 1 instruction if system call number does not match &#x27;syscall_nr&#x27; */</span><br>        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, syscall_nr, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br><br>        <span class="hljs-comment">/* [5] Matching architecture and system call: don&#x27;t execute</span><br><span class="hljs-comment">                  the system call, and return &#x27;f_errno&#x27; in &#x27;errno&#x27; */</span><br>        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ERRNO | (f_errno &amp; SECCOMP_RET_DATA)),<br><br>        <span class="hljs-comment">/* [6] Destination of system call number mismatch: allow other system calls */</span><br>        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),<br><br>        <span class="hljs-comment">/* [7] Destination of architecture mismatch: kill process */</span><br>        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL_PROCESS),<br>    &#125;;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_fprog</span> <span class="hljs-title">prog</span> =</span> &#123;<br>        .len = <span class="hljs-keyword">sizeof</span>(filter) / <span class="hljs-keyword">sizeof</span>(filter[<span class="hljs-number">0</span>]),<br>        .filter = filter,<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog) == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;seccomp&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Usage: %s &lt;syscall_nr&gt; &lt;errno&gt; &lt;prog&gt; [&lt;args&gt;]\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (prctl(PR_SET_NO_NEW_PRIVS, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br>        perror(<span class="hljs-string">&quot;prctl&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (install_filter(strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>), strtol(argv[<span class="hljs-number">2</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)))<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br><br>    execv(argv[<span class="hljs-number">4</span>], &amp;argv[<span class="hljs-number">4</span>]);<br>    perror(<span class="hljs-string">&quot;execv&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br></code></pre></td></tr></table></figure><p>如图，阻断了59号系统调用(64位 Linux对应的是execve系统接口)，并返回指定的错误码。<br><img src="/.com//../../img/seccomp_2.png" alt="header"><br>Seccomp是对系统接口的限制，也就是系统接口有多少个，Seccomp就能管理多少个。</p><h2 id="再来一个示例"><a href="#再来一个示例" class="headerlink" title="再来一个示例"></a>再来一个示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seccomp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/filter.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">configure_seccomp</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_filter</span> <span class="hljs-title">filter</span> [] =</span> &#123;<br>    BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(<span class="hljs-keyword">struct</span> seccomp_data, nr))), <br>    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, __NR_write, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>), <br>    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),<br>    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, __NR_open, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>),<br>    BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(<span class="hljs-keyword">struct</span> seccomp_data, args[<span class="hljs-number">1</span>]))),<br>    BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, O_RDONLY, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>),<br>    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),<br>    BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL)<br>  &#125;;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_fprog</span> <span class="hljs-title">prog</span> =</span> &#123;<br>       .len = (<span class="hljs-type">unsigned</span> <span class="hljs-type">short</span>)(<span class="hljs-keyword">sizeof</span>(filter) / <span class="hljs-keyword">sizeof</span> (filter[<span class="hljs-number">0</span>])),<br>       .filter = filter,<br>  &#125;;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Configuring seccomp\n&quot;</span>);<br>  prctl(PR_SET_NO_NEW_PRIVS, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> &#123;<br>  <span class="hljs-type">int</span> infd, outfd;<br>  <span class="hljs-type">ssize_t</span> read_bytes;<br>  <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br><br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage:\n\tdup_file &lt;input path&gt; &lt;output_path&gt;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Ducplicating file &#x27;%s&#x27; to &#x27;%s&#x27;\n&quot;</span>, argv[<span class="hljs-number">1</span>], argv[<span class="hljs-number">2</span>]);<br><br>  configure_seccomp(); <span class="hljs-comment">//配置seccomp</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Opening &#x27;%s&#x27; for reading\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">if</span> ((infd = open(argv[<span class="hljs-number">1</span>], O_RDONLY)) &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Opening &#x27;%s&#x27; for writing\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">if</span> ((outfd = open(argv[<span class="hljs-number">2</span>], O_WRONLY | O_CREAT, <span class="hljs-number">0644</span>)) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">while</span>((read_bytes = read(infd, &amp;buffer, <span class="hljs-number">1024</span>)) &gt; <span class="hljs-number">0</span>)<br>          write(outfd, &amp;buffer, (<span class="hljs-type">ssize_t</span>)read_bytes);<br>    &#125;<br>  &#125;<br>  close(infd);<br>  close(outfd);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这种情况下， 在这种情况下，seccomp-BPF 程序将允许使用 O_RDONLY 参数打开第一个调用 , 但是在使用 O_WRONLY | O_CREAT 参数调用 open 时终止程序。<br><img src="/.com//../../img/seccomp_3.png" alt="header"></p><h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><h2 id="seccmop-bpf-h"><a href="#seccmop-bpf-h" class="headerlink" title="seccmop-bpf.h"></a>seccmop-bpf.h</h2><p>seccomp-bpf.h是由开发人员编写的一个十分便捷的头文件用于开发seccomp-bpf 。该头文件已经定义好了很多常见的宏，如验证系统架构、允许系统调用等功能，十分便捷，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...<br>define VALIDATE_ARCHITECTURE \<br>    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, arch_nr), \<br>    BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, ARCH_NR, 1, 0), \<br>    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL)<br><br>define EXAMINE_SYSCALL \<br>    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, syscall_nr)<br><br>define ALLOW_SYSCALL(name) \<br>    BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, __NR_##name, 0, 1), \<br>    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_ALLOW)<br><br>define KILL_PROCESS \<br>    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL)<br>...<br></code></pre></td></tr></table></figure><h2 id="应用示例："><a href="#应用示例：" class="headerlink" title="应用示例："></a>应用示例：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;fcntl.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;unistd.h&gt;<br>#include &lt;assert.h&gt;<br>#include &lt;linux/seccomp.h&gt;<br>#include &lt;sys/prctl.h&gt;<br>#include &quot;seccomp-bpf.h&quot;<br><br>void install_syscall_filter()<br>&#123;<br>        struct sock_filter filter[] = &#123;<br>                /* Validate architecture. */<br>                VALIDATE_ARCHITECTURE,<br>                /* Grab the system call number. */<br>                EXAMINE_SYSCALL,<br>                /* List allowed syscalls. We add open() to the set of<br>                   allowed syscalls by the strict policy, but not<br>                   close(). */<br>                ALLOW_SYSCALL(rt_sigreturn),<br>#ifdef __NR_sigreturn<br>                ALLOW_SYSCALL(sigreturn),<br>#endif<br>                ALLOW_SYSCALL(exit_group),<br>                ALLOW_SYSCALL(exit),<br>                ALLOW_SYSCALL(read),<br>                ALLOW_SYSCALL(write),<br>                ALLOW_SYSCALL(open),<br>                KILL_PROCESS,<br>        &#125;;<br>        struct sock_fprog prog = &#123;<br>                .len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),<br>                .filter = filter,<br>        &#125;;<br><br>        assert(prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) == 0);<br><br>        assert(prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog) == 0);<br>&#125;<br><br>int main(int argc, char **argv)<br>&#123;<br>        int output = open(&quot;output.txt&quot;, O_WRONLY);<br>        const char *val = &quot;test&quot;;<br><br>        printf(&quot;Calling prctl() to set seccomp with filter...\n&quot;);<br><br>        install_syscall_filter();<br><br>        printf(&quot;Writing to an already open file...\n&quot;);<br>        write(output, val, strlen(val)+1);<br><br>        printf(&quot;Trying to open file for reading...\n&quot;);<br>        int input = open(&quot;output.txt&quot;, O_RDONLY);<br><br>        printf(&quot;Note that open() worked. However, close() will not\n&quot;);<br>        close(input);<br><br>        printf(&quot;You will not see this message--the process will be killed first\n&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要是为了拦截svc学习了seccomp。学习了很多大佬的帖子，不是很深入目前对我的需求来说以及够用了写出来记录一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> seccomp </tag>
            
            <tag> seccomp-epf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPENAI</title>
      <link href="/2022/12/05/OPENAI/"/>
      <url>/2022/12/05/OPENAI/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>昨天下午在肉丝geigei的星球看到有个佬拿ai识别算法直接震惊了，深入玩了一下更震惊了！！！<br>AI：人类一败涂地<br><img src="/.com//../../img/openai_1.png" alt="header"></p><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>使用可以看这篇，因为不支持国内的账号去注册<br><a href="https://mirror.xyz/0x6E12A28086548B11dfcc20c75440E0B3c10721f5/9O9CSqyKDj4BKUIil7NC1Sa1LJM-3hsPqaeW_QjfFBc">https://mirror.xyz/0x6E12A28086548B11dfcc20c75440E0B3c10721f5/9O9CSqyKDj4BKUIil7NC1Sa1LJM-3hsPqaeW_QjfFBc</a></p><h1 id="使用姿势♂"><a href="#使用姿势♂" class="headerlink" title="使用姿势♂"></a>使用姿势♂</h1><p><a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a><br><img src="/.com//../../img/openai_2.png" alt="header"></p><h2 id="这吊毛会伪装-我们GG了"><a href="#这吊毛会伪装-我们GG了" class="headerlink" title="这吊毛会伪装 我们GG了"></a>这吊毛会伪装 我们GG了</h2><p><img src="/.com//../../img/openai_3.png" alt="header"></p><h2 id="还有这里"><a href="#还有这里" class="headerlink" title="还有这里"></a>还有这里</h2><p><a href="https://beta.openai.com/playground">https://beta.openai.com/playground</a><br><img src="/.com//../../img/openai_4.png" alt="header"><br>这里可以设置调节各种功能，比如有的人问题一个比较长的问题ai说两句就断下来了<br>可以调节一下这里<br><img src="/.com//../../img/openai_5.png" alt="header"></p><h1 id="开始各种骚操作"><a href="#开始各种骚操作" class="headerlink" title="开始各种骚操作"></a>开始各种骚操作</h1><h2 id="识别算法"><a href="#识别算法" class="headerlink" title="识别算法"></a>识别算法</h2><p>发个s_box 直接识别出来啦<br><img src="/.com//../../img/openai_6.png" alt="header"><br>使用idaf5 直接丢到聊天框里试试<br><img src="/.com//../../img/openai_7.png" alt="header"></p><h2 id="优化代码-优化ollvm后的函数"><a href="#优化代码-优化ollvm后的函数" class="headerlink" title="优化代码 优化ollvm后的函数"></a>优化代码 优化ollvm后的函数</h2><p>第一次优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">优化成c代码<br>__int64 __fastcall sub_131D0(unsigned __int64 a1)<br>&#123;<br>  __int64 v1; // x23<br>  _BOOL4 v2; // w11<br>  int v3; // w11<br>  bool v4; // zf<br>  int v5; // w25<br>  __int64 v6; // x11<br>  int v7; // w26<br>  int v8; // w27<br>  int v9; // w28<br>  int v10; // w29<br>  bool v11; // cf<br>  unsigned __int64 v12; // x0<br>  int v13; // w30<br>  int v14; // w24<br>  int v15; // w14<br>  int v17; // [xsp+4h] [xbp-8Ch]<br>  __int64 v18; // [xsp+8h] [xbp-88h]<br>  __int64 v19; // [xsp+10h] [xbp-80h]<br>  bool v20; // [xsp+1Fh] [xbp-71h]<br>  __int64 v21; // [xsp+20h] [xbp-70h]<br>  __int64 v22; // [xsp+28h] [xbp-68h]<br><br>  v2 = ((((x_52 - 1) * x_52) ^ 0xFFFFFFFE) &amp; ((x_52 - 1) * x_52)) == 0;<br>  v3 = (y_53 &lt; 10 &amp;&amp; v2) | (y_53 &lt; 10) ^ v2;<br>  v4 = v3 == 0;<br>  if ( v3 )<br>    v5 = 2139543119;<br>  else<br>    v5 = -1006104199;<br>  if ( v3 )<br>    v6 = 2857839067LL;<br>  else<br>    v6 = 3288863097LL;<br>  if ( v4 )<br>    v7 = 417237071;<br>  else<br>    v7 = 1552878014;<br>  if ( v4 )<br>    v8 = 417237071;<br>  else<br>    v8 = 83927717;<br>  if ( v4 )<br>    v9 = 1979178465;<br>  else<br>    v9 = 1532617102;<br>  if ( v4 )<br>    v10 = 1979178465;<br>  else<br>    v10 = 1448572860;<br>  v11 = a1 &gt;= 0x17;<br>  v12 = (a1 + 16) &amp; 0xFFFFFFFFFFFFFFF0LL;<br>  if ( v11 )<br>    v13 = -1204245777;<br>  else<br>    v13 = 458200882;<br>  v14 = -162189241;<br>  v17 = v6;<br>  while ( 1 )<br>  &#123;<br>    while ( 1 )<br>    &#123;<br>      while ( 1 )<br>      &#123;<br>        while ( 1 )<br>        &#123;<br>          v15 = v14;<br>          if ( v14 &gt; 417237070 )<br>            break;<br>          if ( v14 &lt;= -830847626 )<br>          &#123;<br>            v14 = v5;<br>            if ( v15 != -1437128229 )<br>            &#123;<br>              v14 = v10;<br>              if ( v15 != -1204245777 )<br>                v14 = -1437128229;<br>            &#125;<br>          &#125;<br>          else if ( v14 &gt; 83927716 )<br>          &#123;<br>            v14 = v7;<br>            if ( v15 != 83927717 )<br>            &#123;<br>              v14 = v15;<br>              if ( v15 == 161196073 )<br>              &#123;<br>                v14 = v17;<br>                v22 = v1;<br>              &#125;<br>            &#125;<br>          &#125;<br>          else if ( v14 == -830847625 )<br>          &#123;<br>            v6 = v18;<br>            v14 = 2114615228;<br>          &#125;<br>          else<br>          &#123;<br>            v14 = v13;<br>          &#125;<br>        &#125;<br>        if ( v14 &gt; 1552878013 )<br>          break;<br>        if ( v14 &gt; 1448572859 )<br>        &#123;<br>          if ( v14 == 1448572860 )<br>          &#123;<br>            v18 = v12;<br>            v14 = v9;<br>            v19 = v12 - 1;<br>            v20 = v12 == 24;<br>          &#125;<br>          else<br>          &#123;<br>            v6 = v19;<br>            if ( v20 )<br>              v14 = -830847625;<br>            else<br>              v14 = 2114615228;<br>          &#125;<br>        &#125;<br>        else<br>        &#123;<br>          v14 = 83927717;<br>          if ( v15 != 417237071 )<br>          &#123;<br>            v14 = v15;<br>            if ( v15 == 458200882 )<br>            &#123;<br>              v1 = 22LL;<br>              v14 = 161196073;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>      if ( v14 &gt; 2114615227 )<br>        break;<br>      if ( v14 == 1552878014 )<br>      &#123;<br>        v1 = v21;<br>        v14 = 161196073;<br>      &#125;<br>      else<br>      &#123;<br>        v14 = 1448572860;<br>      &#125;<br>    &#125;<br>    if ( v14 != 2114615228 )<br>      break;<br>    v21 = v6;<br>    v14 = v8;<br>  &#125;<br>  return v22;<br>&#125;<br>AI:<br>int sub_131D0(unsigned long long a1)<br>&#123;<br>int r2, r3;<br>unsigned long long r4;<br>int v8, v7, v6, v5, v4, v3, v2, v1;<br><br>if (x_52 == 1) &#123;<br>if (y_53 &lt; 10) &#123;<br>v1 = -1006104199;<br>v2 = 3288863097;<br>v3 = 83927717;<br>v4 = 1448572860;<br>&#125;<br>else &#123;<br>v1 = 2139543119;<br>v2 = 2857839067;<br>v3 = 1552878014;<br>v4 = 1532617102;<br>&#125;<br>v5 = 417237071;<br>v6 = 417237071;<br>v7 = 1979178465;<br>v8 = 1979178465;<br>&#125;<br>r4 = (a1 + 16) &amp; 0xFFFFFFFFFFFFFFF0;<br>if (a1 &gt;= 23) &#123;<br>v1 = -1204245777;<br>&#125;<br>else &#123;<br>v1 = 458200882;<br>&#125;<br>v2 = -162189241;<br>for (;;) &#123;<br>if (v2 &gt; 417237070) &#123;<br>if (v2 &gt; 1552878013) &#123;<br>if (v2 &gt; 2114615227) &#123;<br>break;<br>&#125;<br>if (v2 == 1552878014) &#123;<br>r2 = r4;<br>v2 = 161196073;<br>continue;<br>&#125;<br>v2 = 1448572860;<br>continue;<br>&#125;<br>if (v2 &gt; 1448572859) &#123;<br>if (v2 == 1448572860) &#123;<br>r4 = r2;<br>v2 = v4;<br>continue;<br>&#125;<br>if (r4 == 24) &#123;<br>v2 = -830847625;<br>continue;<br>&#125;<br>r2 = r4;<br>v2 = 2114615228;<br>continue;<br>&#125;<br>if (v2 &gt; 83927716) &#123;<br>if (v2 == 83927717) &#123;<br>v2 = v3;<br>continue;<br>&#125;<br>r2 = r4;<br>v2 = 161196073;<br>continue;<br>&#125;<br>if (v2 == -830847625) &#123;<br>r2 = r4;<br>v2 = 2114615228;<br>continue;<br>&#125;<br>v2 = v5;<br>continue;<br>&#125;<br>if (v2 &lt;= -830847626) &#123;<br>if (v2 == -1437128229) &#123;<br>v2 = v8;<br>continue;<br>&#125;<br>if (v2 == -1204245777) &#123;<br>v2 = v7;<br>continue;<br>&#125;<br>v2 = v1;<br>continue;<br>&#125;<br>if (v2 == -162189241) &#123;<br>v2 = v6;<br>continue;<br>&#125;<br>if (v2 == 161196073) &#123;<br>r2 = 22;<br>v2 = v2;<br>continue;<br>&#125;<br>v2 = v1;<br>&#125;<br>return r2;<br>&#125;<br><br>Human: <br></code></pre></td></tr></table></figure><p>第二次优化 很显然这样下去我们要被优化了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">去除没意义的分支<br>int sub_131D0(unsigned long long a1)<br>&#123;<br>int r2, r3;<br>unsigned long long r4;<br>int v8, v7, v6, v5, v4, v3, v2, v1;<br><br>if (x_52 == 1) &#123;<br>if (y_53 &lt; 10) &#123;<br>v1 = -1006104199;<br>v2 = 3288863097;<br>v3 = 83927717;<br>v4 = 1448572860;<br>&#125;<br>else &#123;<br>v1 = 2139543119;<br>v2 = 2857839067;<br>v3 = 1552878014;<br>v4 = 1532617102;<br>&#125;<br>v5 = 417237071;<br>v6 = 417237071;<br>v7 = 1979178465;<br>v8 = 1979178465;<br>&#125;<br>r4 = (a1 + 16) &amp; 0xFFFFFFFFFFFFFFF0;<br>if (a1 &gt;= 23) &#123;<br>v1 = -1204245777;<br>&#125;<br>else &#123;<br>v1 = 458200882;<br>&#125;<br>v2 = -162189241;<br>for (;;) &#123;<br>if (v2 &gt; 417237070) &#123;<br>if (v2 &gt; 1552878013) &#123;<br>if (v2 &gt; 2114615227) &#123;<br>break;<br>&#125;<br>if (v2 == 1552878014) &#123;<br>r2 = r4;<br>v2 = 161196073;<br>continue;<br>&#125;<br>v2 = 1448572860;<br>continue;<br>&#125;<br>if (v2 &gt; 1448572859) &#123;<br>if (v2 == 1448572860) &#123;<br>r4 = r2;<br>v2 = v4;<br>continue;<br>&#125;<br>if (r4 == 24) &#123;<br>v2 = -830847625;<br>continue;<br>&#125;<br>r2 = r4;<br>v2 = 2114615228;<br>continue;<br>&#125;<br>if (v2 &gt; 83927716) &#123;<br>if (v2 == 83927717) &#123;<br>v2 = v3;<br>continue;<br>&#125;<br>r2 = r4;<br>v2 = 161196073;<br>continue;<br>&#125;<br>if (v2 == -830847625) &#123;<br>r2 = r4;<br>v2 = 2114615228;<br>continue;<br>&#125;<br>v2 = v5;<br>continue;<br>&#125;<br>if (v2 &lt;= -830847626) &#123;<br>if (v2 == -1437128229) &#123;<br>v2 = v8;<br>continue;<br>&#125;<br>if (v2 == -1204245777) &#123;<br>v2 = v7;<br>continue;<br>&#125;<br>v2 = v1;<br>continue;<br>&#125;<br>if (v2 == -162189241) &#123;<br>v2 = v6;<br>continue;<br>&#125;<br>if (v2 == 161196073) &#123;<br>r2 = 22;<br>v2 = v2;<br>continue;<br>&#125;<br>v2 = v1;<br>&#125;<br>return r2;<br>&#125;<br><br>AI:<br>int sub_131D0(unsigned long long a1)<br>&#123;<br>int r2, r3;<br>unsigned long long r4;<br>int v1;<br><br>r4 = (a1 + 16) &amp; 0xFFFFFFFFFFFFFFF0;<br>if (a1 &gt;= 23) &#123;<br>v1 = -1204245777;<br>&#125;<br>else &#123;<br>v1 = 458200882;<br>&#125;<br>if (r4 == 24) &#123;<br>v1 = -830847625;<br>&#125;<br><br>r2 = r4;<br>return r2;<br>&#125;<br></code></pre></td></tr></table></figure><p>再来一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">__int64 __fastcall sub_1900C(__int64 result)<br>&#123;<br>  unsigned int v1; // w25<br>  int v2; // w27<br>  int v3; // w26<br>  int v4; // w26<br>  bool v5; // zf<br>  _BOOL4 v6; // w26<br>  int v7; // w28<br>  _BOOL4 v8; // w26<br>  _BOOL4 v9; // w26<br>  _BOOL4 v10; // w26<br>  _BOOL4 v11; // w26<br>  __int64 v12; // [xsp+8h] [xbp-68h]<br>  bool v13; // [xsp+19h] [xbp-57h]<br>  bool v14; // [xsp+1Ah] [xbp-56h]<br>  bool v15; // [xsp+1Bh] [xbp-55h]<br>  unsigned int v16; // [xsp+1Ch] [xbp-54h]<br><br>  v1 = ~((x_32 - 1) * x_32) | 0xFFFFFFFE;<br>  v13 = v1 == -1;<br>  v2 = 1784382885;<br>  v14 = y_33 &lt; 10;<br>  while ( 1 )<br>  &#123;<br>    while ( 1 )<br>    &#123;<br>      while ( 1 )<br>      &#123;<br>        while ( 1 )<br>        &#123;<br>          v3 = v2;<br>          if ( v2 &gt; 426583910 )<br>            break;<br>          if ( v2 &gt; -264856942 )<br>          &#123;<br>            if ( v2 == -264856941 )<br>            &#123;<br>              v10 = ((((x_32 - 1) * x_32) ^ 0xFFFFFFFE) &amp; ((x_32 - 1) * x_32)) == 0;<br>              if ( (y_33 &lt; 10 &amp;&amp; v10) | (y_33 &lt; 10) ^ v10 )<br>                v2 = 426583911;<br>              else<br>                v2 = 1779832790;<br>            &#125;<br>            else if ( v2 == 137437904 )<br>            &#123;<br>              v15 = v16 &lt; 3;<br>              v11 = ((((_BYTE)x_32 - 1) * (_BYTE)x_32) &amp; 1) == 0;<br>              if ( (y_33 &lt; 10 &amp;&amp; v11) | (y_33 &lt; 10) ^ v11 )<br>                v2 = -1759043329;<br>              else<br>                v2 = 208888353;<br>            &#125;<br>            else<br>            &#123;<br>              v2 = 137437904;<br>            &#125;<br>          &#125;<br>          else if ( v2 == -1759043329 )<br>          &#123;<br>            if ( v15 )<br>              v2 = 778267431;<br>            else<br>              v2 = -264856941;<br>          &#125;<br>          else if ( v2 == -1528273384 )<br>          &#123;<br>            v12 = result;<br>            v8 = ((((_BYTE)x_32 - 1) * (_BYTE)x_32) &amp; 1) == 0;<br>            if ( (y_33 &lt; 10 &amp;&amp; v8) | (y_33 &lt; 10) ^ v8 )<br>              v2 = 1048288643;<br>            else<br>              v2 = 831000698;<br>          &#125;<br>          else<br>          &#123;<br>            v16 = v1;<br>            v4 = (x_32 - 1) * x_32;<br>            v5 = ((v4 ^ 0xFFFFFFFE) &amp; v4) == 0;<br>            v6 = ((v4 ^ 0xFFFFFFFE) &amp; v4) != 0;<br>            v7 = v5;<br>            if ( (y_33 &lt; 10) ^ v7 | (y_33 &lt;= 9 &amp;&amp; !v6) )<br>              v2 = 137437904;<br>            else<br>              v2 = 208888353;<br>          &#125;<br>        &#125;<br>        if ( v2 &gt; 1048288642 )<br>          break;<br>        if ( v2 == 426583911 )<br>        &#123;<br>          v9 = (((x_32 - 1) * x_32) &amp; 1) == 0;<br>          if ( (y_33 &lt; 10 &amp;&amp; v9) | (y_33 &lt; 10) ^ v9 )<br>            v2 = 1342097558;<br>          else<br>            v2 = 1779832790;<br>        &#125;<br>        else if ( v2 == 778267431 )<br>        &#123;<br>          v2 = -450033486;<br>          *(_QWORD *)(v12 + 8LL * v16) = 0LL;<br>          v1 = v16 + 1;<br>        &#125;<br>        else<br>        &#123;<br>          v2 = -1528273384;<br>        &#125;<br>      &#125;<br>      if ( v2 &lt;= 1779832789 )<br>        break;<br>      v2 = 426583911;<br>      if ( v3 != 1779832790 )<br>      &#123;<br>        if ( (((v13 &amp;&amp; v14) | v13 ^ v14) &amp; 1) != 0 )<br>          v2 = -1528273384;<br>        else<br>          v2 = 831000698;<br>      &#125;<br>    &#125;<br>    if ( v2 != 1048288643 )<br>      break;<br>    v1 = 0;<br>    v2 = -450033486;<br>  &#125;<br>  return result;<br>&#125;<br>优化一下<br>AI:<br>  y_33 &lt; 10 ? v2 = 1342097558 : v2 = 1779832790;<br>  x_32 &amp; 1 ? v2 = 1048288643 : v2 = 831000698;<br>  v15 ? v2 = 778267431 : v2 = -264856941;<br>  v16 &lt; 3 ? v2 = -1759043329 : v2 = 208888353;<br><br><br>__int64 __fastcall sub_1900C(__int64 result)<br>&#123;<br>  int v1; // w25<br>  int v2; // w28<br>  bool v3; // zf<br>  bool v4; // sf<br>  __int64 v5; // [xsp+8h] [xbp-68h]<br>  unsigned int v6; // [xsp+1Ch] [xbp-54h]<br>  signed int v7; // [xsp+30h] [xbp-40h]<br><br>  v1 = (~(x_32 - 1) * x_32) | 0xFFFFFFFE;<br>  v7 = 10;<br>  if ( y_33 &lt; 10 )<br>  &#123;<br>    v2 = -264856941;<br>    if ( !(x_32 &amp; 1) )<br>      v2 = 831000698;<br>  &#125;<br>  else<br>  &#123;<br>    v2 = 426583910;<br>    if ( !(x_32 &amp; 1) )<br>    &#123;<br>      v2 = 1779832790;<br>      if ( v1 == -1 )<br>        v2 = 1342097558;<br>    &#125;<br>  &#125;<br>  while ( v2 &gt; 426583910 )<br>  &#123;<br>    if ( v2 &gt; 1048288642 )<br>    &#123;<br>      if ( v2 &gt; 1779832789 )<br>      &#123;<br>        v2 = 426583911;<br>        if ( v1 == -1 )<br>          v2 = 1342097558;<br>        else<br>          v2 = 1779832790;<br>      &#125;<br>      else if ( v2 &gt; -450033486 )<br>      &#123;<br>        if ( v2 &gt; 831000697 )<br>        &#123;<br>          if ( v2 &gt; 1342097558 )<br>          &#123;<br>            if ( v2 &gt; 208888353 )<br>              v2 = 137437904;<br>          &#125;<br>          else<br>          &#123;<br>            v2 = -1528273384;<br>          &#125;<br>        &#125;<br>        else if ( v2 &gt; -1759043329 )<br>        &#123;<br>          if ( v2 &gt; -264856942 )<br>          &#123;<br>            if ( v2 &gt; 778267430 )<br>            &#123;<br>              if ( v2 == 1779832790 )<br>              &#123;<br>                v2 = -450033486;<br>                v3 = y_33 &lt; v7;<br>                if ( v3 )<br>                &#123;<br>                  v3 = v6 &lt; 3;<br>                  v4 = (y_33 &lt; v7) ^ v3 | v3;<br>                  if ( v4 == 1 )<br>                  &#123;<br>                    v2 = 778267431;<br>                    *(_QWORD *)(v5 + 8LL * v6) = 0LL;<br>                    ++v6;<br>                  &#125;<br>                  else<br>                  &#123;<br>                    v2 = -1759043329;<br>                    if ( v3 )<br>                      v2 = 208888353;<br>                  &#125;<br>                &#125;<br>              &#125;<br>            &#125;<br>            else<br>            &#123;<br>              v2 = -264856941;<br>            &#125;<br>          &#125;<br>          else<br>          &#123;<br>            v2 = -1528273384;<br>          &#125;<br>        &#125;<br>        else<br>        &#123;<br>          v2 = -1759043329;<br>        &#125;<br>      &#125;<br>      else<br>      &#123;<br>        v2 = -450033486;<br>        v3 = y_33 &lt; v7;<br>        if ( v3 )<br>        &#123;<br>          v3 = v6 &lt; 3;<br>          v4 = (y_33 &lt; v7) ^ v3 | v3;<br>          if ( v4 == 1 )<br>          &#123;<br>            v2 = 778267431;<br>            *(_QWORD *)(v5 + 8LL * v6) = 0LL;<br>            ++v6;<br>          &#125;<br>          else<br>          &#123;<br>            v2 = -1759043329;<br>            if ( v3 )<br>              v2 = 208888353;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    else if ( v2 &gt; 831000698 )<br>    &#123;<br>      if ( v2 &gt; 1342097558 )<br>      &#123;<br>        if ( v2 &gt; 1784382884 )<br>          break;<br>        v2 = 1048288643;<br>        if ( v1 == 0 )<br>          v2 = -450033486;<br>      &#125;<br>      else<br>      &#123;<br>        v2 = 1342097558;<br>      &#125;<br>    &#125;<br>    else<br>    &#123;<br>      v2 = 831000698;<br>    &#125;<br>  &#125;<br>  return result;<br>&#125;<br><br>Human: <br></code></pre></td></tr></table></figure><p>太过分了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">__int64 __fastcall sub_1900C(__int64 result)<br>&#123;<br>  int v2; // w27<br>  int v3; // w28<br>  _BOOL4 v4; // w26<br>  _BOOL4 v5; // w26<br>  _BOOL4 v6; // w26<br>  _BOOL4 v7; // w26<br>  __int64 v8; // [xsp+8h] [xbp-68h]<br>  bool v9; // [xsp+19h] [xbp-57h]<br>  unsigned int v10; // [xsp+1Ch] [xbp-54h]<br><br>  v2 = 1784382885;<br>  v9 = ((x_32 - 1) * x_32) == -1;<br>  while ( 1 )<br>  &#123;<br>    while ( 1 )<br>    &#123;<br>      v3 = v2;<br>      if ( v2 &gt; 426583910 )<br>        break;<br>      if ( v2 &gt; -264856942 )<br>      &#123;<br>        if ( v2 == -264856941 )<br>        &#123;<br>          v6 = ((((x_32 - 1) * x_32) ^ 0xFFFFFFFE) &amp; ((x_32 - 1) * x_32)) == 0;<br>          if ( (y_33 &lt; 10 &amp;&amp; v6) | (y_33 &lt; 10) ^ v6 )<br>            v2 = 426583911;<br>          else<br>            v2 = 1779832790;<br>        &#125;<br>        else if ( v2 == 137437904 )<br>        &#123;<br>          v7 = ((((_BYTE)x_32 - 1) * (_BYTE)x_32) &amp; 1) == 0;<br>          if ( (y_33 &lt; 10 &amp;&amp; v7) | (y_33 &lt; 10) ^ v7 )<br>            v2 = -1759043329;<br>          else<br>            v2 = 208888353;<br>        &#125;<br>        else<br>        &#123;<br>          v2 = 137437904;<br>        &#125;<br>      &#125;<br>      else if ( v2 == -1759043329 )<br>      &#123;<br>        if ( v10 &gt;= 3 )<br>          v2 = 778267431;<br>        else<br>          v2 = -264856941;<br>      &#125;<br>      else if ( v2 == -1528273384 )<br>      &#123;<br>        v8 = result;<br>        v4 = ((((_BYTE)x_32 - 1) * (_BYTE)x_32) &amp; 1) == 0;<br>        if ( (y_33 &lt; 10 &amp;&amp; v4) | (y_33 &lt; 10) ^ v4 )<br>          v2 = 1048288643;<br>        else<br>          v2 = 831000698;<br>      &#125;<br>      else<br>      &#123;<br>        v10 = ~((x_32 - 1) * x_32) | 0xFFFFFFFE;<br>        v4 = (((x_32 - 1) * x_32) ^ 0xFFFFFFFE) &amp; ((x_32 - 1) * x_32) == 0;<br>        v5 = (((x_32 - 1) * x_32) &amp; 1) == 0;<br>        if ( (y_33 &lt; 10 &amp;&amp; v4 &amp; v5) | (y_33 &lt; 10) ^ (v4 | v5) )<br>          v2 = 137437904;<br>        else<br>          v2 = 208888353;<br>      &#125;<br>    &#125;<br>    if ( v2 &gt; 1048288642 )<br>      break;<br>    if ( v2 == 426583911 )<br>    &#123;<br>      v5 = (((x_32 - 1) * x_32) &amp; 1) == 0;<br>      if ( (y_33 &lt; 10 &amp;&amp; v5) | (y_33 &lt; 10) ^ v5 )<br>        v2 = 1342097558;<br>      else<br>        v2 = 1779832790;<br>    &#125;<br>    else if ( v2 == 778267431 )<br>    &#123;<br>      v2 = -450033486;<br>      *(_QWORD *)(v8 + 8LL * v10) = 0LL;<br>      v10 = v10 + 1;<br>    &#125;<br>    else<br>    &#123;<br>      v2 = -1528273384;<br>    &#125;<br>  &#125;<br>  return result;<br>&#125;<br>去除没用的分支<br>AI:<br>__int64 __fastcall sub_1900C(__int64 result)<br>&#123;<br>  int v2; // w27<br>  int v3; // w28<br>  _BOOL4 v4; // w26<br>  _BOOL4 v5; // w26<br>  __int64 v6; // [xsp+8h] [xbp-68h]<br>  bool v7; // [xsp+19h] [xbp-57h]<br>  unsigned int v8; // [xsp+1Ch] [xbp-54h]<br><br>  v2 = 1784382885;<br>  v7 = ((x_32 - 1) * x_32) == -1;<br>  while ( 1 )<br>  &#123;<br>    while ( 1 )<br>    &#123;<br>      v3 = v2;<br>      if ( v2 &gt; 426583910 )<br>        break;<br>      if ( v2 == 208888353 )<br>      &#123;<br>        v2 = 137437904;<br>      &#125;<br>      else if ( v2 == -1759043329 )<br>      &#123;<br>        if ( v8 &gt;= 3 )<br>          v2 = 778267431;<br>        else<br>          v2 = -264856941;<br>      &#125;<br>      else if ( v2 == -1528273384 )<br>      &#123;<br>        v6 = result;<br>        v4 = (((_BYTE)x_32 - 1) * (_BYTE)x_32) &amp; 1 == 0;<br>        if ( (y_33 &lt; 10 &amp;&amp; v4) | (y_33 &lt; 10) ^ v4 )<br>          v2 = 1048288643;<br>        else<br>          v2 = 831000698;<br>      &#125;<br>      else<br>      &#123;<br>        v8 = ~((x_32 - 1) * x_32) | 0xFFFFFFFE;<br>        v4 = (((x_32 - 1) * x_32) ^ 0xFFFFFFFE) &amp; ((x_32 - 1) * x_32) == 0;<br>        v5 = (((x_32 - 1) * x_32) &amp; 1) == 0;<br>        if ( (y_33 &lt; 10 &amp;&amp; v4 &amp; v5) | (y_33 &lt; 10) ^ (v4 | v5) )<br>          v2 = 137437904;<br>        else<br>          v2 = 208888353;<br>      &#125;<br>    &#125;<br>    if ( v2 &gt; 1048288642 )<br>      break;<br>    if ( v2 == 426583911 )<br>    &#123;<br>      v5 = (((x_32 - 1) * x_32) &amp; 1) == 0;<br>      if ( (y_33 &lt; 10 &amp;&amp; v5) | (y_33 &lt; 10) ^ v5 )<br>        v2 = 1342097558;<br>      else<br>        v2 = 1779832790;<br>    &#125;<br>    else if ( v2 == 778267431 )<br>    &#123;<br>      v2 = -450033486;<br>      *(_QWORD *)(v6 + 8LL * v8) = 0LL;<br>      v8 = v8 + 1;<br>    &#125;<br>    else<br>    &#123;<br>      v2 = -1528273384;<br>    &#125;<br>  &#125;<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="呜呜呜"><a href="#呜呜呜" class="headerlink" title="呜呜呜"></a>呜呜呜</h3><p><img src="/.com//../../img/openai_8.png" alt="header"></p><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><h3 id="反汇编-1"><a href="#反汇编-1" class="headerlink" title="反汇编"></a>反汇编</h3><p><img src="/.com//../../img/openai_9.png" alt="header"></p><h2 id="代码转译"><a href="#代码转译" class="headerlink" title="代码转译"></a>代码转译</h2><h3 id="翻译成frida代码"><a href="#翻译成frida代码" class="headerlink" title="翻译成frida代码"></a>翻译成frida代码</h3><p><img src="/.com//../../img/openai_10.png" alt="header"></p><h3 id="各种语言转换"><a href="#各种语言转换" class="headerlink" title="各种语言转换"></a>各种语言转换</h3><ol><li>java翻译成jni函数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">    public static boolean equals(Annotation annotation, Annotation annotation2) &#123;<br>        Method[] declaredMethods;<br>        if (annotation == annotation2) &#123;<br>            return true;<br>        &#125;<br>        if (annotation != null &amp;&amp; annotation2 != null) &#123;<br>            Class&lt;? extends Annotation&gt; annotationType = annotation.annotationType();<br>            Class&lt;? extends Annotation&gt; annotationType2 = annotation2.annotationType();<br>            Validate.notNull(annotationType, &quot;Annotation %s with null annotationType()&quot;, annotation);<br>            Validate.notNull(annotationType2, &quot;Annotation %s with null annotationType()&quot;, annotation2);<br>            if (!annotationType.equals(annotationType2)) &#123;<br>                return false;<br>            &#125;<br>            try &#123;<br>                for (Method method : annotationType.getDeclaredMethods()) &#123;<br>                    if (method.getParameterTypes().length == 0 &amp;&amp; isValidAnnotationMemberType(method.getReturnType()) &amp;&amp; !memberEquals(method.getReturnType(), method.invoke(annotation, new Object[0]), method.invoke(annotation2, new Object[0]))) &#123;<br>                        return false;<br>                    &#125;<br>                &#125;<br>                return true;<br>            &#125; catch (IllegalAccessException | InvocationTargetException unused) &#123;<br>            &#125;<br>        &#125;<br>        return false;<br>    &#125;<br>翻译成jni函数<br>AI:<br><br>JNIEXPORT jboolean JNICALL Java_org_apache_commons_lang3_AnnotationUtils_equals<br>  (JNIEnv *env, jclass clazz, jobject annotation, jobject annotation2) &#123;<br>    jclass annotationType = NULL, annotationType2 = NULL;<br>    jmethodID getDeclaredMethods = NULL;<br>    jobjectArray methodsArray = NULL;<br>    jsize arrayLength;<br>    jint i;<br>    jmethodID getReturnType = NULL, invoke = NULL;<br>    jobject returnType = NULL;<br>    jboolean memberEqualsResult;<br>    jboolean result = JNI_FALSE;<br>    <br>    if (annotation == annotation2) &#123;<br>        result = JNI_TRUE;<br>        goto exit;<br>    &#125;<br>    <br>    if (annotation != NULL &amp;&amp; annotation2 != NULL) &#123;<br>        // get annotationType<br>        annotationType = (*env)-&gt;GetObjectClass(env, annotation);<br>        ValidateNotNull(env, annotationType, &quot;Annotation %s with null annotationType()&quot;, annotation);<br>        annotationType2 = (*env)-&gt;GetObjectClass(env, annotation2);<br>        ValidateNotNull(env, annotationType2, &quot;Annotation %s with null annotationType()&quot;, annotation2);<br>        // compare annotationType<br>        if (!(*env)-&gt;IsSameObject(env, annotationType, annotationType2)) &#123;<br>            result = JNI_FALSE;<br>            goto exit;<br>        &#125;<br>        // get declared methods<br>        getDeclaredMethods = (*env)-&gt;GetMethodID(env, annotationType, &quot;getDeclaredMethods&quot;, &quot;()[Ljava/lang/reflect/Method;&quot;);<br>        methodsArray = (jobjectArray)(*env)-&gt;CallObjectMethod(env, annotationType, getDeclaredMethods);<br>        arrayLength = (*env)-&gt;GetArrayLength(env, methodsArray);<br>        // iterate methods and compare<br>        for (i = 0; i &lt; arrayLength; i++) &#123;<br>            jobject method = (*env)-&gt;GetObjectArrayElement(env, methodsArray, i);<br>            // get param type length<br>            jmethodID getParameterTypes = (*env)-&gt;GetMethodID(env, method, &quot;getParameterTypes&quot;, &quot;()[Ljava/lang/Class;&quot;);<br>            jobjectArray parameterTypesArray = (jobjectArray)(*env)-&gt;CallObjectMethod(env, method, getParameterTypes);<br>            jsize parameterTypesLength = (*env)-&gt;GetArrayLength(env, parameterTypesArray);<br>            // compare return type<br>            getReturnType = (*env)-&gt;GetMethodID(env, method, &quot;getReturnType&quot;, &quot;()Ljava/lang/Class;&quot;);<br>            returnType = (*env)-&gt;CallObjectMethod(env, method, getReturnType);<br>            if (parameterTypesLength == 0 &amp;&amp; isValidAnnotationMemberType(env, returnType)) &#123;<br>                // call method to get return values<br>                invoke = (*env)-&gt;GetMethodID(env, method, &quot;invoke&quot;, &quot;(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;&quot;);<br>                jobject returnValue1 = (*env)-&gt;CallObjectMethod(env, method, invoke, annotation, NULL);<br>                jobject returnValue2 = (*env)-&gt;CallObjectMethod(env, method, invoke, annotation2, NULL);<br>                // compare return values<br>                if (!memberEquals(env, returnType, returnValue1, returnValue2, &amp;memberEqualsResult)) &#123;<br>                    // call failed<br>                    result = JNI_FALSE;<br>                    goto exit;<br>                &#125;<br>                else &#123;<br>                    // compare failed<br>                    if (memberEqualsResult == JNI_FALSE) &#123;<br>                        result = JNI_FALSE;<br>                        goto exit;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        result = JNI_TRUE;<br>    &#125;<br>    <br>exit:<br>    if (annotationType != NULL) &#123;<br>        (*env)-&gt;DeleteLocalRef(env, annotationType);<br>    &#125;<br>    if (annotationType2 != NULL) &#123;<br>        (*env)-&gt;DeleteLocalRef(env, annotationType2);<br>    &#125;<br>    if (methodsArray != NULL) &#123;<br>        (*env)-&gt;DeleteLocalRef(env, methodsArray);<br>    &#125;<br>    if (returnType != NULL) &#123;<br>        (*env)-&gt;DeleteLocalRef(env, returnType);<br>    &#125;<br>    return result;<br>&#125;<br>Human: <br><br></code></pre></td></tr></table></figure></li></ol><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>目前来看重复性的工作让chatGPT来做已经是可行的了,比如代码的转换，算法识别，优化代码。当然chatGPT并不是万能的他的回答并不一定能做到最优(甚至有可能是错误的)但是chatGPT还是一个非常棒的工具，还有非常多的姿势等待发掘！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> 人类一败涂地 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida常用代码</title>
      <link href="/2022/11/29/frida%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/11/29/frida%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="常用代码"><a href="#常用代码" class="headerlink" title="常用代码"></a>常用代码</h2><h3 id="普通函数hook"><a href="#普通函数hook" class="headerlink" title="普通函数hook"></a>普通函数hook</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">var use = Java.use(<span class="hljs-string">&quot;类名&quot;</span>);<br>var use = Java.use(<span class="hljs-string">&quot;类名&quot;</span>);<br>use.函数名.implementation = <span class="hljs-keyword">function</span> (参数)&#123;<br>    <span class="hljs-built_in">return</span> 函数名(参数);<br>&#125;<br><br>//<span class="hljs-variable">$init</span>代表构造函数<br>use.<span class="hljs-variable">$init</span>.implementation = <span class="hljs-keyword">function</span> (参数)&#123;<br>    <span class="hljs-built_in">return</span> this.<span class="hljs-variable">$init</span>(参数);<br>&#125;<br>//修改返回值<br>var use = Java.use(<span class="hljs-string">&quot;类名&quot;</span>);<br>use.函数名.implementation = <span class="hljs-keyword">function</span> (参数)&#123;<br>    var result = 1;<br>    <span class="hljs-built_in">return</span> result;<br>&#125;<br>      <br>//修改参数<br>    use.函数名.implementation = <span class="hljs-keyword">function</span>(i, str)&#123;<br>    i = 1;<br>    str = 2;<br>    <span class="hljs-built_in">let</span> ret = this.isGridInScreen(i, str);<br>    <span class="hljs-built_in">return</span> ret;<br>&#125;;<br>//hook重载函数<br>use.函数名.overload(<span class="hljs-string">&quot;参数列表&quot;</span>).implementation = <span class="hljs-keyword">function</span> (A)&#123;<br><span class="hljs-built_in">return</span> this.函数名(A);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数名或者类名加密函数"><a href="#函数名或者类名加密函数" class="headerlink" title="函数名或者类名加密函数"></a>函数名或者类名加密函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> use = Java.use(<span class="hljs-string">&quot;com.baidu.\u96C6\u5408&quot;</span>);<br>    use[<span class="hljs-string">&quot;\u53D6\u9879\u76EE\u603B\u6570&quot;</span>].implementation = <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>        console.log(<span class="hljs-string">&#x27;\u53D6\u9879\u76EE\u603B\u6570 is called&#x27;</span>);<br>        <span class="hljs-built_in">let</span> ret = this[<span class="hljs-string">&quot;\u53D6\u9879\u76EE\u603B\u6570&quot;</span>]();<br>        console.log(<span class="hljs-string">&#x27;\u53D6\u9879\u76EE\u603B\u6570 ret value is &#x27;</span> + ret);<br>        <span class="hljs-built_in">return</span> ret;<br>    &#125;;<br></code></pre></td></tr></table></figure><h3 id="frida-主动调用"><a href="#frida-主动调用" class="headerlink" title="frida 主动调用"></a>frida 主动调用</h3><h4 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> use = Java.use(<span class="hljs-string">&quot;类名&quot;</span>);<br>var ret = use.getString(<span class="hljs-string">&quot;参数&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="非静态函数"><a href="#非静态函数" class="headerlink" title="非静态函数"></a>非静态函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">//hook实例方法  实例方法需要获取到类的对象 才能调用<br><span class="hljs-built_in">let</span> use = Java.use(<span class="hljs-string">&quot;类名&quot;</span>).<span class="hljs-variable">$new</span>();<br>var ret = use.getString(<span class="hljs-string">&quot;参数&quot;</span>);<br><br>//或者在hook到某个函数时<br> <span class="hljs-built_in">let</span> ComposeMessageView = Java.use(<span class="hljs-string">&quot;com.android.messaging.ui.conversation.ComposeMessageView&quot;</span>);<br>ComposeMessageView[<span class="hljs-string">&quot;sendMessageInternal&quot;</span>].implementation = <span class="hljs-keyword">function</span> (z) &#123;<br>    console.log(<span class="hljs-string">&#x27;sendMessageInternal is called&#x27;</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-string">&#x27;z: &#x27;</span> + z);<br>    //this 就是当前类的对象<br>    this.getString();<br>    <span class="hljs-built_in">let</span> ret = this.sendMessageInternal(z);<br>    console.log(<span class="hljs-string">&#x27;sendMessageInternal ret value is &#x27;</span> + ret);<br>    <span class="hljs-built_in">return</span> ret;<br>&#125;;<br><br>//在或者 在内存中搜索需要调用的类的对象<br>Java.choose(<span class="hljs-string">&quot;com.android.messaging.ui.conversation.ComposeMessageView&quot;</span>,&#123;<br>    onMatch: <span class="hljs-keyword">function</span> (obj)&#123;<br>        console.log(<span class="hljs-string">&quot;内存中每找到一次就会调用一次&quot;</span>);<br>        //实例方法的第三种种调用方式<br>        obj.getString();<br>    &#125;,<br>    onComplete:<span class="hljs-function"><span class="hljs-title">function</span></span> ()&#123;<br>        console.log(<span class="hljs-string">&quot;内存中搜索完毕后执行&quot;</span>)<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="堆栈代码的打印-打印异常输出信息"><a href="#堆栈代码的打印-打印异常输出信息" class="headerlink" title="堆栈代码的打印 打印异常输出信息"></a>堆栈代码的打印 打印异常输出信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">var <span class="hljs-built_in">log</span> = Java.use(<span class="hljs-string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="hljs-string">&quot;java.lang.Throwable&quot;</span>).<span class="hljs-variable">$new</span>());<br> console.log(<span class="hljs-built_in">log</span>);<br></code></pre></td></tr></table></figure><h3 id="hookMethods"><a href="#hookMethods" class="headerlink" title="hookMethods"></a>hookMethods</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">tuzihookMethods</span></span>()&#123;<br>    var utils = Java.use(<span class="hljs-string">&quot;com.tuzi&quot;</span>);<br>    var methods = utils.class.getDeclaredMethods();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> j = 0; j &lt;methods.length ; j++) &#123;<br>        <span class="hljs-built_in">let</span> methodName = methods[j].getName();<br>        var overloadsArr = utils[methodName].overloads;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; overloadsArr.length; i++) &#123;<br>            overloadsArr[i].implementation = <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>                var params = <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> j = 0; j &lt; arguments.length; j++) &#123;<br>                    params += arguments[j] + <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                console.log(<span class="hljs-string">&quot;utils.getCalc is called! params is: &quot;</span>, params);<br>                console.log(this);<br>                <span class="hljs-built_in">return</span> this[methodName].apply(this, arguments);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="enumclass"><a href="#enumclass" class="headerlink" title="enumclass"></a>enumclass</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">tuzienumclass</span></span>()&#123;<br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> ()&#123;<br>        //枚举所有已加载的类<br>        // console.log(Java.enumerateLoadedClassesSync().<span class="hljs-built_in">join</span>(<span class="hljs-string">&quot;\n&quot;</span>));<br>        // console.log(Java.enumerateLoadedClassesSync().length);<br>        //java反射<br>        Java.openClassFile(<span class="hljs-string">&quot;/data/local/tmp/out.dex&quot;</span>).load();<br>        var wallet = Java.use(<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>);<br>        var Methods = wallet.class.getDeclaredMethods();<br>        var Constructors = wallet.class.getDeclaredConstructors();<br>        var Fiedlds = wallet.class.getDeclaredFields();<br>        var Classes = wallet.class.getDeclaredClasses();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; Constructors.length; i++) &#123;<br>            console.log(<span class="hljs-string">&quot;构造函数&quot;</span>+Constructors[i].getName());<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; Methods.length; i++) &#123;<br>            console.log(<span class="hljs-string">&quot;函数&quot;</span>+Methods[i].getName());<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; Fiedlds.length; i++) &#123;<br>            console.log(<span class="hljs-string">&quot;字段&quot;</span>+Fiedlds[i].getName());<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; Classes.length; i++) &#123;<br>            console.log(<span class="hljs-string">&quot;内部类&quot;</span>+Classes[i].getName());<br>            var Wallet<span class="hljs-variable">$InnerStructure</span> = Classes[i].getDeclaredFields();<br>            var Wallet<span class="hljs-variable">$InnerStructureMethods</span> = Classes[i].getDeclaredMethods();<br>            var Wallet<span class="hljs-variable">$InnerStructuregetConstructors</span> = Classes[i].getDeclaredConstructors();<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> j = 0; j &lt; Wallet<span class="hljs-variable">$InnerStructure</span>.length; j++) &#123;<br>               console.log(<span class="hljs-string">&quot;内部类字段&quot;</span>+Wallet<span class="hljs-variable">$InnerStructure</span>[j].getName());<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> j = 0; j &lt; Wallet<span class="hljs-variable">$InnerStructureMethods</span>.length; j++) &#123;<br>                console.log(<span class="hljs-string">&quot;内部类方法&quot;</span>+Wallet<span class="hljs-variable">$InnerStructureMethods</span>[j].getName());<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> j = 0; j &lt; Wallet<span class="hljs-variable">$InnerStructuregetConstructors</span>.length; j++) &#123;<br>                console.log(<span class="hljs-string">&quot;内部类构造方法&quot;</span>+Wallet<span class="hljs-variable">$InnerStructuregetConstructors</span>[j].getName());<br>            &#125;<br>        &#125;<br><br>    &#125;);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="注入dex"><a href="#注入dex" class="headerlink" title="注入dex"></a>注入dex</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">tuziopenDex</span></span>()&#123;<br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> ()&#123;<br>        Java.openClassFile(<span class="hljs-string">&quot;/data/local/tmp/dexfile.dex&quot;</span>).load();<br>        var use = Java.use(<span class="hljs-string">&quot;android.content.Intent&quot;</span>);<br>        var dialog = Java.use(<span class="hljs-string">&quot;com.example.myapplication.dialog&quot;</span>);<br>        use.<span class="hljs-variable">$init</span>.overload(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;java.lang.Class&#x27;</span>).implementation = <span class="hljs-keyword">function</span> (a,b)&#123;<br>            //console.log(a+b);<br>            dialog.showAlterDialog(a);<br>        &#125;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动activity"><a href="#启动activity" class="headerlink" title="启动activity"></a>启动activity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">var ActivityThread = Java.use(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>);<br>       var application = ActivityThread.currentApplication();<br>       //获取context<br>       var context = application.getApplicationContext();<br>       console.log(context);<br>       var FridaActivity7 = Java.use(<span class="hljs-string">&quot;com.github.lastingyang.androiddemo.Activity.FridaActivity7&quot;</span>);<br>       var Intent = Java.use(<span class="hljs-string">&quot;android.content.Intent&quot;</span>);<br>       Java.scheduleOnMainThread(<span class="hljs-function"><span class="hljs-title">function</span></span>() &#123;<br>           var intent = Intent.<span class="hljs-variable">$new</span>(context, FridaActivity7.<span class="hljs-variable">$new</span>().getClass());<br>           intent.setFlags(0x10000000);<br>           console.log(intent);<br>           context.startActivity(intent);<br>       &#125;)<br></code></pre></td></tr></table></figure><h3 id="getContext"><a href="#getContext" class="headerlink" title="getContext"></a>getContext</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">var current_application = Java.use(<span class="hljs-string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication();<br>var context = current_application.getApplicationContext();<br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">tuzicast</span></span>()&#123;<br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> ()&#123;<br>        //JAVA.cast<br>       // 向上转型的，不能用toString直接得到结果，比如Map、List类型的打印会输出objcet<br>        var utils = Java.use(<span class="hljs-string">&quot;com.tuzi&quot;</span>);<br>        utils.shufferMap2.implementation = <span class="hljs-keyword">function</span> (map) &#123;<br>            console.log(<span class="hljs-string">&quot;map: &quot;</span>, map);<br>            var result = Java.cast(map, Java.use(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>));<br>            console.log(<span class="hljs-string">&quot;map: &quot;</span>, result);<br>            <span class="hljs-built_in">return</span> this.shufferMap2(result);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造数组"><a href="#构造数组" class="headerlink" title="构造数组"></a>构造数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">tuziArray</span></span>()&#123;<br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> ()&#123;<br>        <span class="hljs-built_in">let</span> Utils = Java.use(<span class="hljs-string">&quot;com.tuzi&quot;</span>);<br>        var  strarr = Java.array(<br>            <span class="hljs-string">&quot;Ljava.lang.String&quot;</span>, //数组类型<br>            [<span class="hljs-string">&quot;sjaldhja&quot;</span>,<span class="hljs-string">&quot;sakhydo8iqw&quot;</span>,<span class="hljs-string">&quot;sajwiqo&quot;</span>,<span class="hljs-string">&quot;zutiaji&quot;</span>]<br>        );<br><br>        var bool = Java.use(<span class="hljs-string">&#x27;java.lang.Boolean&#x27;</span>);<br>        var Integer = Java.use(<span class="hljs-string">&#x27;java.lang.Integer&#x27;</span>);<br>        var  strarr1 = Java.array(<br>            <span class="hljs-string">&quot;Ljava.lang.Object&quot;</span>, //数组类型<br>            [Integer.<span class="hljs-variable">$init</span>(100),bool.<span class="hljs-variable">$init</span>(<span class="hljs-literal">true</span>),<span class="hljs-string">&quot;sajwiqo&quot;</span>,<span class="hljs-string">&quot;zutiaji&quot;</span>]<br>        );<br><br>     //   var retval = Utils.myPrint([<span class="hljs-string">&quot;tuzi&quot;</span>,<span class="hljs-string">&quot;Frida&quot;</span>,<span class="hljs-string">&quot;lalla&quot;</span>]);<br>        var retval = Utils.myPrint(strarr1);<br>        console.log(retval)<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="加载so"><a href="#加载so" class="headerlink" title="加载so"></a>加载so</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">tuziloadlibrary</span></span>()&#123;<br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> ()&#123;<br>        <span class="hljs-built_in">let</span> SplshActivity = Java.use(<span class="hljs-string">&quot;com.hange.hangevip.SplshActivity&quot;</span>);<br>        SplshActivity.onCreate.implementation = <span class="hljs-keyword">function</span>(bundle)&#123;<br>            console.log(<span class="hljs-string">&#x27;onCreate is called&#x27;</span>);<br>            <span class="hljs-built_in">let</span> ret = this.onCreate(bundle);<br>            console.log(<span class="hljs-string">&#x27;onCreate ret value is &#x27;</span> + ret);<br>            var system = Java.use(<span class="hljs-string">&quot;java.lang.System&quot;</span>);<br>            system.loadLibrary(<span class="hljs-string">&quot;neonuijni_public&quot;</span>);<br>            // var targetSo = Module.findBaseAddress(<span class="hljs-string">&#x27;libneonuijni_public.so&#x27;</span>);<br>            //hook_suspected_function(targetSo);<br>            <span class="hljs-built_in">return</span> ret;<br>        &#125;;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用的定位手段"><a href="#常用的定位手段" class="headerlink" title="常用的定位手段"></a>常用的定位手段</h2><h3 id="定位弹窗"><a href="#定位弹窗" class="headerlink" title="定位弹窗"></a>定位弹窗</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">showStack</span></span>()&#123;<br>    console.log(Java.use(<span class="hljs-string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="hljs-string">&quot;java.lang.Throwable&quot;</span>).<span class="hljs-variable">$new</span>()));<br>&#125;<br>var toast = Java.use(<span class="hljs-string">&quot;android.widget.Toast&quot;</span>);<br>toast.show.implementation = <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>    showStack();<br>    <span class="hljs-built_in">return</span> this.show();<br>&#125;<br><br>var Dialog = Java.use(<span class="hljs-string">&quot;android.app.Dialog&quot;</span>);<br>    Dialog.setCancelable.implementation = <span class="hljs-keyword">function</span> (bool)&#123;<br>    showStack();<br>    this.setCancelable(bool);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="String的getBytes、isEmpty方法"><a href="#String的getBytes、isEmpty方法" class="headerlink" title="String的getBytes、isEmpty方法"></a>String的getBytes、isEmpty方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bahs">    var str = Java.use(&quot;java.lang.String&quot;);<br>    str.getBytes.overload().implementation = function () &#123;<br>        showStack();<br>        var result = this.getBytes();<br>        var newStr = str.$new(result);<br>        console.log(&quot;str.getBytes result: &quot;, newStr);<br>        return result;<br>    &#125;<br>    str.getBytes.overload(&#x27;java.lang.String&#x27;).implementation = function (a) &#123;<br>        showStack();<br>        var result = this.getBytes(a);<br>        var newStr = str.$new(result, a);<br>        console.log(&quot;str.getBytes result: &quot;, newStr);<br>        return result;<br>    &#125;<br><br>    str.split.overload(&#x27;java.lang.String&#x27;).implementation = function (s)&#123;<br>        var ret = this.split(s);<br>        console.log(ret);<br>        return ret;<br>    &#125;<br>    str.split.overload(&#x27;java.lang.String&#x27;, &#x27;int&#x27;).implementation = function (s,i)&#123;<br>        var ret = this.split(s,i);<br>        console.log(ret);<br>        return ret;<br>    &#125;<br>    var StringBuffer = Java.use(&quot;java.lang.StringBuffer&quot;);<br><br><br>    str.getBytes.overload().implementation = function () &#123;<br>        //    showStack();<br>        var result = this.getBytes();<br>        var newStr = str.$new(result);<br>        console.log(&quot;str.getBytes result: &quot;, newStr);<br>        return result;<br>    &#125;<br>    str.getBytes.overload(&#x27;java.lang.String&#x27;).implementation = function (a) &#123;<br>//        showStack();<br>        console.log(&quot;str.getBytes crete: &quot;, a);<br>        var result = this.getBytes(a);<br>        var newStr = str.$new(result, a);<br>        console.log(&quot;str.getBytes result: &quot;, newStr);<br>        return result;<br>    &#125;<br><br>    StringBuffer.toString.implementation = function () &#123;<br>        var result = this.toString.apply(this, arguments);<br>        console.log(result);<br>        var result = this.toString();<br>        console.log(result);<br>        return result;<br>    &#125;<br><br><br>    str.valueOf.overload(&#x27;int&#x27;).implementation = function (c)&#123;<br>        var ret = this.valueOf(c);<br>        console.log(ret);<br>        return ret;<br>    &#125;<br><br>    str.valueOf.overload(&#x27;char&#x27;).implementation = function ()&#123;<br>        var ret = this.valueOf();<br>        console.log(ret);<br>        return ret;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="getContext-1"><a href="#getContext-1" class="headerlink" title="getContext"></a>getContext</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">var current_application = Java.use(<span class="hljs-string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication();<br>var context = current_application.getApplicationContext();<br></code></pre></td></tr></table></figure><h3 id="hookJSON"><a href="#hookJSON" class="headerlink" title="hookJSON"></a>hookJSON</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">var jSONObject = Java.use(<span class="hljs-string">&quot;org.json.JSONObject&quot;</span>);<br> jSONObject.getString.implementation = <span class="hljs-keyword">function</span> (a) &#123;<br>     console.log(<span class="hljs-string">&quot;jSONObject.getString: &quot;</span>, a);<br>     var result = this.getString(a);<br>     console.log(<span class="hljs-string">&quot;jSONObject.getString result: &quot;</span>, result);<br>     <span class="hljs-built_in">return</span> result;<br> &#125;<br> jSONObject.optString.overload(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="hljs-keyword">function</span> (a) &#123;<br>     console.log(<span class="hljs-string">&quot;jSONObject.optString: &quot;</span>, a);<br>     var result = this.optString(a);<br>     console.log(<span class="hljs-string">&quot;jSONObject.optString result: &quot;</span>, result);<br>     <span class="hljs-built_in">return</span> result;<br> &#125;<br> jSONObject.<span class="hljs-variable">$init</span>.overload(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="hljs-keyword">function</span> (s)&#123;<br><br>     console.log(s);<br>     var result = this.<span class="hljs-variable">$init</span>(s);<br>     console.log(<span class="hljs-string">&quot;jSONObject.<span class="hljs-variable">$init</span> result: &quot;</span>, result);<br>     <span class="hljs-built_in">return</span> result;<br> &#125;<br> var JSONArray = Java.use(<span class="hljs-string">&quot;org.json.JSONArray&quot;</span>);<br> JSONArray.getJSONObject.overload(<span class="hljs-string">&#x27;int&#x27;</span>).implementation = <span class="hljs-keyword">function</span> (i)&#123;<br>     console.log(<span class="hljs-string">&quot;JSONArray.getJSONObject: &quot;</span>,i);<br>     var reslut = this.getJSONObject(i);<br>     console.log(<span class="hljs-string">&quot;JSONArray.getJSONObject: &quot;</span>,reslut);<br>     <span class="hljs-built_in">return</span> reslut;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="hook加固的app"><a href="#hook加固的app" class="headerlink" title="hook加固的app"></a>hook加固的app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>    var application = Java.use(<span class="hljs-string">&#x27;android.app.Application&#x27;</span>);<br>    application.attach.overload(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>).implementation = <span class="hljs-keyword">function</span> (context) &#123;<br>        var result = this.attach(context);<br>        var classloader = context.getClassLoader();<br>        Java.classFactory.loader = classloader;<br>        var activation = Java.classFactory.use(<span class="hljs-string">&#x27;com.baidu.input.activation&#x27;</span>);<br>        console.log(<span class="hljs-string">&quot;activation:&quot;</span> + activation);<br>        activation.aaa.implementation = <span class="hljs-keyword">function</span> (z) &#123;<br>            console.log(<span class="hljs-string">&#x27;aaa is called&#x27;</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-string">&#x27;z: &#x27;</span> + z);<br>            <span class="hljs-built_in">let</span> ret = this.aaa(z);<br>            console.log(<span class="hljs-string">&#x27;aaa ret value is &#x27;</span> + ret);<br>            <span class="hljs-built_in">return</span> ret;<br>        &#125;;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="java层的各种好用工具"><a href="#java层的各种好用工具" class="headerlink" title="java层的各种好用工具"></a>java层的各种好用工具</h2><h3 id="r0trace-肉丝大佬"><a href="#r0trace-肉丝大佬" class="headerlink" title="r0trace   肉丝大佬"></a>r0trace   肉丝大佬</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><code class="hljs bash">var isLite = <span class="hljs-literal">false</span>;<br>var ByPassTracerPid = <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>    var fgetsPtr = Module.findExportByName(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;fgets&quot;</span>);<br>    var fgets = new NativeFunction(fgetsPtr, <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>    Interceptor.replace(fgetsPtr, new NativeCallback(<span class="hljs-keyword">function</span> (buffer, size, fp) &#123;<br>        var retval = fgets(buffer, size, fp);<br>        var bufstr = Memory.readUtf8String(buffer);<br>        <span class="hljs-keyword">if</span> (bufstr.indexOf(<span class="hljs-string">&quot;TracerPid:&quot;</span>) &gt; -1) &#123;<br>            Memory.writeUtf8String(buffer, <span class="hljs-string">&quot;TracerPid:\t0&quot;</span>);<br>            console.log(<span class="hljs-string">&quot;tracerpid replaced: &quot;</span> + Memory.readUtf8String(buffer));<br>        &#125;<br>        <span class="hljs-built_in">return</span> retval;<br>    &#125;, <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>]));<br>&#125;;<br>setImmediate(ByPassTracerPid);<br><br>(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>    <span class="hljs-built_in">let</span> Color = &#123;RESET: <span class="hljs-string">&quot;\x1b[39;49;00m&quot;</span>, Black: <span class="hljs-string">&quot;0;01&quot;</span>, Blue: <span class="hljs-string">&quot;4;01&quot;</span>, Cyan: <span class="hljs-string">&quot;6;01&quot;</span>, Gray: <span class="hljs-string">&quot;7;11&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>: <span class="hljs-string">&quot;2;01&quot;</span>, Purple: <span class="hljs-string">&quot;5;01&quot;</span>, Red: <span class="hljs-string">&quot;1;01&quot;</span>, Yellow: <span class="hljs-string">&quot;3;01&quot;</span>&#125;;<br>    <span class="hljs-built_in">let</span> LightColor = &#123;RESET: <span class="hljs-string">&quot;\x1b[39;49;00m&quot;</span>, Black: <span class="hljs-string">&quot;0;11&quot;</span>, Blue: <span class="hljs-string">&quot;4;11&quot;</span>, Cyan: <span class="hljs-string">&quot;6;11&quot;</span>, Gray: <span class="hljs-string">&quot;7;01&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>: <span class="hljs-string">&quot;2;11&quot;</span>, Purple: <span class="hljs-string">&quot;5;11&quot;</span>, Red: <span class="hljs-string">&quot;1;11&quot;</span>, Yellow: <span class="hljs-string">&quot;3;11&quot;</span>&#125;;    <br>    var colorPrefix = <span class="hljs-string">&#x27;\x1b[3&#x27;</span>, colorSuffix = <span class="hljs-string">&#x27;m&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> c <span class="hljs-keyword">in</span> Color)&#123;<br>        <span class="hljs-keyword">if</span> (c  == <span class="hljs-string">&quot;RESET&quot;</span>) <span class="hljs-built_in">continue</span>;<br>        console[c] = <span class="hljs-keyword">function</span>(message)&#123;<br>            console.log(colorPrefix + Color[c] + colorSuffix + message + Color.RESET);<br>        &#125;<br>        console[<span class="hljs-string">&quot;Light&quot;</span> + c] = <span class="hljs-keyword">function</span>(message)&#123;<br>            console.log(colorPrefix + LightColor[c] + colorSuffix + message + Color.RESET);<br>        &#125;<br>    &#125;<br>&#125;)();<br><span class="hljs-keyword">function</span> uniqBy(array, key) &#123;<br>    var seen = &#123;&#125;;<br>    <span class="hljs-built_in">return</span> array.filter(<span class="hljs-keyword">function</span> (item) &#123;<br>        var k = key(item);<br>        <span class="hljs-built_in">return</span> seen.hasOwnProperty(k) ? <span class="hljs-literal">false</span> : (seen[k] = <span class="hljs-literal">true</span>);<br>    &#125;);<br>&#125;<br><span class="hljs-keyword">function</span> hasOwnProperty(obj, name) &#123;<br>    try &#123;<br>        <span class="hljs-built_in">return</span> obj.hasOwnProperty(name) || name <span class="hljs-keyword">in</span> obj;<br>    &#125; catch (e) &#123;<br>        <span class="hljs-built_in">return</span> obj.hasOwnProperty(name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> getHandle(object) &#123;<br>    <span class="hljs-keyword">if</span> (hasOwnProperty(object, <span class="hljs-string">&#x27;$handle&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (object.<span class="hljs-variable">$handle</span> != undefined) &#123;<br>            <span class="hljs-built_in">return</span> object.<span class="hljs-variable">$handle</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (hasOwnProperty(object, <span class="hljs-string">&#x27;$h&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (object.<span class="hljs-variable">$h</span> != undefined) &#123;<br>            <span class="hljs-built_in">return</span> object.<span class="hljs-variable">$h</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span> null;<br>&#125;<br>//查看域值<br><span class="hljs-keyword">function</span> inspectObject(obj, input) &#123;<br>    var isInstance = <span class="hljs-literal">false</span>;<br>    var obj_class = null;<br>    <span class="hljs-keyword">if</span> (getHandle(obj) === null) &#123;<br>        obj_class = obj.class;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        var Class = Java.use(<span class="hljs-string">&quot;java.lang.Class&quot;</span>);<br>        obj_class = Java.cast(obj.getClass(), Class);<br>        isInstance = <span class="hljs-literal">true</span>;<br>    &#125;<br>    input = input.concat(<span class="hljs-string">&quot;Inspecting Fields: =&gt; &quot;</span>, isInstance, <span class="hljs-string">&quot; =&gt; &quot;</span>, obj_class.toString());<br>    input = input.concat(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>    var fields = obj_class.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (var i <span class="hljs-keyword">in</span> fields) &#123;<br>        <span class="hljs-keyword">if</span> (isInstance || Boolean(fields[i].toString().indexOf(<span class="hljs-string">&quot;static &quot;</span>) &gt;= 0)) &#123;<br>            // output = output.concat(<span class="hljs-string">&quot;\t\t static static static &quot;</span> + fields[i].toString());<br>            var className = obj_class.toString().trim().<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; &quot;</span>)[1];<br>            // console.Red(<span class="hljs-string">&quot;className is =&gt; &quot;</span>,className);<br>            var fieldName = fields[i].toString().<span class="hljs-built_in">split</span>(className.concat(<span class="hljs-string">&quot;.&quot;</span>)).pop();<br>            var fieldType = fields[i].toString().<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; &quot;</span>).slice(-2)[0];<br>            var fieldValue = undefined;<br>            <span class="hljs-keyword">if</span> (!(obj[fieldName] === undefined))<br>                fieldValue = obj[fieldName].value;<br>            input = input.concat(fieldType + <span class="hljs-string">&quot; \t&quot;</span> + fieldName + <span class="hljs-string">&quot; =&gt; &quot;</span>, fieldValue + <span class="hljs-string">&quot; =&gt; &quot;</span>, JSON.stringify(fieldValue));<br>            input = input.concat(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span> input;<br>&#125;<br><br>// trace单个类的所有静态和实例方法包括构造方法 trace a specific Java Method<br><span class="hljs-keyword">function</span> traceMethod(targetClassMethod) &#123;<br>    var delim = targetClassMethod.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-keyword">if</span> (delim === -1) <span class="hljs-built_in">return</span>;<br>    var targetClass = targetClassMethod.slice(0, delim)<br>    var targetMethod = targetClassMethod.slice(delim + 1, targetClassMethod.length)<br>    var hook = Java.use(targetClass);<br>    var overloadCount = hook[targetMethod].overloads.length;<br>    console.Red(<span class="hljs-string">&quot;Tracing Method : &quot;</span> + targetClassMethod + <span class="hljs-string">&quot; [&quot;</span> + overloadCount + <span class="hljs-string">&quot; overload(s)]&quot;</span>);<br>    <span class="hljs-keyword">for</span> (var i = 0; i &lt; overloadCount; i++) &#123;<br>        hook[targetMethod].overloads[i].implementation = <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>            //初始化输出<br>            var output = <span class="hljs-string">&quot;&quot;</span>;<br>            //画个横线<br>            <span class="hljs-keyword">for</span> (var p = 0; p &lt; 100; p++) &#123;<br>                output = output.concat(<span class="hljs-string">&quot;==&quot;</span>);<br>            &#125;<br>            //域值<br>            <span class="hljs-keyword">if</span> (!isLite) &#123; output = inspectObject(this, output); &#125;<br>            //进入函数<br>            output = output.concat(<span class="hljs-string">&quot;\n*** entered &quot;</span> + targetClassMethod);<br>            output = output.concat(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>            // <span class="hljs-keyword">if</span> (arguments.length) console.Black();<br>            //参数<br>            var retval = this[targetMethod].apply(this, arguments);<br>            <span class="hljs-keyword">if</span> (!isLite) &#123;<br>                <span class="hljs-keyword">for</span> (var j = 0; j &lt; arguments.length; j++) &#123;<br>                    output = output.concat(<span class="hljs-string">&quot;arg[&quot;</span> + j + <span class="hljs-string">&quot;]: &quot;</span> + arguments[j] + <span class="hljs-string">&quot; =&gt; &quot;</span> + JSON.stringify(arguments[j]));<br>                    output = output.concat(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>                &#125;<br>                //调用栈<br>                output = output.concat(Java.use(<span class="hljs-string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="hljs-string">&quot;java.lang.Throwable&quot;</span>).<span class="hljs-variable">$new</span>()));<br>                //返回值<br>                output = output.concat(<span class="hljs-string">&quot;\nretval: &quot;</span> + retval + <span class="hljs-string">&quot; =&gt; &quot;</span> + JSON.stringify(retval));<br>            &#125;<br>            // inspectObject(this)<br>            //离开函数<br>            output = output.concat(<span class="hljs-string">&quot;\n*** exiting &quot;</span> + targetClassMethod);<br>            //最终输出<br>            // console.Black(output);<br>            var r = parseInt((Math.random() * 7).toFixed(0));<br>            var i = r;<br>            var printOutput = null;<br>            switch (i) &#123;<br>                <span class="hljs-keyword">case</span> 1:<br>                    printOutput = console.Red;<br>                    <span class="hljs-built_in">break</span>;<br>                <span class="hljs-keyword">case</span> 2:<br>                    printOutput = console.Yellow;<br>                    <span class="hljs-built_in">break</span>;<br>                <span class="hljs-keyword">case</span> 3:<br>                    printOutput = console.Green;<br>                    <span class="hljs-built_in">break</span>;<br>                <span class="hljs-keyword">case</span> 4:<br>                    printOutput = console.Cyan;<br>                    <span class="hljs-built_in">break</span>;<br>                <span class="hljs-keyword">case</span> 5:<br>                    printOutput = console.Blue;<br>                    <span class="hljs-built_in">break</span>;<br>                <span class="hljs-keyword">case</span> 6:<br>                    printOutput = console.Gray;<br>                    <span class="hljs-built_in">break</span>;<br>                default:<br>                    printOutput = console.Purple;<br>            &#125;<br>            printOutput(output);<br>            <span class="hljs-built_in">return</span> retval;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> traceClass(targetClass) &#123;<br>    //Java.use是新建一个对象哈，大家还记得么？<br>    var hook = Java.use(targetClass);<br>    //利用反射的方式，拿到当前类的所有方法<br>    var methods = hook.class.getDeclaredMethods();    <br>    //建完对象之后记得将对象释放掉哈<br>    hook.<span class="hljs-variable">$dispose</span>;<br>    //将方法名保存到数组中<br>    var parsedMethods = [];<br>    var output = <span class="hljs-string">&quot;&quot;</span>;    <br>    output = output.concat(<span class="hljs-string">&quot;\tSpec: =&gt; \r\n&quot;</span>)<br>    methods.forEach(<span class="hljs-keyword">function</span> (method) &#123;<br>        output = output.concat(method.toString())<br>        output = output.concat(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        parsedMethods.push(method.toString().replace(targetClass + <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;TOKEN&quot;</span>).match(/\sTOKEN(.*)\(/)[1]);<br>    &#125;);<br>    //去掉一些重复的值<br>    var Targets = uniqBy(parsedMethods, JSON.stringify);<br>    // targets = [];<br>    var constructors = hook.class.getDeclaredConstructors();<br>    <span class="hljs-keyword">if</span> (constructors.length &gt; 0) &#123;<br>        constructors.forEach(<span class="hljs-keyword">function</span> (constructor) &#123;<br>            output = output.concat(<span class="hljs-string">&quot;Tracing &quot;</span>, constructor.toString())<br>            output = output.concat(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>        &#125;)<br>        Targets = Targets.concat(<span class="hljs-string">&quot;<span class="hljs-variable">$init</span>&quot;</span>)<br>    &#125;<br>    //对数组中所有的方法进行hook，<br>    Targets.forEach(<span class="hljs-keyword">function</span> (targetMethod) &#123;<br>        traceMethod(targetClass + <span class="hljs-string">&quot;.&quot;</span> + targetMethod);<br>    &#125;);<br>    //画个横线<br>    <span class="hljs-keyword">for</span> (var p = 0; p &lt; 100; p++) &#123;<br>        output = output.concat(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br>    console.Green(output);<br>&#125;<br><span class="hljs-keyword">function</span> hook(white, black, target = null) &#123;<br>    console.Red(<span class="hljs-string">&quot;start&quot;</span>)<br>    <span class="hljs-keyword">if</span> (!(target === null)) &#123;<br>        console.LightGreen(<span class="hljs-string">&quot;Begin enumerateClassLoaders ...&quot;</span>)<br>        Java.enumerateClassLoaders(&#123;<br>            onMatch: <span class="hljs-keyword">function</span> (loader) &#123;<br>                try &#123;<br>                    <span class="hljs-keyword">if</span> (loader.findClass(target)) &#123;<br>                        console.Red(<span class="hljs-string">&quot;Successfully found loader&quot;</span>)<br>                        console.Blue(loader);<br>                        Java.classFactory.loader = loader;<br>                        console.Red(<span class="hljs-string">&quot;Switch Classloader Successfully ! &quot;</span>)<br>                    &#125;<br>                &#125;<br>                catch (error) &#123;<br>                    console.Red(<span class="hljs-string">&quot; continuing :&quot;</span> + error)<br>                &#125;<br>            &#125;,<br>            onComplete: <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>                console.Red(<span class="hljs-string">&quot;EnumerateClassloader END&quot;</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br>    console.Red(<span class="hljs-string">&quot;Begin Search Class...&quot;</span>)<br>    var targetClasses = new Array();<br>    Java.enumerateLoadedClasses(&#123;<br>        onMatch: <span class="hljs-keyword">function</span> (className) &#123;<br>            <span class="hljs-keyword">if</span> (className.toString().toLowerCase().indexOf(white.toLowerCase()) &gt;= 0 &amp;&amp;<br>               (black == null || black == <span class="hljs-string">&#x27;&#x27;</span> || className.toString().toLowerCase().indexOf(black.toLowerCase()) &lt; 0)) &#123;<br>                console.Black(<span class="hljs-string">&quot;Found Class =&gt; &quot;</span> + className)<br>                targetClasses.push(className);<br>                traceClass(className);<br>            &#125;<br>        &#125;, onComplete: <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>            console.Black(<span class="hljs-string">&quot;Search Class Completed!&quot;</span>)<br>        &#125;<br>    &#125;)<br>    var output = <span class="hljs-string">&quot;On Total Tracing :&quot;</span>+String(targetClasses.length)+<span class="hljs-string">&quot; classes :\r\n&quot;</span>;<br>    targetClasses.forEach(<span class="hljs-keyword">function</span>(target)&#123;<br>        output = output.concat(target);<br>        output = output.concat(<span class="hljs-string">&quot;\r\n&quot;</span>)        <br>    &#125;)<br>    console.Green(output+<span class="hljs-string">&quot;Start Tracing ...&quot;</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>        console.Purple(<span class="hljs-string">&quot;r0tracer begin ... !&quot;</span>)<br>        //0. 增加精简模式，就是以彩虹色只显示进出函数。默认是关闭的，注释此行打开精简模式。<br>        //isLite = <span class="hljs-literal">true</span>;<br>        /*<br>        //以下三种模式，取消注释某一行以开启<br>        */<br>        //A. 简易trace单个函数<br>        traceClass(<span class="hljs-string">&quot;javax.crypto.Cipher&quot;</span>)<br>        //B. 黑白名单trace多个函数，第一个参数是白名单(包含关键字)，第二个参数是黑名单(不包含的关键字)<br>        // hook(<span class="hljs-string">&quot;javax.crypto.Cipher&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>);<br>        //C. 报某个类找不到时，将某个类名填写到第三个参数，比如找不到com.roysue.check类。（前两个参数依旧是黑白名单）<br>        // hook(<span class="hljs-string">&quot;com.roysue.check&quot;</span>,<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;com.roysue.check&quot;</span>);        <br>    &#125;)<br>&#125;<br>/*<br>//setImmediate是立即执行函数，setTimeout是等待毫秒后延迟执行函数<br>//二者在attach模式下没有区别<br>//在spawn模式下，hook系统API时如javax.crypto.Cipher建议使用setImmediate立即执行，不需要延时<br>//在spawn模式下，hook应用自己的函数或含壳时，建议使用setTimeout并给出适当的延时(500~5000)<br>*/<br>setImmediate(main)<br>//<br>// setTimeout(main, 2000);<br><br><br>// 玄之又玄，众妙之门<br>// Frida的崩溃有时候真的是玄学，大项目一崩溃根本不知道是哪里出的问题，这也是小而专的项目也有一丝机会的原因<br>// Frida自身即会经常崩溃，建议多更换Frida(客/服要配套)版本/安卓版本，我自己常用的组合是两部手机，Frida12.8.0全家桶+安卓8.1.0，和Frida14.2.2全家桶+安卓10 <br></code></pre></td></tr></table></figure><h3 id="dump证书"><a href="#dump证书" class="headerlink" title="dump证书"></a>dump证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">dump</span></span>()&#123;<br>    <span class="hljs-built_in">let</span> path = <span class="hljs-string">&quot;/data/data/com.feigua.yingshi/tuzi.p12&quot;</span><br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>        var KeyStore = Java.use(<span class="hljs-string">&quot;java.security.KeyStore&quot;</span>);<br>        var str = Java.use(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>        KeyStore.load.overload(<span class="hljs-string">&quot;java.io.InputStream&quot;</span>, <span class="hljs-string">&quot;[C&quot;</span>).implementation = <span class="hljs-keyword">function</span> (input, pwdStr) &#123;<br>            <span class="hljs-keyword">if</span> (input) &#123;<br>                console.log(<span class="hljs-string">&quot;pwdStr: &quot;</span>, str.<span class="hljs-variable">$new</span>(pwdStr));<br>                var file = Java.use(<span class="hljs-string">&quot;java.io.File&quot;</span>).<span class="hljs-variable">$new</span>(path);<br>                var output = Java.use(<span class="hljs-string">&quot;java.io.FileOutputStream&quot;</span>).<span class="hljs-variable">$new</span>(file);<br>                var r, myArr = [];<br>                <span class="hljs-keyword">for</span> (var i = 0; i &lt; 1024; i++) &#123;<br>                    myArr[i] = 0;<br>                &#125;<br>                var buffer = Java.array(<span class="hljs-string">&quot;byte&quot;</span>, myArr);<br>                <span class="hljs-keyword">while</span>((r = input.read(buffer)) &gt; 0) &#123;<br>                    output.write(buffer, 0, r);<br>                &#125;<br>                console.log(<span class="hljs-string">&quot;save&quot;</span>);<br>                output.close();<br>            &#125;<br>            <span class="hljs-built_in">return</span> this.load(input, pwdStr);<br>        &#125;<br>    <br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="r0capture"><a href="#r0capture" class="headerlink" title="r0capture"></a>r0capture</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><br><span class="hljs-string">&quot;use strict&quot;</span>;<br>rpc.exports = &#123;<br>  setssllib: <span class="hljs-keyword">function</span> (name) &#123;<br>    console.log(<span class="hljs-string">&quot;setSSLLib =&gt; &quot;</span> + name);<br>    libname = name;<br>    initializeGlobals();<br>    <span class="hljs-built_in">return</span>;<br>  &#125;<br>&#125;;<br><br>var addresses = &#123;&#125;;<br>var SSL_get_fd = null;<br>var SSL_get_session = null;<br>var SSL_SESSION_get_id = null;<br>var getpeername = null;<br>var getsockname = null;<br>var ntohs = null;<br>var ntohl = null;<br>var SSLstackwrite = null;<br>var SSLstackread = null;<br><br>var libname = <span class="hljs-string">&quot;*libssl*&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">initMessage</span></span>()&#123;<br>  var message=&#123;&#125;;<br>  message[<span class="hljs-string">&quot;jsname&quot;</span>]=<span class="hljs-string">&quot;r0capture&quot;</span>;<br>  <span class="hljs-built_in">return</span> message;<br>&#125;<br><br><span class="hljs-keyword">function</span> uuid(len, radix) &#123;<br>  var chars = <span class="hljs-string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  var uuid = [], i;<br>  radix = radix || chars.length;<br><br>  <span class="hljs-keyword">if</span> (len) &#123;<br>    // Compact form<br>    <span class="hljs-keyword">for</span> (i = 0; i &lt; len; i++) uuid[i] = chars[0 | Math.random() * radix];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    // rfc4122, version 4 form<br>    var r;<br><br>    // rfc4122 requires these characters<br>    uuid[8] = uuid[13] = uuid[18] = uuid[23] = <span class="hljs-string">&#x27;-&#x27;</span>;<br>    uuid[14] = <span class="hljs-string">&#x27;4&#x27;</span>;<br><br>    // Fill <span class="hljs-keyword">in</span> random data. At i==19 <span class="hljs-built_in">set</span> the high bits of clock sequence as<br>    // per rfc4122, sec. 4.1.5<br>    <span class="hljs-keyword">for</span> (i = 0; i &lt; 36; i++) &#123;<br>      <span class="hljs-keyword">if</span> (!uuid[i]) &#123;<br>        r = 0 | Math.random() * 16;<br>        uuid[i] = chars[(i == 19) ? (r &amp; 0x3) | 0x8 : r];<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-built_in">return</span> uuid.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> return_zero(args) &#123;<br>  <span class="hljs-built_in">return</span> 0;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">initializeGlobals</span></span>() &#123;<br>  var resolver = new ApiResolver(<span class="hljs-string">&quot;module&quot;</span>);<br>  var exps = [<br>    [Process.platform == <span class="hljs-string">&quot;darwin&quot;</span> ? <span class="hljs-string">&quot;*libboringssl*&quot;</span> : <span class="hljs-string">&quot;*libssl*&quot;</span>, [<span class="hljs-string">&quot;SSL_read&quot;</span>, <span class="hljs-string">&quot;SSL_write&quot;</span>, <span class="hljs-string">&quot;SSL_get_fd&quot;</span>, <span class="hljs-string">&quot;SSL_get_session&quot;</span>, <span class="hljs-string">&quot;SSL_SESSION_get_id&quot;</span>]], // <span class="hljs-keyword">for</span> ios and Android<br>    [Process.platform == <span class="hljs-string">&quot;darwin&quot;</span> ? <span class="hljs-string">&quot;*libsystem*&quot;</span> : <span class="hljs-string">&quot;*libc*&quot;</span>, [<span class="hljs-string">&quot;getpeername&quot;</span>, <span class="hljs-string">&quot;getsockname&quot;</span>, <span class="hljs-string">&quot;ntohs&quot;</span>, <span class="hljs-string">&quot;ntohl&quot;</span>]]<br>  ];<br>  // console.logs(exps)<br>  <span class="hljs-keyword">for</span> (var i = 0; i &lt; exps.length; i++) &#123;<br>    var lib = exps[i][0];<br>    var names = exps[i][1];<br>    <span class="hljs-keyword">for</span> (var j = 0; j &lt; names.length; j++) &#123;<br>      var name = names[j];<br>      // console.logs(<span class="hljs-string">&quot;exports:&quot;</span> + lib + <span class="hljs-string">&quot;!&quot;</span> + name)<br>      var matches = resolver.enumerateMatchesSync(<span class="hljs-string">&quot;exports:&quot;</span> + lib + <span class="hljs-string">&quot;!&quot;</span> + name);<br>      <span class="hljs-keyword">if</span> (matches.length == 0) &#123;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;SSL_get_fd&quot;</span>) &#123;<br>          addresses[<span class="hljs-string">&quot;SSL_get_fd&quot;</span>] = 0;<br>          <span class="hljs-built_in">continue</span>;<br>        &#125;<br>        throw <span class="hljs-string">&quot;Could not find &quot;</span> + lib + <span class="hljs-string">&quot;!&quot;</span> + name;<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matches.length != 1) &#123;<br>        // Sometimes Frida returns duplicates.<br>        var address = 0;<br>        var s = <span class="hljs-string">&quot;&quot;</span>;<br>        var duplicates_only = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (var k = 0; k &lt; matches.length; k++) &#123;<br>          <span class="hljs-keyword">if</span> (s.length != 0) &#123;<br>            s += <span class="hljs-string">&quot;, &quot;</span>;<br>          &#125;<br>          s += matches[k].name + <span class="hljs-string">&quot;@&quot;</span> + matches[k].address;<br>          <span class="hljs-keyword">if</span> (address == 0) &#123;<br>            address = matches[k].address;<br>          &#125;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!address.equals(matches[k].address)) &#123;<br>            duplicates_only = <span class="hljs-literal">false</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!duplicates_only) &#123;<br>          throw <span class="hljs-string">&quot;More than one match found for &quot;</span> + lib + <span class="hljs-string">&quot;!&quot;</span> + name + <span class="hljs-string">&quot;: &quot;</span> + s;<br>        &#125;<br>      &#125;<br>      addresses[name] = matches[0].address;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (addresses[<span class="hljs-string">&quot;SSL_get_fd&quot;</span>] == 0) &#123;<br>    SSL_get_fd = return_zero;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    SSL_get_fd = new NativeFunction(addresses[<span class="hljs-string">&quot;SSL_get_fd&quot;</span>], <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>]);<br>  &#125;<br>  SSL_get_session = new NativeFunction(addresses[<span class="hljs-string">&quot;SSL_get_session&quot;</span>], <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>]);<br>  SSL_SESSION_get_id = new NativeFunction(addresses[<span class="hljs-string">&quot;SSL_SESSION_get_id&quot;</span>], <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>  getpeername = new NativeFunction(addresses[<span class="hljs-string">&quot;getpeername&quot;</span>], <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>  getsockname = new NativeFunction(addresses[<span class="hljs-string">&quot;getsockname&quot;</span>], <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>  ntohs = new NativeFunction(addresses[<span class="hljs-string">&quot;ntohs&quot;</span>], <span class="hljs-string">&quot;uint16&quot;</span>, [<span class="hljs-string">&quot;uint16&quot;</span>]);<br>  ntohl = new NativeFunction(addresses[<span class="hljs-string">&quot;ntohl&quot;</span>], <span class="hljs-string">&quot;uint32&quot;</span>, [<span class="hljs-string">&quot;uint32&quot;</span>]);<br>&#125;<br>initializeGlobals();<br><br><span class="hljs-keyword">function</span> ipToNumber(ip) &#123;<br>  var num = 0;<br>  <span class="hljs-keyword">if</span> (ip == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>    <span class="hljs-built_in">return</span> num;<br>  &#125;<br>  var aNum = ip.split(<span class="hljs-string">&quot;.&quot;</span>);<br>  <span class="hljs-keyword">if</span> (aNum.length != 4) &#123;<br>    <span class="hljs-built_in">return</span> num;<br>  &#125;<br>  num += parseInt(aNum[0]) &lt;&lt; <span class="hljs-string">0;</span><br><span class="hljs-string">  num += parseInt(aNum[1]) &lt;&lt; 8;</span><br><span class="hljs-string">  num += parseInt(aNum[2]) &lt;&lt; 16;</span><br><span class="hljs-string">  num += parseInt(aNum[3]) &lt;&lt; 24;</span><br><span class="hljs-string">  num = num &gt;&gt;&gt; 0</span>;//这个很关键，不然可能会出现负数的情况<br>  <span class="hljs-built_in">return</span> num;<br>&#125;<br><br>/**<br> * Returns a dictionary of a sockfd<span class="hljs-string">&#x27;s &quot;src_addr&quot;, &quot;src_port&quot;, &quot;dst_addr&quot;, and</span><br><span class="hljs-string"> * &quot;dst_port&quot;.</span><br><span class="hljs-string"> * @param &#123;int&#125; sockfd The file descriptor of the socket to inspect.</span><br><span class="hljs-string"> * @param &#123;boolean&#125; isRead If true, the context is an SSL_read call. If</span><br><span class="hljs-string"> *     false, the context is an SSL_write call.</span><br><span class="hljs-string"> * @return &#123;dict&#125; Dictionary of sockfd&#x27;</span>s <span class="hljs-string">&quot;src_addr&quot;</span>, <span class="hljs-string">&quot;src_port&quot;</span>, <span class="hljs-string">&quot;dst_addr&quot;</span>,<br> *     and <span class="hljs-string">&quot;dst_port&quot;</span>.<br> */<br><span class="hljs-keyword">function</span> getPortsAndAddresses(sockfd, isRead) &#123;<br>  var message = initMessage();<br>  var src_dst = [<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;dst&quot;</span>];<br>  <span class="hljs-keyword">for</span> (var i = 0; i &lt; src_dst.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> ((src_dst[i] == <span class="hljs-string">&quot;src&quot;</span>) ^ isRead) &#123;<br>      var sockAddr = Socket.localAddress(sockfd)<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      var sockAddr = Socket.peerAddress(sockfd)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sockAddr == null) &#123;<br>      // 网络超时or其他原因可能导致socket被关闭<br>      message[src_dst[i] + <span class="hljs-string">&quot;_port&quot;</span>] = 0<br>      message[src_dst[i] + <span class="hljs-string">&quot;_addr&quot;</span>] = 0<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      message[src_dst[i] + <span class="hljs-string">&quot;_port&quot;</span>] = (sockAddr.port &amp; 0xFFFF)<br>      message[src_dst[i] + <span class="hljs-string">&quot;_addr&quot;</span>] = ntohl(ipToNumber(sockAddr.ip.split(<span class="hljs-string">&quot;:&quot;</span>).pop()))<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">return</span> message;<br>&#125;<br>/**<br> * Get the session_id of SSL object and <span class="hljs-built_in">return</span> it as a hex string.<br> * @param &#123;!NativePointer&#125; ssl A pointer to an SSL object.<br> * @<span class="hljs-built_in">return</span> &#123;dict&#125; A string representing the session_id of the SSL object<span class="hljs-string">&#x27;s</span><br><span class="hljs-string"> *     SSL_SESSION. For example,</span><br><span class="hljs-string"> *     &quot;59FD71B7B90202F359D89E66AE4E61247954E28431F6C6AC46625D472FF76336&quot;.</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">function getSslSessionId(ssl) &#123;</span><br><span class="hljs-string">  var session = SSL_get_session(ssl);</span><br><span class="hljs-string">  if (session == 0) &#123;</span><br><span class="hljs-string">    return 0;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  var len = Memory.alloc(4);</span><br><span class="hljs-string">  var p = SSL_SESSION_get_id(session, len);</span><br><span class="hljs-string">  len = Memory.readU32(len);</span><br><span class="hljs-string">  var session_id = &quot;&quot;;</span><br><span class="hljs-string">  for (var i = 0; i &lt; len; i++) &#123;</span><br><span class="hljs-string">    // Read a byte, convert it to a hex string (0xAB ==&gt; &quot;AB&quot;), and append</span><br><span class="hljs-string">    // it to session_id.</span><br><span class="hljs-string">    session_id +=</span><br><span class="hljs-string">      (&quot;0&quot; + Memory.readU8(p.add(i)).toString(16).toUpperCase()).substr(-2);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  return session_id;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">Interceptor.attach(addresses[&quot;SSL_read&quot;],</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    onEnter: function (args) &#123;</span><br><span class="hljs-string">      var message = getPortsAndAddresses(SSL_get_fd(args[0]), true);</span><br><span class="hljs-string">      message[&quot;ssl_session_id&quot;] = getSslSessionId(args[0]);</span><br><span class="hljs-string">      message[&quot;function&quot;] = &quot;SSL_read&quot;;</span><br><span class="hljs-string">      message[&quot;stack&quot;] = SSLstackread;</span><br><span class="hljs-string">      this.message = message;</span><br><span class="hljs-string">      this.buf = args[1];</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    onLeave: function (retval) &#123;</span><br><span class="hljs-string">      retval |= 0; // Cast retval to 32-bit integer.</span><br><span class="hljs-string">      if (retval &lt;= 0) &#123;</span><br><span class="hljs-string">        return;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      send(this.message,Memory.readByteArray(this.buf, retval) );</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">Interceptor.attach(addresses[&quot;SSL_write&quot;],</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    onEnter: function (args) &#123;</span><br><span class="hljs-string">      var message = getPortsAndAddresses(SSL_get_fd(args[0]), false);</span><br><span class="hljs-string">      message[&quot;ssl_session_id&quot;] = getSslSessionId(args[0]);</span><br><span class="hljs-string">      message[&quot;function&quot;] = &quot;SSL_write&quot;;</span><br><span class="hljs-string">      message[&quot;stack&quot;] = SSLstackwrite;</span><br><span class="hljs-string">      send(message,Memory.readByteArray(args[1], parseInt(args[2])) );</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    onLeave: function (retval) &#123;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">if (Java.available) &#123;</span><br><span class="hljs-string">  Java.perform(function () &#123;</span><br><span class="hljs-string">    var msg=initMessage()</span><br><span class="hljs-string">    msg[&quot;init&quot;]=&quot;r0capture.js init hook success&quot;</span><br><span class="hljs-string">    send(msg)</span><br><span class="hljs-string">    function storeP12(pri, p7, p12Path, p12Password) &#123;</span><br><span class="hljs-string">      var X509Certificate = Java.use(&quot;java.security.cert.X509Certificate&quot;)</span><br><span class="hljs-string">      var p7X509 = Java.cast(p7, X509Certificate);</span><br><span class="hljs-string">      var chain = Java.array(&quot;java.security.cert.X509Certificate&quot;, [p7X509])</span><br><span class="hljs-string">      var ks = Java.use(&quot;java.security.KeyStore&quot;).getInstance(&quot;PKCS12&quot;, &quot;BC&quot;);</span><br><span class="hljs-string">      ks.load(null, null);</span><br><span class="hljs-string">      ks.setKeyEntry(&quot;client&quot;, pri, Java.use(&#x27;</span>java.lang.String<span class="hljs-string">&#x27;).$new(p12Password).toCharArray(), chain);</span><br><span class="hljs-string">      try &#123;</span><br><span class="hljs-string">        var out = Java.use(&quot;java.io.FileOutputStream&quot;).$new(p12Path);</span><br><span class="hljs-string">        ks.store(out, Java.use(&#x27;</span>java.lang.String<span class="hljs-string">&#x27;).$new(p12Password).toCharArray())</span><br><span class="hljs-string">      &#125; catch (exp) &#123;</span><br><span class="hljs-string">        console.log(exp)</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为r0ysue</span><br><span class="hljs-string">    Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getPrivateKey.implementation = function () &#123;</span><br><span class="hljs-string">      var result = this.getPrivateKey()</span><br><span class="hljs-string">      var packageName = Java.use(&quot;android.app.ActivityThread&quot;).currentApplication().getApplicationContext().getPackageName();</span><br><span class="hljs-string">      storeP12(this.getPrivateKey(), this.getCertificate(), &#x27;</span>/sdcard/Download/<span class="hljs-string">&#x27; + packageName + uuid(10, 16) + &#x27;</span>.p12<span class="hljs-string">&#x27;, &#x27;</span>r0ysue<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">      var message = initMessage();</span><br><span class="hljs-string">      message[&quot;function&quot;] = &quot;dumpClinetCertificate=&gt;&quot; + &#x27;</span>/sdcard/Download/<span class="hljs-string">&#x27; + packageName + uuid(10, 16) + &#x27;</span>.p12<span class="hljs-string">&#x27; + &#x27;</span>   <span class="hljs-built_in">pwd</span>: r0ysue<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">      message[&quot;stack&quot;] = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="hljs-string">      var data = Memory.alloc(1);</span><br><span class="hljs-string">      send(message, Memory.readByteArray(data, 1))</span><br><span class="hljs-string">      return result;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getCertificateChain.implementation = function () &#123;</span><br><span class="hljs-string">      var result = this.getCertificateChain()</span><br><span class="hljs-string">      var packageName = Java.use(&quot;android.app.ActivityThread&quot;).currentApplication().getApplicationContext().getPackageName();</span><br><span class="hljs-string">      storeP12(this.getPrivateKey(), this.getCertificate(), &#x27;</span>/sdcard/Download/<span class="hljs-string">&#x27; + packageName + uuid(10, 16) + &#x27;</span>.p12<span class="hljs-string">&#x27;, &#x27;</span>r0ysue<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">      var message = initMessage();</span><br><span class="hljs-string">      message[&quot;function&quot;] = &quot;dumpClinetCertificate=&gt;&quot; + &#x27;</span>/sdcard/Download/<span class="hljs-string">&#x27; + packageName + uuid(10, 16) + &#x27;</span>.p12<span class="hljs-string">&#x27; + &#x27;</span>   <span class="hljs-built_in">pwd</span>: r0ysue<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">      message[&quot;stack&quot;] = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="hljs-string">      var data = Memory.alloc(1);</span><br><span class="hljs-string">      send(message, Memory.readByteArray(data, 1))</span><br><span class="hljs-string">      return result;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //SSLpinning helper 帮助定位证书绑定的关键代码</span><br><span class="hljs-string">    Java.use(&quot;java.io.File&quot;).$init.overload(&#x27;</span>java.io.File<span class="hljs-string">&#x27;, &#x27;</span>java.lang.String<span class="hljs-string">&#x27;).implementation = function (file, cert) &#123;</span><br><span class="hljs-string">      var result = this.$init(file, cert)</span><br><span class="hljs-string">      var stack = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new());</span><br><span class="hljs-string">      if (file.getPath().indexOf(&quot;cacert&quot;) &gt;= 0 &amp;&amp; stack.indexOf(&quot;X509TrustManagerExtensions.checkServerTrusted&quot;) &gt;= 0) &#123;</span><br><span class="hljs-string">        var message = initMessage();</span><br><span class="hljs-string">        message[&quot;function&quot;] = &quot;SSLpinning position locator =&gt; &quot; + file.getPath() + &quot; &quot; + cert;</span><br><span class="hljs-string">        message[&quot;stack&quot;] = stack;</span><br><span class="hljs-string">        var data = Memory.alloc(1);</span><br><span class="hljs-string">        send(message, Memory.readByteArray(data, 1))</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      return result;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    Java.use(&quot;java.net.SocketOutputStream&quot;).socketWrite0.overload(&#x27;</span>java.io.FileDescriptor<span class="hljs-string">&#x27;, &#x27;</span>[B<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;).implementation = function (fd, bytearry, offset, byteCount) &#123;</span><br><span class="hljs-string">      var result = this.socketWrite0(fd, bytearry, offset, byteCount);</span><br><span class="hljs-string">      var message = initMessage();</span><br><span class="hljs-string">      message[&quot;function&quot;] = &quot;HTTP_send&quot;;</span><br><span class="hljs-string">      message[&quot;ssl_session_id&quot;] = &quot;&quot;;</span><br><span class="hljs-string">      message[&quot;src_addr&quot;] = ntohl(ipToNumber((this.socket.value.getLocalAddress().toString().split(&quot;:&quot;)[0]).split(&quot;/&quot;).pop()));</span><br><span class="hljs-string">      message[&quot;src_port&quot;] = parseInt(this.socket.value.getLocalPort().toString());</span><br><span class="hljs-string">      message[&quot;dst_addr&quot;] = ntohl(ipToNumber((this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;)[0]).split(&quot;/&quot;).pop()));</span><br><span class="hljs-string">      message[&quot;dst_port&quot;] = parseInt(this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;).pop());</span><br><span class="hljs-string">      message[&quot;stack&quot;] = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="hljs-string">      var ptr = Memory.alloc(byteCount);</span><br><span class="hljs-string">      for (var i = 0; i &lt; byteCount; ++i)</span><br><span class="hljs-string">        Memory.writeS8(ptr.add(i), bytearry[offset + i]);</span><br><span class="hljs-string"></span><br><span class="hljs-string">      send(message, Memory.readByteArray(ptr, byteCount))</span><br><span class="hljs-string">      return result;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    Java.use(&quot;java.net.SocketInputStream&quot;).socketRead0.overload(&#x27;</span>java.io.FileDescriptor<span class="hljs-string">&#x27;, &#x27;</span>[B<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;).implementation = function (fd, bytearry, offset, byteCount, timeout) &#123;</span><br><span class="hljs-string">      var result = this.socketRead0(fd, bytearry, offset, byteCount, timeout);</span><br><span class="hljs-string">      var message = initMessage();</span><br><span class="hljs-string">      message[&quot;function&quot;] = &quot;HTTP_recv&quot;;</span><br><span class="hljs-string">      message[&quot;ssl_session_id&quot;] = &quot;&quot;;</span><br><span class="hljs-string">      message[&quot;src_addr&quot;] = ntohl(ipToNumber((this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;)[0]).split(&quot;/&quot;).pop()));</span><br><span class="hljs-string">      message[&quot;src_port&quot;] = parseInt(this.socket.value.getRemoteSocketAddress().toString().split(&quot;:&quot;).pop());</span><br><span class="hljs-string">      message[&quot;dst_addr&quot;] = ntohl(ipToNumber((this.socket.value.getLocalAddress().toString().split(&quot;:&quot;)[0]).split(&quot;/&quot;).pop()));</span><br><span class="hljs-string">      message[&quot;dst_port&quot;] = parseInt(this.socket.value.getLocalPort());</span><br><span class="hljs-string">      message[&quot;stack&quot;] = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="hljs-string">      if (result &gt; 0) &#123;</span><br><span class="hljs-string">        var ptr = Memory.alloc(result);</span><br><span class="hljs-string">        for (var i = 0; i &lt; result; ++i)</span><br><span class="hljs-string">          Memory.writeS8(ptr.add(i), bytearry[offset + i]);</span><br><span class="hljs-string">        send(message,Memory.readByteArray(ptr, result))</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      return result;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if (parseFloat(Java.androidVersion)  &gt; 8) &#123;</span><br><span class="hljs-string">      Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;).write.overload(&#x27;</span>[B<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;).implementation = function (bytearry, int1, int2) &#123;</span><br><span class="hljs-string">        var result = this.write(bytearry, int1, int2);</span><br><span class="hljs-string">        SSLstackwrite = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="hljs-string">        return result;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      Java.use(&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;).read.overload(&#x27;</span>[B<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;).implementation = function (bytearry, int1, int2) &#123;</span><br><span class="hljs-string">        var result = this.read(bytearry, int1, int2);</span><br><span class="hljs-string">        SSLstackread = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="hljs-string">        return result;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    else &#123;</span><br><span class="hljs-string">      Java.use(&quot;com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream&quot;).write.overload(&#x27;</span>[B<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;).implementation = function (bytearry, int1, int2) &#123;</span><br><span class="hljs-string">        var result = this.write(bytearry, int1, int2);</span><br><span class="hljs-string">        SSLstackwrite = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="hljs-string">        return result;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      Java.use(&quot;com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream&quot;).read.overload(&#x27;</span>[B<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;, &#x27;</span>int<span class="hljs-string">&#x27;).implementation = function (bytearry, int1, int2) &#123;</span><br><span class="hljs-string">        var result = this.read(bytearry, int1, int2);</span><br><span class="hljs-string">        SSLstackread = Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()).toString();</span><br><span class="hljs-string">        return result;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">  )</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;)();</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h1 id="SO"><a href="#SO" class="headerlink" title="SO"></a>SO</h1><h2 id="常用代码-1"><a href="#常用代码-1" class="headerlink" title="常用代码"></a>常用代码</h2><h3 id="打印堆栈"><a href="#打印堆栈" class="headerlink" title="打印堆栈"></a>打印堆栈</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">//so层打印栈<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">so_stack</span></span>()&#123;<br>    //获取到的函数栈不一定准确  一边获取到的要偏移-1<br>    //                                             FUZZY      ACCURATE<br>    console.log(Thread.backtrace(this.context,Backtracer.FUZZY).map(DebugSymbol.fromAddress).<span class="hljs-built_in">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>    console.log(<span class="hljs-string">&quot;-------------------------------------------------------------------------------------------------&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook某模块某地址-加参数"><a href="#hook某模块某地址-加参数" class="headerlink" title="hook某模块某地址 加参数"></a>hook某模块某地址 加参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> print_arg(addr)&#123;<br>    var module = Process.findRangeByAddress(addr);<br>    <span class="hljs-keyword">if</span>(module != null) <span class="hljs-built_in">return</span> hexdump(addr) + <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-built_in">return</span> ptr(addr) + <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">function</span> hook_native_addr(funcPtr, paramsNum)&#123;<br>    var module = Process.findModuleByAddress(funcPtr);<br>    try &#123;<br>    Interceptor.attach(funcPtr, &#123;<br>        onEnter: <span class="hljs-keyword">function</span>(args)&#123;<br>            this.logs = [];<br>            this.params = [];<br>            this.logs.push(<span class="hljs-string">&quot;Soname : &quot;</span> + module.name + <span class="hljs-string">&quot;  Method hex:  &quot;</span> + ptr(funcPtr).sub(module.base) + <span class="hljs-string">&quot;\n&quot;</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i = 0; i &lt; paramsNum; i++)&#123;<br>                this.params.push(args[i]);<br>                this.logs.push(<span class="hljs-string">&quot;this.args&quot;</span> + i + <span class="hljs-string">&quot; onEnter: &quot;</span> + print_arg(args[i]));<br>            &#125;<br>        &#125;, onLeave: <span class="hljs-keyword">function</span>(retval)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i = 0; i &lt; paramsNum; i++)&#123;<br>                this.logs.push(<span class="hljs-string">&quot;this.args&quot;</span> + i + <span class="hljs-string">&quot; onLeave: &quot;</span> + print_arg(this.params[i]));<br>            &#125;<br>            this.logs.push(<span class="hljs-string">&quot;retval onLeave: &quot;</span> + print_arg(retval) + <span class="hljs-string">&quot;\n&quot;</span>);<br>            console.log(this.logs);<br>        &#125;<br>    &#125;);&#125;catch (e) &#123;<br>        //access violation accessing 0x2d  非法访问地址    hexdump把数值当成 地址访问了 就会报这个错误<br>        console.log(<span class="hljs-string">&quot;报错信息: &quot;</span>+e);<br>    &#125;<br>&#125;<br>hook_native_addr(ptr,num)<br></code></pre></td></tr></table></figure><h3 id="修改数值参数的返回值"><a href="#修改数值参数的返回值" class="headerlink" title="修改数值参数的返回值"></a>修改数值参数的返回值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">setResult</span></span>()&#123;<br>    var soAddr = Module.findBaseAddress(<span class="hljs-string">&quot;libcocos2dlua.so&quot;</span>);<br>    var Addr = soAddr.add(0x229A20);<br>    Interceptor.attach(Addr,&#123;<br>       onEnter:<span class="hljs-keyword">function</span> (args)&#123;<br>           //修改参数数值<br>           args[0] = ptr(100); // new NativePointer<br>       &#125; ,<br>        onLeave :  <span class="hljs-keyword">function</span> (retval)&#123;<br>           retval.replace(100);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定位函数"><a href="#定位函数" class="headerlink" title="定位函数"></a>定位函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">//定位jni静态注册的so<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hook_dlsye</span></span>()&#123;<br>    //定位jni静态注册的so<br>    var dsynaddr = Module.findExportByName(<span class="hljs-string">&quot;libdl.so&quot;</span>,<span class="hljs-string">&quot;dlsym&quot;</span>);<br>    console.log(dsynaddr);<br>    Interceptor.attach(dsynaddr,&#123;<br>        onEnter: <span class="hljs-keyword">function</span> (args)&#123;<br>            this.args1 = args[1];<br>        &#125;,<br>        onLeave :<span class="hljs-keyword">function</span> (retval)&#123;<br>            var module = Process.findModuleByAddress(retval);<br>            <span class="hljs-keyword">if</span> (module == null) <span class="hljs-built_in">return</span>;<br>            //module的名字 so的名字  模块的地址 模块的偏移<br>            console.log(this.args1.readCString(),module.name,retval,retval.sub(module.base));<br>        &#125;<br>    &#125;);<br>&#125;<br>//定位jni动态注册的so<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hook_RegisterNatives</span></span>() &#123;<br>    //定位jni动态注册的so<br>    var RegisterNatives_addr = null;<br>    var symbols = Process.findModuleByName(<span class="hljs-string">&quot;libart.so&quot;</span>).enumerateSymbols();<br>    <span class="hljs-keyword">for</span> (var i = 0; i &lt; symbols.length; i++) &#123;<br>        var symbol = symbols[i].name;<br>        <span class="hljs-keyword">if</span> ((symbol.indexOf(<span class="hljs-string">&quot;CheckJNI&quot;</span>) == -1) &amp;&amp; (symbol.indexOf(<span class="hljs-string">&quot;JNI&quot;</span>) &gt;= 0)) &#123;<br>            <span class="hljs-keyword">if</span> (symbol.indexOf(<span class="hljs-string">&quot;RegisterNatives&quot;</span>) &gt;= 0) &#123;<br>                RegisterNatives_addr = symbols[i].address;<br>                // console.log(<span class="hljs-string">&quot;RegisterNatives_addr: &quot;</span>, RegisterNatives_addr);<br>            &#125;<br>        &#125;<br>    &#125;<br>    Interceptor.attach(RegisterNatives_addr, &#123;<br>        onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>            var <span class="hljs-built_in">env</span> = Java.vm.tryGetEnv();<br>            var classname = env.getClassName(args[1]);<br>            var methodcount = args[3].toInt32();<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; methodcount; i++) &#123;<br>                var methodname = args[2].add(Process.pointerSize*3*i).readPointer().readCString();<br>                var signature =  args[2].add(Process.pointerSize*3*i).add(Process.pointerSize).readPointer().readCString();<br>                var fnPtr = args[2].add(Process.pointerSize*3*i).add(Process.pointerSize * 2).readPointer();<br>                var module = Process.findModuleByAddress(fnPtr);<br>                <span class="hljs-keyword">if</span> (module == null) <span class="hljs-built_in">return</span>;<br>                console.log(<span class="hljs-string">&quot;[classname]: &quot;</span>+classname,<span class="hljs-string">&quot;[methodname]: &quot;</span>+methodname,<span class="hljs-string">&quot;[signature]: &quot;</span>+signature,<span class="hljs-string">&quot;[fnPtr]: &quot;</span>+fnPtr,<span class="hljs-string">&quot;[module]: &quot;</span>+module.name,<span class="hljs-string">&quot;[base]: &quot;</span>+fnPtr.sub(module.base));<br>            &#125;<br>        &#125;,<br>        onLeave: <span class="hljs-keyword">function</span> (retval) &#123;&#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="枚举导入-导出表所有函数"><a href="#枚举导入-导出表所有函数" class="headerlink" title="枚举导入 导出表所有函数"></a>枚举导入 导出表所有函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">enmuExports</span></span>()&#123;<br>    //导入表<br>    var moduleImportDetails = Module.enumerateImports(<span class="hljs-string">&quot;libencryptlib.so&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; moduleImportDetails.length; i++) &#123;<br>        console.log(<span class="hljs-string">&quot;enumerateImports  : &quot;</span>+moduleImportDetails[i].name + <span class="hljs-string">&quot;   &quot;</span> + moduleImportDetails[i].address);<br>    &#125;<br>    //导出表<br>    var moduleExportDetails = Module.enumerateExports(<span class="hljs-string">&quot;libencryptlib.so&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; moduleExportDetails.length; i++) &#123;<br>        console.log(<span class="hljs-string">&quot;moduleExportDetails  : &quot;</span>+moduleExportDetails[i].name + <span class="hljs-string">&quot;   &quot;</span> + moduleExportDetails[i].address);<br>    &#125;<br>    //符号表<br>    var moduleSymbolDetails = Module.enumerateSymbols(<span class="hljs-string">&quot;libencryptlib.so&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; moduleSymbolDetails.length; i++) &#123;<br>        console.log(<span class="hljs-string">&quot;moduleSymbolDetails  : &quot;</span>+moduleSymbolDetails[i].name + <span class="hljs-string">&quot;   &quot;</span> + moduleSymbolDetails[i].address);<br>    &#125;<br>    //枚举moduls  在不知道某个导入函数的地址时 不知道他是来自哪里 可以去枚举所有已加载的so<br>    var enumerateModuls = Module.enumerateModuls();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; enumerateModuls.length; i++) &#123;<br>        console.log(<span class="hljs-string">&quot;moduleSymbolDetails  : &quot;</span>+enumerateModuls[i].enumerateExports()[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dumpSo"><a href="#dumpSo" class="headerlink" title="dumpSo"></a>dumpSo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> sodump(so_name)&#123;<br>    Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>        var currentApplication = Java.use(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).currentApplication();<br>        var <span class="hljs-built_in">dir</span> = currentApplication.getApplicationContext().getFilesDir().getPath();<br>        var libso = Process.getModuleByName(so_name);<br>        console.log(<span class="hljs-string">&quot;[name]:&quot;</span>, libso.name);<br>        console.log(<span class="hljs-string">&quot;[base]:&quot;</span>, libso.base);<br>        console.log(<span class="hljs-string">&quot;[size]:&quot;</span>, ptr(libso.size));<br>        console.log(<span class="hljs-string">&quot;[path]:&quot;</span>, libso.path);<br>        var file_path = <span class="hljs-built_in">dir</span> + <span class="hljs-string">&quot;/&quot;</span> + libso.name + <span class="hljs-string">&quot;_&quot;</span> + libso.base + <span class="hljs-string">&quot;_&quot;</span> + ptr(libso.size) + <span class="hljs-string">&quot;.so&quot;</span>;<br>        var file_handle = new File(file_path, <span class="hljs-string">&quot;wb&quot;</span>);<br>        <span class="hljs-keyword">if</span> (file_handle &amp;&amp; file_handle != null) &#123;<br>            Memory.protect(ptr(libso.base), libso.size, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>            //ptr获取到当前so的基址从 当前基址开始读 读so的大小<br>            var libso_buffer = ptr(libso.base).readByteArray(libso.size);<br>            file_handle.write(libso_buffer);<br>            file_handle.flush();<br>            file_handle.close();<br>            console.log(<span class="hljs-string">&quot;[dump]:&quot;</span>, file_path);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="替换某地址机器码"><a href="#替换某地址机器码" class="headerlink" title="替换某地址机器码"></a>替换某地址机器码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">var codeAddr = soAddr.add(0x167C);<br>Memory.patchCode(codeAddr, 8, <span class="hljs-keyword">function</span> (code) &#123;<br>    var Writer = new Arm64Writer(code, &#123;pc: codeAddr&#125;);<br>    Writer.putBytes(hexToBytes(<span class="hljs-string">&quot;0001094B&quot;</span>));<br>    Writer.putBytes(hexToBytes(<span class="hljs-string">&quot;FF830091&quot;</span>));<br>    Writer.putRet();<br>    Writer.flush();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="主动调用c函数"><a href="#主动调用c函数" class="headerlink" title="主动调用c函数"></a>主动调用c函数</h3><p>function ivokecfunction(){<br>    Java.perform(function(){<br>        &#x2F;** 一般情况在内存中能直接看到的类型都是c的类型 java是不在内存中的 java在虚拟机中运行*&#x2F;<br>            &#x2F;&#x2F;拿到函数地址<br>        var funcAddr &#x3D; Module.findBaseAddress(“libtuzi.so”).add(0x1234);<br>        &#x2F;&#x2F;声明函数指针<br>        var func &#x3D; new NativeFunction(funcAddr, “pointer”, [‘pointer’, ‘pointer’]);<br>        &#x2F;&#x2F;通过函数指针主动调用函数<br>        var env &#x3D; Java.vm.tryGetEnv();<br>        console.log(“env: “, JSON.stringify(env));<br>        if(env !&#x3D; null){<br>            var jstr &#x3D; env.newStringUtf(“tuzi”);<br>            var cstr &#x3D; func(env, jstr);<br>            console.log(cstr.readCString());<br>            &#x2F;&#x2F;得到函数的返回值<br>            console.log(hexdump(cstr));<br>        }<br>    });<br>}</p><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">libcWriteTex</span></span>()&#123;<br>    /**<br>     * Java.vm.tryGetEnv();  如果获取不到<span class="hljs-built_in">env</span> 可以放到java.perform里面<br>     * 一般java的函数都要放在java.perform<br>     * */<br>    var addr_fopen = Module.findExportByName(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;fopen&quot;</span>);//fopen打开文件<br>    var addr_fputs = Module.findExportByName(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;fputs&quot;</span>);//fputs写入数据<br>    var addr_fclose = Module.findExportByName(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;fclose&quot;</span>);//fclose关闭文件<br><br>    console.log(<span class="hljs-string">&quot;addr_fopen:&quot;</span>, addr_fopen, <span class="hljs-string">&quot;addr_fputs:&quot;</span>, addr_fputs, <span class="hljs-string">&quot;addr_fclose:&quot;</span>, addr_fclose);<br>    //获取函数指针   NativeFunction获取函数指针<br>    var fopen = new NativeFunction(addr_fopen, <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>    var fputs = new NativeFunction(addr_fputs, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>]);<br>    var fclose = new NativeFunction(addr_fclose, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>]);<br><br>    //c语言的字符串直接写的话是js的string  用perform  frida会转换成java的string<br>    // 使用allocUtf8String 可以将 java的string 转换成 nativePintre 开辟一块内存生成一个char*<br>    var filename = Memory.allocUtf8String(<span class="hljs-string">&quot;/sdcard/tuzi.txt&quot;</span>);<br>    var open_mode = Memory.allocUtf8String(<span class="hljs-string">&quot;w&quot;</span>);<br>    var file = fopen(filename, open_mode);<br>    console.log(<span class="hljs-string">&quot;fopen:&quot;</span>, file);<br><br>    var buffer = Memory.allocUtf8String(<span class="hljs-string">&quot;tuzi\n&quot;</span>);<br>    var retval = fputs(buffer, file);<br>    console.log(<span class="hljs-string">&quot;fputs:&quot;</span>, retval);<br><br>    fclose(file);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用frida封装的函数来调用jni"><a href="#使用frida封装的函数来调用jni" class="headerlink" title="使用frida封装的函数来调用jni"></a>使用frida封装的函数来调用jni</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">fridainvokejni</span></span>() &#123;<br>    var funcAddr = Module.findExportByName(<span class="hljs-string">&quot;libtuzi.so&quot;</span>, <span class="hljs-string">&quot;encrypt&quot;</span>);<br>    console.log(funcAddr);<br>    <span class="hljs-keyword">if</span>(funcAddr != null)&#123;<br>        Interceptor.attach(funcAddr,&#123;<br>            onEnter: <span class="hljs-keyword">function</span>(args)&#123;<br>            &#125;,<br>            onLeave: <span class="hljs-keyword">function</span>(retval)&#123;<br>                var <span class="hljs-built_in">env</span> = Java.vm.tryGetEnv();<br>                var jstr = env.newStringUtf(<span class="hljs-string">&quot;bbs.125.la&quot;</span>);  //主动调用jni函数 cstr转jstr<br>                retval.replace(jstr);<br><br>                var cstr = env.getStringUtfChars(jstr); //主动调用 jstr转cstr<br>                console.log(cstr.readCString());<br>                console.log(hexdump(cstr));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="NativeFunction方式主动调用"><a href="#NativeFunction方式主动调用" class="headerlink" title="NativeFunction方式主动调用"></a>NativeFunction方式主动调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">NativeFunctionJni</span></span>()&#123;<br>    var symbols = Process.getModuleByName(<span class="hljs-string">&quot;libart.so&quot;</span>).enumerateSymbols();<br>    var newStringUtf = null;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; symbols.length; i++) &#123;<br>        var symbol = symbols[i];<br>        <span class="hljs-keyword">if</span>(symbol.name.indexOf(<span class="hljs-string">&quot;CheckJNI&quot;</span>) == -1 &amp;&amp; symbol.name.indexOf(<span class="hljs-string">&quot;NewStringUTF&quot;</span>) != -1)&#123;<br>            console.log(symbol.name, symbol.address);<br>            newStringUtf = symbol.address;<br>        &#125;<br>    &#125;<br>    var newStringUtf_func = new NativeFunction(newStringUtf, <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>    var jstring = newStringUtf_func(Java.vm.tryGetEnv().handle, Memory.allocUtf8String(<span class="hljs-string">&quot;tuzi&quot;</span>));<br>    console.log(jstring);<br><br>    var envAddr = Java.vm.tryGetEnv().handle.readPointer();<br>    var GetStringUTFChars = envAddr.add(0x548).readPointer();<br>    var GetStringUTFChars_func = new NativeFunction(GetStringUTFChars, <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>    var cstr = GetStringUTFChars_func(Java.vm.tryGetEnv().handle, jstring, ptr(0));<br>    console.log(cstr.readCString());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二级指针的hook"><a href="#二级指针的hook" class="headerlink" title="二级指针的hook"></a>二级指针的hook</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">call_func</span></span>() &#123;<br>    var soAddr = Module.findBaseAddress(<span class="hljs-string">&quot;libtuzi.so&quot;</span>);<br>    var xiugaiStr = soAddr.add(0x17D0);<br>    var xiugaiStr_func = new NativeFunction(xiugaiStr, <span class="hljs-string">&#x27;int64&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>    var strAddr = Memory.allocUtf8String(<span class="hljs-string">&quot;tuzi&quot;</span>);<br>    console.log(hexdump(strAddr));<br>    //生成二级指针<br>    var finalAddr = Memory.alloc(8).writePointer(strAddr);<br>    xiugaiStr_func(finalAddr);<br>    console.log(hexdump(strAddr));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-init-array"><a href="#hook-init-array" class="headerlink" title="hook init_array"></a>hook init_array</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hoookInit_array</span></span>() &#123;<br>    <span class="hljs-keyword">function</span> hook_dlopen(addr, soName, callback) &#123;<br>        Interceptor.attach(addr, &#123;<br>            onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                var soPath = args[0].readCString();<br>                <span class="hljs-keyword">if</span>(soPath.indexOf(soName) != -1) hook_call_constructors();<br>            &#125;, onLeave: <span class="hljs-keyword">function</span> (retval) &#123;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    var dlopen = Module.findExportByName(<span class="hljs-string">&quot;libdl.so&quot;</span>, <span class="hljs-string">&quot;dlopen&quot;</span>);<br>    var android_dlopen_ext = Module.findExportByName(<span class="hljs-string">&quot;libdl.so&quot;</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br>    hook_dlopen(dlopen, <span class="hljs-string">&quot;libtuzi.so&quot;</span>, inlineHook);<br>    hook_dlopen(android_dlopen_ext, <span class="hljs-string">&quot;libtuzi.so&quot;</span>, inlineHook);<br><br>    var isHooked = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hook_call_constructors</span></span>() &#123;<br>        var symbols = Process.getModuleByName(<span class="hljs-string">&quot;linker64&quot;</span>).enumerateSymbols();<br>        var call_constructors_addr = null;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; symbols.length; i++) &#123;<br>            var symbol = symbols[i];<br>            <span class="hljs-keyword">if</span>(symbol.name.indexOf(<span class="hljs-string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>) != -1)&#123;<br>                call_constructors_addr = symbol.address;<br>            &#125;<br>        &#125;<br>        console.log(<span class="hljs-string">&quot;call_constructors_addr: &quot;</span>, call_constructors_addr);<br>        Interceptor.attach(call_constructors_addr, &#123;<br>            onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                <span class="hljs-keyword">if</span>(!isHooked) &#123;<br>                    hook_initarray();<br>                    isHooked = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;, onLeave: <span class="hljs-keyword">function</span> (retval) &#123;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hook_initarray</span></span>()&#123;<br>        var tuziAddr = Module.findBaseAddress(<span class="hljs-string">&quot;libtuzi.so&quot;</span>);<br>        var func1_addr = tuziAddr.add(0x1C54);<br>        var func2_addr = tuziAddr.add(0x1C7C);<br>        var func3_addr = tuziAddr.add(0x1C2C);<br>        Interceptor.replace(func1_addr, new NativeCallback(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>            console.log(<span class="hljs-string">&quot;func1 is replaced!!!&quot;</span>);<br>        &#125;, <span class="hljs-string">&#x27;void&#x27;</span>, []));<br><br>        Interceptor.replace(func2_addr, new NativeCallback(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>            console.log(<span class="hljs-string">&quot;func2 is replaced!!!&quot;</span>);<br>        &#125;, <span class="hljs-string">&#x27;void&#x27;</span>, []));<br><br>        Interceptor.replace(func3_addr, new NativeCallback(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>            console.log(<span class="hljs-string">&quot;func3 is replaced!!!&quot;</span>);<br>        &#125;, <span class="hljs-string">&#x27;void&#x27;</span>, []));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-jnionLoad"><a href="#hook-jnionLoad" class="headerlink" title="hook jnionLoad"></a>hook jnionLoad</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">//hook_JNIOnload  HOOK到dlopen 检测到so加载就可以hook jnionload 别的函数也一样  hook init_array 要__dl__ZN6soinfo17call_constructorsEv 执行钱hook 要不然so已经加载完成 init已经结束了 或者太早还没加载<br>var dlopen = Module.findExportByName(<span class="hljs-string">&quot;libdl.so&quot;</span>, <span class="hljs-string">&quot;dlopen&quot;</span>);<br>var android_dlopen_ext = Module.findExportByName(<span class="hljs-string">&quot;libdl.so&quot;</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br>//console.log(JSON.stringify(Process.getModuleByAddress(dlopen)));<br>hook_dlopen(dlopen, <span class="hljs-string">&quot;tuzi.so&quot;</span>, hook_JNIOnload);<br>hook_dlopen(android_dlopen_ext, <span class="hljs-string">&quot;tuzi.so&quot;</span>, hook_JNIOnload);<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hook_JNIOnload</span></span>() &#123;<br>    var tuziAddr = Module.findBaseAddress(<span class="hljs-string">&quot;tuzi.so&quot;</span>);<br>    var funcAddr = tuziAddr.add(0x1CCC);//jnionload<br>    Interceptor.replace(funcAddr, new NativeCallback(<span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>        console.log(<span class="hljs-string">&quot;this func is replaced !&quot;</span>);<br>    &#125;, <span class="hljs-string">&#x27;void&#x27;</span>, []));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Frida-实现的内存读写监控"><a href="#Frida-实现的内存读写监控" class="headerlink" title="Frida 实现的内存读写监控"></a>Frida 实现的内存读写监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">read_write_break</span></span>()&#123;<br>    <span class="hljs-keyword">function</span> hook_dlopen(addr, soName, callback) &#123;<br>        Interceptor.attach(addr, &#123;<br>            onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                var soPath = args[0].readCString();<br>                <span class="hljs-keyword">if</span>(soPath.indexOf(soName) != -1) hook_call_constructors();<br>            &#125;, onLeave: <span class="hljs-keyword">function</span> (retval) &#123;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    var dlopen = Module.findExportByName(<span class="hljs-string">&quot;libdl.so&quot;</span>, <span class="hljs-string">&quot;dlopen&quot;</span>);<br>    var android_dlopen_ext = Module.findExportByName(<span class="hljs-string">&quot;libdl.so&quot;</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br>    hook_dlopen(dlopen, <span class="hljs-string">&quot;libaes.so&quot;</span>, set_read_write_break);<br>    hook_dlopen(android_dlopen_ext, <span class="hljs-string">&quot;libaes.so&quot;</span>, set_read_write_break);<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">set_read_write_break</span></span>()&#123;<br>        //实现一个异常回调   处理好这个异常就可以正常返回<br>        Process.setExceptionHandler(<span class="hljs-keyword">function</span>(details) &#123;<br>            console.log(JSON.stringify(details, null, 2));<br>            console.log(<span class="hljs-string">&quot;lr&quot;</span>, DebugSymbol.fromAddress(details.context.lr));<br>            console.log(<span class="hljs-string">&quot;pc&quot;</span>, DebugSymbol.fromAddress(details.context.pc));<br>            Memory.protect(details.memory.address, Process.pointerSize, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>            console.log(Thread.backtrace(details.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).<span class="hljs-built_in">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>        &#125;);<br>        var addr = Module.findBaseAddress(<span class="hljs-string">&quot;libaes.so&quot;</span>).add(0x6666);<br>        Memory.protect(addr, 8, <span class="hljs-string">&#x27;---&#x27;</span>); //修改内存页的权限<br>        /**<br>         * 比如有一个地址是0x12345678  我想看一下是那个代码去访问了这个地址<br>         * 我只需要把这个内存地址置空 有函数去访问这个地址时 就会触发非法访问异常<br>         * 比较鸡肋这种方法 这种方法会一次修改一个内存页  并且触发一次就无效了<br>         */<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="frida-内存检索"><a href="#frida-内存检索" class="headerlink" title="frida 内存检索"></a>frida 内存检索</h3><p>&#x2F;&#x2F;这个非常好用可以用在在内存中搜索字符串特征来定位算法位置<br>&#x2F;&#x2F;也可以用来搜索svc指令 来做反调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">scan_salt</span></span>() &#123;<br>    <span class="hljs-built_in">let</span> ranges = Process.enumerateRanges(<span class="hljs-string">&quot;r--&quot;</span>)<br>    ranges.map(r =&gt; &#123;<br>        Memory.scan(r.base, r.size, <span class="hljs-string">&quot;41 50 50 4B 45 59 47 4C 5F 52 4E 5F&quot;</span>, &#123;<br>            onMatch(address, size) &#123;<br>                console.log(address, size, hexdump(address.sub(0x30)));<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取当前线程id"><a href="#获取当前线程id" class="headerlink" title="获取当前线程id"></a>获取当前线程id</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> LogPrint(<span class="hljs-built_in">log</span>) &#123;<br>    var theDate = new Date();<br>    var hour = theDate.getHours();<br>    var minute = theDate.getMinutes();<br>    var second = theDate.getSeconds();<br>    var mSecond = theDate.getMilliseconds();<br><br>    hour &lt; 10 ? hour = <span class="hljs-string">&quot;0&quot;</span> + hour : hour;<br>    minute &lt; 10 ? minute = <span class="hljs-string">&quot;0&quot;</span> + minute : minute;<br>    second &lt; 10 ? second = <span class="hljs-string">&quot;0&quot;</span> + second : second;<br>    mSecond &lt; 10 ? mSecond = <span class="hljs-string">&quot;00&quot;</span> + mSecond : mSecond &lt; 100 ? mSecond = <span class="hljs-string">&quot;0&quot;</span> + mSecond : mSecond;<br>    var time = hour + <span class="hljs-string">&quot;:&quot;</span> + minute + <span class="hljs-string">&quot;:&quot;</span> + second + <span class="hljs-string">&quot;:&quot;</span> + mSecond;<br>    var threadid = Process.getCurrentThreadId();<br>    console.log(<span class="hljs-string">&quot;[&quot;</span> + time + <span class="hljs-string">&quot;]&quot;</span> + <span class="hljs-string">&quot;-&gt;threadid:&quot;</span> + threadid + <span class="hljs-string">&quot;--&quot;</span> + <span class="hljs-built_in">log</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="so层的好用工具"><a href="#so层的好用工具" class="headerlink" title="so层的好用工具"></a>so层的好用工具</h2><h3 id="hook-art-imyang"><a href="#hook-art-imyang" class="headerlink" title="hook_art         @imyang"></a>hook_art         @imyang</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><br>    <span class="hljs-keyword">function</span> klog(data)&#123;<br>        var message=&#123;&#125;;<br>        message[<span class="hljs-string">&quot;jsname&quot;</span>]=<span class="hljs-string">&quot;hook_art&quot;</span>;<br>        message[<span class="hljs-string">&quot;data&quot;</span>]=data;<br>        send(message);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> klogData(data,key,value)&#123;<br>        var message=&#123;&#125;;<br>        message[<span class="hljs-string">&quot;jsname&quot;</span>]=<span class="hljs-string">&quot;hook_art&quot;</span>;<br>        message[<span class="hljs-string">&quot;data&quot;</span>]=data;<br>        message[key]=value;<br>        send(message);<br>    &#125;<br><br>   <br>    const STD_STRING_SIZE = 3 * Process.pointerSize;<br>    class StdString &#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span></span>() &#123;<br>            this.handle = Memory.alloc(STD_STRING_SIZE);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">dispose</span></span>() &#123;<br>            const [data, isTiny] = this._getData();<br>            <span class="hljs-keyword">if</span> (!isTiny) &#123;<br>                Java.api.<span class="hljs-variable">$delete</span>(data);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">disposeToString</span></span>() &#123;<br>            const result = this.toString();<br>            this.dispose();<br>            <span class="hljs-built_in">return</span> result;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">toString</span></span>() &#123;<br>            const [data] = this._getData();<br>            <span class="hljs-built_in">return</span> data.readUtf8String();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">_getData</span></span>() &#123;<br>            const str = this.handle;<br>            const isTiny = (str.readU8() &amp; 1) === 0;<br>            const data = isTiny ? str.add(1) : str.add(2 * Process.pointerSize).readPointer();<br>            <span class="hljs-built_in">return</span> [data, isTiny];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> prettyMethod(method_id, withSignature) &#123;<br>        const result = new StdString();<br>        Java.api[<span class="hljs-string">&#x27;art::ArtMethod::PrettyMethod&#x27;</span>](result, method_id, withSignature ? 1 : 0);<br>        <span class="hljs-built_in">return</span> result.disposeToString();<br>    &#125;<br><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hook_libart</span></span>() &#123;<br>        klogData(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;hook_art.js init hook success&quot;</span>)<br><br>        var symbols = Module.enumerateSymbolsSync(<span class="hljs-string">&quot;libart.so&quot;</span>);<br>        var addrGetStringUTFChars = null;<br>        var addrNewStringUTF = null;<br>        var addrFindClass = null;<br>        var addrGetMethodID = null;<br>        var addrGetStaticMethodID = null;<br>        var addrGetFieldID = null;<br>        var addrGetStaticFieldID = null;<br>        var addrRegisterNatives = null;<br>        var so_name = <span class="hljs-string">&quot;lib&quot;</span>;      //TODO 这里写需要过滤的so<br><br>        <span class="hljs-keyword">for</span> (var i = 0; i &lt; symbols.length; i++) &#123;<br>            var symbol = symbols[i];<br>            <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;art&quot;</span>) &gt;= 0 &amp;&amp;<br>                symbol.name.indexOf(<span class="hljs-string">&quot;JNI&quot;</span>) &gt;= 0 &amp;&amp;<br>                symbol.name.indexOf(<span class="hljs-string">&quot;CheckJNI&quot;</span>) &lt; 0 &amp;&amp;<br>                symbol.name.indexOf(<span class="hljs-string">&quot;_ZN3art3JNI&quot;</span>) &gt;= 0<br>            ) &#123;<br>                <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;GetStringUTFChars&quot;</span>) &gt;= 0) &#123;<br>                    addrGetStringUTFChars = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;GetStringUTFChars is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;NewStringUTF&quot;</span>) &gt;= 0) &#123;<br>                    addrNewStringUTF = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;NewStringUTF is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;FindClass&quot;</span>) &gt;= 0) &#123;<br>                    addrFindClass = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;FindClass is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;GetMethodID&quot;</span>) &gt;= 0) &#123;<br>                    addrGetMethodID = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;GetMethodID is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;GetStaticMethodID&quot;</span>) &gt;= 0) &#123;<br>                    addrGetStaticMethodID = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;GetStaticMethodID is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;GetFieldID&quot;</span>) &gt;= 0) &#123;<br>                    addrGetFieldID = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;GetFieldID is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;GetStaticFieldID&quot;</span>) &gt;= 0) &#123;<br>                    addrGetStaticFieldID = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;GetStaticFieldID is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;RegisterNatives&quot;</span>) &gt;= 0) &#123;<br>                    addrRegisterNatives = symbol.address;<br>                    console.log(<span class="hljs-string">&quot;RegisterNatives is at &quot;</span>, symbol.address, symbol.name);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;CallStatic&quot;</span>) &gt;= 0) &#123;<br>                    console.log(<span class="hljs-string">&quot;CallStatic is at &quot;</span>, symbol.address, symbol.name);<br>                    Interceptor.attach(symbol.address, &#123;<br>                        onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                            var module = Process.findModuleByAddress(this.returnAddress);<br>                            <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                                var java_class = args[1];<br>                                var mid = args[2];<br>                                var class_name = Java.vm.tryGetEnv().getClassName(java_class);<br>                                <span class="hljs-keyword">if</span> (class_name.indexOf(<span class="hljs-string">&quot;java.&quot;</span>) == -1 &amp;&amp; class_name.indexOf(<span class="hljs-string">&quot;android.&quot;</span>) == -1) &#123;<br>                                    var method_name = prettyMethod(mid, 1);<br>                                    console.log(<span class="hljs-string">&quot;&lt;&gt;CallStatic:&quot;</span>, DebugSymbol.fromAddress(this.returnAddress), class_name, method_name);<br>                                &#125;<br>                            &#125;<br>                        &#125;,<br>                        onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>                    &#125;);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;CallNonvirtual&quot;</span>) &gt;= 0) &#123;<br>                    console.log(<span class="hljs-string">&quot;CallNonvirtual is at &quot;</span>, symbol.address, symbol.name);<br>                    Interceptor.attach(symbol.address, &#123;<br>                        onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                            var module = Process.findModuleByAddress(this.returnAddress);<br>                            <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                                var jobject = args[1];<br>                                var jclass = args[2];<br>                                var jmethodID = args[3];<br>                                var obj_class_name = Java.vm.tryGetEnv().getObjectClassName(jobject);<br>                                var class_name = Java.vm.tryGetEnv().getClassName(jclass);<br>                                <span class="hljs-keyword">if</span> (class_name.indexOf(<span class="hljs-string">&quot;java.&quot;</span>) == -1 &amp;&amp; class_name.indexOf(<span class="hljs-string">&quot;android.&quot;</span>) == -1) &#123;<br>                                    var method_name = prettyMethod(jmethodID, 1);<br>                                    console.log(<span class="hljs-string">&quot;&lt;&gt;CallNonvirtual:&quot;</span>, DebugSymbol.fromAddress(this.returnAddress), class_name, obj_class_name, method_name);<br>                                &#125;<br>                            &#125;<br>                        &#125;,<br>                        onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>                    &#125;);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (symbol.name.indexOf(<span class="hljs-string">&quot;Call&quot;</span>) &gt;= 0 &amp;&amp; symbol.name.indexOf(<span class="hljs-string">&quot;Method&quot;</span>) &gt;= 0) &#123;<br>                    console.log(<span class="hljs-string">&quot;Call&lt;&gt;Method is at &quot;</span>, symbol.address, symbol.name);<br>                    Interceptor.attach(symbol.address, &#123;<br>                        onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                            var module = Process.findModuleByAddress(this.returnAddress);<br>                            <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                                var java_class = args[1];<br>                                var mid = args[2];<br>                                var class_name = Java.vm.tryGetEnv().getObjectClassName(java_class);<br>                                <span class="hljs-keyword">if</span> (class_name.indexOf(<span class="hljs-string">&quot;java.&quot;</span>) == -1 &amp;&amp; class_name.indexOf(<span class="hljs-string">&quot;android.&quot;</span>) == -1) &#123;<br>                                    var method_name = prettyMethod(mid, 1);<br>                                    console.log(<span class="hljs-string">&quot;&lt;&gt;Call&lt;&gt;Method:&quot;</span>, DebugSymbol.fromAddress(this.returnAddress), class_name, method_name);<br>                                &#125;<br>                            &#125;<br>                        &#125;,<br>                        onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (addrGetStringUTFChars != null) &#123;<br>            Interceptor.attach(addrGetStringUTFChars, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123;<br>                    <span class="hljs-keyword">if</span> (retval != null) &#123;<br>                        var module = Process.findModuleByAddress(this.returnAddress);<br>                        <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                            var bytes = Memory.readCString(retval);<br>                            console.log(<span class="hljs-string">&quot;[GetStringUTFChars] result:&quot;</span> + bytes, DebugSymbol.fromAddress(this.returnAddress));<br><br>                            /** <span class="hljs-keyword">if</span>(bytes.indexOf(<span class="hljs-string">&quot;code&quot;</span>) != -1)&#123;<br>                            console.log(<span class="hljs-string">&quot;[GetStringUTFChars] result:&quot;</span> + bytes, DebugSymbol.fromAddress(this.returnAddress));<br>                        &#125;<br>                             */<br><br><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (addrNewStringUTF != null) &#123;<br>            Interceptor.attach(addrNewStringUTF, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                    <span class="hljs-keyword">if</span> (args[1] != null) &#123;<br>                        var module = Process.findModuleByAddress(this.returnAddress);<br>                        <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                            var string = Memory.readCString(args[1]);<br>                            <span class="hljs-keyword">if</span> (string.indexOf(<span class="hljs-string">&quot;zh-Hans&quot;</span>) == -1) &#123;<br>                                <span class="hljs-keyword">if</span> (string.indexOf(<span class="hljs-string">&quot;RDcsQixFRSxGRCxGMSx&quot;</span>) !== -1)&#123;<br>                                    console.log(<span class="hljs-string">&quot;[NewStringUTF] bytes:&quot;</span> + string, DebugSymbol.fromAddress(this.returnAddress));<br>                                    console.log(Thread.backtrace(this.context,Backtracer.ACCURATE).map(DebugSymbol.fromAddress).<span class="hljs-built_in">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>);<br>                                    console.log(<span class="hljs-string">&quot;-------------------------------------------------------------------------------------------------&quot;</span>);<br>                                &#125;<br><br>                            &#125;<br>                        &#125;<br><br>                    &#125;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (addrFindClass != null) &#123;<br>            Interceptor.attach(addrFindClass, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                    <span class="hljs-keyword">if</span> (args[1] != null) &#123;<br>                        var module = Process.findModuleByAddress(this.returnAddress);<br>                        <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                            var name = Memory.readCString(args[1]);<br>                            console.log(<span class="hljs-string">&quot;[FindClass] name:&quot;</span> + name, DebugSymbol.fromAddress(this.returnAddress));<br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (addrGetMethodID != null) &#123;<br>            Interceptor.attach(addrGetMethodID, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                    <span class="hljs-keyword">if</span> (args[2] != null) &#123;<br>                        var clazz = args[1];<br>                        var class_name = Java.vm.tryGetEnv().getClassName(clazz);<br>                        var module = Process.findModuleByAddress(this.returnAddress);<br>                        <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                            var name = Memory.readCString(args[2]);<br>                            <span class="hljs-keyword">if</span> (args[3] != null) &#123;<br>                                var sig = Memory.readCString(args[3]);<br>                                <span class="hljs-keyword">if</span>(class_name.indexOf(<span class="hljs-string">&quot;java.lang&quot;</span>) == -1 &amp;&amp; class_name.indexOf(<span class="hljs-string">&quot;org.keplerproject.luajava.LuaState&quot;</span>) == -1 &amp;&amp;class_name.indexOf(<span class="hljs-string">&quot;class_name:org.keplerproject.luajava.LuaState&quot;</span>) == -1 )&#123;<br>                                    console.log(<span class="hljs-string">&quot;[GetMethodID] class_name:&quot;</span> + class_name + <span class="hljs-string">&quot; name:&quot;</span> + name + <span class="hljs-string">&quot;, sig:&quot;</span> + sig, DebugSymbol.fromAddress(this.returnAddress));<br>                                &#125;<br><br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-keyword">if</span>(class_name.indexOf(<span class="hljs-string">&quot;java.lang&quot;</span>) == -1 &amp;&amp; class_name.indexOf(<span class="hljs-string">&quot;org.keplerproject.luajava.LuaState&quot;</span>) == -1 &amp;&amp;class_name.indexOf(<span class="hljs-string">&quot;class_name:org.keplerproject.luajava.LuaState&quot;</span>) == -1 )&#123;<br>                                    console.log(<span class="hljs-string">&quot;[GetMethodID] class_name:&quot;</span> + class_name + <span class="hljs-string">&quot; name:&quot;</span> + name, DebugSymbol.fromAddress(this.returnAddress));<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (addrGetStaticMethodID != null) &#123;<br>            Interceptor.attach(addrGetStaticMethodID, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                    <span class="hljs-keyword">if</span> (args[2] != null) &#123;<br>                        var clazz = args[1];<br>                        var class_name = Java.vm.tryGetEnv().getClassName(clazz);<br>                        var module = Process.findModuleByAddress(this.returnAddress);<br>                        <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                            var name = Memory.readCString(args[2]);<br>                            <span class="hljs-keyword">if</span> (args[3] != null) &#123;<br>                                var sig = Memory.readCString(args[3]);<br>                                console.log(<span class="hljs-string">&quot;[GetStaticMethodID] class_name:&quot;</span> + class_name + <span class="hljs-string">&quot; name:&quot;</span> + name + <span class="hljs-string">&quot;, sig:&quot;</span> + sig, DebugSymbol.fromAddress(this.returnAddress));<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                console.log(<span class="hljs-string">&quot;[GetStaticMethodID] class_name:&quot;</span> + class_name + <span class="hljs-string">&quot; name:&quot;</span> + name, DebugSymbol.fromAddress(this.returnAddress));<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (addrGetFieldID != null) &#123;<br>            Interceptor.attach(addrGetFieldID, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                    <span class="hljs-keyword">if</span> (args[2] != null) &#123;<br>                        var module = Process.findModuleByAddress(this.returnAddress);<br>                        <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                            var name = Memory.readCString(args[2]);<br>                            <span class="hljs-keyword">if</span> (args[3] != null) &#123;<br>                                var sig = Memory.readCString(args[3]);<br>                                console.log(<span class="hljs-string">&quot;[GetFieldID] name:&quot;</span> + name + <span class="hljs-string">&quot;, sig:&quot;</span> + sig, DebugSymbol.fromAddress(this.returnAddress));<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                console.log(<span class="hljs-string">&quot;[GetFieldID] name:&quot;</span> + name, DebugSymbol.fromAddress(this.returnAddress));<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (addrGetStaticFieldID != null) &#123;<br>            Interceptor.attach(addrGetStaticFieldID, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                    <span class="hljs-keyword">if</span> (args[2] != null) &#123;<br>                        var module = Process.findModuleByAddress(this.returnAddress);<br>                        <span class="hljs-keyword">if</span> (module != null &amp;&amp; module.name.indexOf(so_name) == 0) &#123;<br>                            var name = Memory.readCString(args[2]);<br>                            <span class="hljs-keyword">if</span> (args[3] != null) &#123;<br>                                var sig = Memory.readCString(args[3]);<br>                                console.log(<span class="hljs-string">&quot;[GetStaticFieldID] name:&quot;</span> + name + <span class="hljs-string">&quot;, sig:&quot;</span> + sig, DebugSymbol.fromAddress(this.returnAddress));<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                console.log(<span class="hljs-string">&quot;[GetStaticFieldID] name:&quot;</span> + name, DebugSymbol.fromAddress(this.returnAddress));<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (addrRegisterNatives != null) &#123;<br>            Interceptor.attach(addrRegisterNatives, &#123;<br>                onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>                    console.log(<span class="hljs-string">&quot;[RegisterNatives] method_count:&quot;</span>, args[3], DebugSymbol.fromAddress(this.returnAddress));<br>                    var <span class="hljs-built_in">env</span> = args[0];<br>                    var java_class = args[1];<br>                    var class_name = Java.vm.tryGetEnv().getClassName(java_class);<br><br>                    var methods_ptr = ptr(args[2]);<br><br>                    var method_count = parseInt(args[3]);<br>                    <span class="hljs-keyword">for</span> (var i = 0; i &lt; method_count; i++) &#123;<br>                        var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));<br>                        var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));<br>                        var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));<br><br>                        try &#123;<br>                            var name = Memory.readCString(name_ptr);<br>                        &#125;catch (e) &#123;<br>                            console.log(e)<br>                        &#125;<br><br>                        var sig = Memory.readCString(sig_ptr);<br>                        var find_module = Process.findModuleByAddress(fnPtr_ptr);<br>                        console.log(<span class="hljs-string">&quot;[RegisterNatives] java_class:&quot;</span>, class_name, <span class="hljs-string">&quot;name:&quot;</span>, name, <span class="hljs-string">&quot;sig:&quot;</span>, sig, <span class="hljs-string">&quot;fnPtr:&quot;</span>, fnPtr_ptr, <span class="hljs-string">&quot;module_name:&quot;</span>, find_module.name, <span class="hljs-string">&quot;module_base:&quot;</span>, find_module.base, <span class="hljs-string">&quot;offset:&quot;</span>, ptr(fnPtr_ptr).sub(find_module.base));<br><br>                    &#125;<br>                &#125;,<br>                onLeave: <span class="hljs-keyword">function</span> (retval) &#123; &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    setImmediate(hook_libart);<br><br>&#125;)();<br><br></code></pre></td></tr></table></figure><h3 id="从内存中搜索svc指令提前进行-patch"><a href="#从内存中搜索svc指令提前进行-patch" class="headerlink" title="从内存中搜索svc指令提前进行 patch"></a>从内存中搜索svc指令提前进行 patch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> target_code_hex;<br><span class="hljs-built_in">let</span> call_number_openat;<br><span class="hljs-built_in">let</span> call_number_faccessat;<br><span class="hljs-built_in">let</span> <span class="hljs-built_in">arch</span> = Process.<span class="hljs-built_in">arch</span>;<br><br>/**<br> * 什么是 SVC syscall<br> * 系统调用 的命令<br> * 安卓分为四层<br> * 应用层 java层 c层 linux层<br> * svc就是arm汇编下 和内核交互的一个指令<br> * svc可以和内核交互<br> * 分为两部分 应该是用户态 一个是内核态<br> * 一些libc的函数 底层调用的其实就是 使用内核态去实现<br> *<br> *<br> * 怎么hook 内核态下的函数<br> * ptrcae    ptrace权限是非常高的可以直接调试内核态的东西<br> * inilenhook 遍历所有 svc的指令  去在执行svc指令之前把系统调用号改了改成自己需要的<br> *<br> * SElinux是什么<br> * selinux是liunx的一个子系统 他比linux更安全<br> * 他的主要作用就是最大程度的减小系统中服务进程的可访问的资源<br> * linux是以一个用户为标识 判断当前文件的权限是否可读写写可执行<br> * selinux更细节 他是以进程的方式判断是否可读写写可执行<br> * 他以进程为单位<br> *<br> * DAC 模式<br><br> 在没有使用 SELinux 的操作系统中，决定一个资源是否能被访问的因素是：某个资源是否拥有对应用户的权限（r、x、w）。<br><br> 只要访问这个资源的进程符合以上的条件就可以被访问。<br><br> 有问题的地方是root 用户不受任何管制，系统上任何资源都可以无限制地访问。<br><br> 这种权限管理机制的主体是用户，也称为自主访问控制（DAC）。<br><br><br> 2.3 MAC<br><br> 在使用了 SELinux 的操作系统中，决定一个资源是否能被访问的因素除了上述因素之外，还需要判断每一类进程是否拥有对某一类资源的访问权限。<br><br> 这样一来，即使进程是以 root 身份运行的，也需要判断这个进程的类型以及允许访问的资源类型才能决定是否允许访问某个资源。进程的活动空间也可以被压缩到最小。<br><br> 即使是以 root 身份运行的服务进程，一般也只能访问到它所需要的资源。即使程序出了漏洞，影响范围也只有在其允许访问的资源范围内。安全性大大增加。<br><br> 这种权限管理机制的主体是进程，也称为强制访问控制（MAC）。<br><br> 而 MAC 又细分为了两种方式，一种叫类别安全（MCS）模式，另一种叫多级安全（MLS）模式。<br><br> 下文中的操作均为 MCS 模式<br><br> 对用户判断后在对进程进行一次判断 就比如说 root用户 登录了qq 登录了一个qq所有人的qq信息以及一系列乱七八糟的的东西都能看<br> 但是在selinux下 用户 首先要获取读取权限然后 只能在自己的进程或者限定的进程中访问<br><br> *<br> * 3.5 SELinux 的工作模式<br><br> SELinux 有三种工作模式，分别是：<br><br> 1. enforcing：强制模式。违反 SELinux 规则的行为将被阻止并记录到日志中。<br><br> 2. permissive：宽容模式。违反 SELinux 规则的行为只会记录到日志中。一般为调试用。<br><br> 3. disabled：关闭 SELinux。<br><br> SELinux 工作模式可以在 /etc/selinux/config 中设定。<br><br> 如果想从 disabled 切换到 enforcing 或者 permissive 的话，需要重启系统。反过来也一样。<br><br> enforcing 和 permissive 模式可以通过 setenforce 1|0 命令快速切换。<br><br> 需要注意的是，如果系统已经在关闭 SELinux 的状态下运行了一段时间，在打开 SELinux 之后的第一次重启速度可能会比较慢。因为系统必须为磁盘中的文件创建安全上下文（我表示我重启了大约 10 分钟，还以为是死机了……）。<br><br> SELinux 日志的记录需要借助 auditd.service 这个服务，请不要禁用它。<br> *<br> * 安卓使用的安全机制是 selinux<br> * setenforce 1 开启    关闭强制模式<br> * setenforce 0 开启<br> * 每家手机厂商都不相同 有的 selinux 是开启的有的是关闭的 关闭时使用syscall就会不可读<br> */<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;arm&quot;</span> === <span class="hljs-built_in">arch</span>)&#123;<br>    target_code_hex = <span class="hljs-string">&quot;00 00 00 EF&quot;</span>;<br>    call_number_openat = 322;<br>    call_number_faccessat = 334;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;arm64&quot;</span> === <span class="hljs-built_in">arch</span>)&#123;<br>    target_code_hex = <span class="hljs-string">&quot;01 00 00 D4&quot;</span>;<br>    call_number_openat = 56;<br>    call_number_faccessat = 48;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    console.log(<span class="hljs-string">&quot;arch not support!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">arch</span>)&#123;<br>    console.log(<span class="hljs-string">&quot;\nthe_arch = &quot;</span> + <span class="hljs-built_in">arch</span>);<br>    // 直接Process.enumerateModules()，可能会因为某些地址不可读造成非法访问<br>    Process.enumerateRanges(<span class="hljs-string">&#x27;r--&#x27;</span>).forEach(<span class="hljs-keyword">function</span> (range) &#123;<br>        <span class="hljs-keyword">if</span>(!range.file || !range.file.path)&#123;<br>            <span class="hljs-built_in">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">let</span> path = range.file.path;<br>        <span class="hljs-keyword">if</span> ((!path.startsWith(<span class="hljs-string">&quot;/data/app/&quot;</span>)) || (!path.endsWith(<span class="hljs-string">&quot;.so&quot;</span>)))&#123;<br>            <span class="hljs-built_in">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">let</span> baseAddress = Module.getBaseAddress(path);<br>        <span class="hljs-built_in">let</span> soNameList = path.split(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-built_in">let</span> soName = soNameList[soNameList.length - 1];<br>        console.log(<span class="hljs-string">&quot;\npath = &quot;</span> + path + <span class="hljs-string">&quot; , baseAddress = &quot;</span> + baseAddress + <span class="hljs-string">&quot; , rangeAddress = &quot;</span> + range.base + <span class="hljs-string">&quot; , size = &quot;</span> + range.size);<br><br>        Memory.scan(range.base, range.size, target_code_hex, &#123;<br>            onMatch: <span class="hljs-keyword">function</span> (match)&#123;<br>                <span class="hljs-built_in">let</span> code_address = match;<br>                <span class="hljs-built_in">let</span> code_address_str = code_address.toString();<br>                <span class="hljs-keyword">if</span> (code_address_str.endsWith(<span class="hljs-string">&quot;0&quot;</span>) || code_address_str.endsWith(<span class="hljs-string">&quot;4&quot;</span>) || code_address_str.endsWith(<span class="hljs-string">&quot;8&quot;</span>) || code_address_str.endsWith(<span class="hljs-string">&quot;c&quot;</span>))&#123;<br>                    console.log(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br>                    <span class="hljs-built_in">let</span> call_number = 0;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;arm&quot;</span> === <span class="hljs-built_in">arch</span>)&#123;<br>                        // call_number = (code_address.sub(0x4).readS16() - 28672);  // 0x7000<br>                        call_number = (code_address.sub(0x4).readS32()) &amp; 0xFFF;<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;arm64&quot;</span> === <span class="hljs-built_in">arch</span>)&#123;<br>                        call_number = (code_address.sub(0x4).readS32() &gt;&gt; 5) &amp; 0xFFFF;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        console.log(<span class="hljs-string">&quot;the arch get call_number not support!&quot;</span>)<br>                    &#125;<br>                    console.log(<span class="hljs-string">&quot;find svc : so_name = &quot;</span> + soName + <span class="hljs-string">&quot; , address = &quot;</span> + code_address + <span class="hljs-string">&quot; , call_number = &quot;</span> + call_number + <span class="hljs-string">&quot; , offset = &quot;</span> + code_address.sub(baseAddress));<br><br>                    // hook svc __NR_openat<br>                    <span class="hljs-keyword">if</span> (call_number_openat === call_number)&#123;<br>                        <span class="hljs-built_in">let</span> target_hook_addr = code_address;<br>                        <span class="hljs-built_in">let</span> target_hook_addr_offset = target_hook_addr.sub(baseAddress);<br>                        console.log(<span class="hljs-string">&quot;find svc openat , start inlinehook by frida!&quot;</span>)<br>                        Interceptor.attach(target_hook_addr, &#123;<br>                            onEnter: <span class="hljs-keyword">function</span> (args)&#123;<br>                                console.log(<span class="hljs-string">&quot;\nonEnter_&quot;</span> + target_hook_addr_offset + <span class="hljs-string">&quot; , __NR_openat , args[1] = &quot;</span> + args[1].readCString());<br>                                this.new_addr = Memory.allocUtf8String(<span class="hljs-string">&quot;/proc/self/status11&quot;</span>);<br>                                args[1] = this.new_addr;<br>                                console.log(<span class="hljs-string">&quot;onEnter_&quot;</span> + target_hook_addr_offset + <span class="hljs-string">&quot; , __NR_openat , args[1] = &quot;</span> + args[1].readCString());<br>                            &#125;, onLeave: <span class="hljs-keyword">function</span> (retval)&#123;<br>                                console.log(<span class="hljs-string">&quot;onLeave_&quot;</span> + target_hook_addr_offset + <span class="hljs-string">&quot; , __NR_openat , retval = &quot;</span> + retval)<br>                            &#125;<br>                        &#125;);<br><br>                    &#125;<br>                    // hook svc __NR_faccessat<br>                    <span class="hljs-keyword">if</span> (call_number_faccessat === call_number)&#123;<br>                        <span class="hljs-built_in">let</span> target_hook_addr = code_address;<br>                        <span class="hljs-built_in">let</span> target_hook_addr_offset = target_hook_addr.sub(baseAddress);<br>                        console.log(<span class="hljs-string">&quot;find svc faccessat , start inlinehook by frida!&quot;</span>)<br>                        Interceptor.attach(target_hook_addr, &#123;<br>                            onEnter: <span class="hljs-keyword">function</span> (args)&#123;<br>                                console.log(<span class="hljs-string">&quot;\nonEnter_&quot;</span> + target_hook_addr_offset + <span class="hljs-string">&quot; , __NR_faccessat , args[1] = &quot;</span> + args[1].readCString());<br>                                // this.new_addr = Memory.allocUtf8String(<span class="hljs-string">&quot;/proc/self/status11&quot;</span>);<br>                                // args[1] = this.new_addr;<br>                                console.log(<span class="hljs-string">&quot;onEnter_&quot;</span> + target_hook_addr_offset + <span class="hljs-string">&quot; , __NR_faccessat , args[1] = &quot;</span> + args[1].readCString());<br>                            &#125;, onLeave: <span class="hljs-keyword">function</span> (retval)&#123;<br>                                console.log(<span class="hljs-string">&quot;onLeave_&quot;</span> + target_hook_addr_offset + <span class="hljs-string">&quot; , __NR_faccessat , retval = &quot;</span> + retval)<br>                            &#125;<br>                        &#125;);<br><br>                    &#125;<br>                &#125;<br>            &#125;, onComplete: <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;&#125;<br>        &#125;);<br><br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="通过-linke对so加载进行监控"><a href="#通过-linke对so加载进行监控" class="headerlink" title="通过 linke对so加载进行监控"></a>通过 linke对so加载进行监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">hook_constructor</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> (Process.pointerSize == 4) &#123;<br>        var linker = Process.findModuleByName(<span class="hljs-string">&quot;linker&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        var linker = Process.findModuleByName(<span class="hljs-string">&quot;linker64&quot;</span>);<br>    &#125;<br><br>    var addr_call_function =null;<br>    var addr_g_ld_debug_verbosity = null;<br>    var addr_async_safe_format_log = null;<br>    <span class="hljs-keyword">if</span> (linker) &#123;<br>        var symbols = linker.enumerateSymbols();<br>        <span class="hljs-keyword">for</span> (var i = 0; i &lt; symbols.length; i++) &#123;<br>            var name = symbols[i].name;<br>            <span class="hljs-keyword">if</span> (name.indexOf(<span class="hljs-string">&quot;call_function&quot;</span>) &gt;= 0)&#123;<br>                addr_call_function = symbols[i].address;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(name.indexOf(<span class="hljs-string">&quot;g_ld_debug_verbosity&quot;</span>) &gt;=0)&#123;<br>                addr_g_ld_debug_verbosity = symbols[i].address;<br>              <br>                ptr(addr_g_ld_debug_verbosity).writeInt(2);<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(name.indexOf(<span class="hljs-string">&quot;async_safe_format_log&quot;</span>) &gt;=0 &amp;&amp; name.indexOf(<span class="hljs-string">&#x27;va_list&#x27;</span>) &lt; 0)&#123;<br>            <br>                addr_async_safe_format_log = symbols[i].address;<br><br>            &#125; <br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(addr_async_safe_format_log)&#123;<br>        Interceptor.attach(addr_async_safe_format_log,&#123;<br>            onEnter: <span class="hljs-keyword">function</span>(args)&#123;<br>                this.log_level  = args[0];<br>                this.tag = ptr(args[1]).readCString()<br>                this.fmt = ptr(args[2]).readCString()<br>                <span class="hljs-keyword">if</span>(this.fmt.indexOf(<span class="hljs-string">&quot;c-tor&quot;</span>) &gt;= 0 &amp;&amp; this.fmt.indexOf(<span class="hljs-string">&#x27;Done&#x27;</span>) &lt; 0)&#123;<br>                    this.function_type = ptr(args[3]).readCString(), // func_type<br>                    this.so_path = ptr(args[5]).readCString();<br>                    var strs = new Array(); //定义一数组 <br>                    strs = this.so_path.split(<span class="hljs-string">&quot;/&quot;</span>); //字符分割<br>                    this.so_name = strs.pop();<br>                    this.func_offset  = ptr(args[4]).sub(Module.findBaseAddress(this.so_name)) <br>                     console.log(<span class="hljs-string">&quot;func_type:&quot;</span>, this.function_type,<br>                        <span class="hljs-string">&#x27;\nso_name:&#x27;</span>,this.so_name,<br>                        <span class="hljs-string">&#x27;\nso_path:&#x27;</span>,this.so_path,<br>                        <span class="hljs-string">&#x27;\nfunc_offset:&#x27;</span>,this.func_offset <br>                     );<br>                &#125;<br>            &#125;,<br>            onLeave: <span class="hljs-keyword">function</span>(retval)&#123;<br><br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>    hook_constructor();<br>&#125;<br>setImmediate(main);<br></code></pre></td></tr></table></figure><h3 id="Stalker-Trace-对着学stalker时写的一个小脚本可以和ida-trace一样输出"><a href="#Stalker-Trace-对着学stalker时写的一个小脚本可以和ida-trace一样输出" class="headerlink" title="Stalker Trace    对着学stalker时写的一个小脚本可以和ida trace一样输出"></a>Stalker Trace    对着学stalker时写的一个小脚本可以和ida trace一样输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">StalkerTrace</span></span>() &#123;<br>    var soNmae = <span class="hljs-string">&quot;libtuzi.so&quot;</span>;<br>    var base_hello_jni = Module.findBaseAddress(soNmae);<br>    var ptr = base_hello_jni.add(0x14432);<br>    var module_hello_jni = Process.findModuleByName(soNmae);<br>    var module_Start = module_hello_jni.base;<br>    var module_End = module_Start + module_hello_jni.size;<br>    var pre_regs = &#123;&#125;;<br>    var isTrace = <span class="hljs-literal">false</span>;   //打印全部寄存器<br>    Interceptor.attach(ptr, &#123;<br>        onEnter: <span class="hljs-keyword">function</span> (args) &#123;<br>            this.arg0 = args[0];<br>            this.arg1 = args[1];<br>            this.arg2 = args[2];<br>            this.tid = Process.getCurrentThreadId();<br>            //为什么在Interceptor内使用呢因为可以减少指令的输出只输出函数内的更加准确好用<br>            Stalker.follow(this.tid, &#123;<br>                events: &#123;<br>                    call: <span class="hljs-literal">true</span>, // CALL instructions: <span class="hljs-built_in">yes</span> please<br>                    // Other events:<br>                    ret: <span class="hljs-literal">false</span>, // RET instructions<br>                    <span class="hljs-built_in">exec</span>: <span class="hljs-literal">true</span>, // all instructions: not recommended as it<span class="hljs-string">&#x27;s</span><br><span class="hljs-string">                    //                   a lot of data</span><br><span class="hljs-string">                    block: false, // block executed: coarse execution trace</span><br><span class="hljs-string">                    compile: false // block compiled: useful for coverage</span><br><span class="hljs-string">                &#125;,</span><br><span class="hljs-string">                transform: function (iterator) &#123;</span><br><span class="hljs-string">                    let instruction = iterator.next();</span><br><span class="hljs-string">                    do &#123;</span><br><span class="hljs-string">                        const startAddress = instruction.address;</span><br><span class="hljs-string">                        const is_module_code = startAddress.compare(module_Start) &gt;= 0 &amp;&amp;</span><br><span class="hljs-string">                            startAddress.compare(module_End) === -1;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                        if (is_module_code) &#123;</span><br><span class="hljs-string">                            iterator.putCallout(function (context) &#123;</span><br><span class="hljs-string">                                var pc = context.pc;</span><br><span class="hljs-string">                                pc = pc -0x4;  // 不减一下 寄存器变化会和 内容不一致</span><br><span class="hljs-string">                                var module = Process.findModuleByAddress(pc);</span><br><span class="hljs-string">                                if (module)&#123;</span><br><span class="hljs-string">                                    if (!isTrace)&#123;</span><br><span class="hljs-string">                                        if (module.name == soNmae) &#123;</span><br><span class="hljs-string">                                            var diff_regs = get_diff_regs(context, pre_regs);</span><br><span class="hljs-string">                                            if(diff_regs == null)&#123;</span><br><span class="hljs-string">                                                console.log(ptr(pc).sub(module.base), Instruction.parse(ptr(pc)));</span><br><span class="hljs-string">                                            &#125;else&#123;</span><br><span class="hljs-string">                                                console.log(ptr(pc).sub(module.base), Instruction.parse(ptr(pc)),</span><br><span class="hljs-string">                                                 diff_regs);</span><br><span class="hljs-string">                                            &#125;</span><br><span class="hljs-string">                                        &#125;</span><br><span class="hljs-string">                                    &#125;else &#123;</span><br><span class="hljs-string">                                        console.log(module.name + &quot;!&quot; + ptr(pc).sub(module.base),Instruction.parse(ptr(pc)));</span><br><span class="hljs-string">                                        console.log(JSON.stringify(context));</span><br><span class="hljs-string">                                    &#125;</span><br><span class="hljs-string">                                &#125;</span><br><span class="hljs-string">                            &#125;);</span><br><span class="hljs-string">                        &#125;</span><br><span class="hljs-string">                        iterator.keep();</span><br><span class="hljs-string">                    &#125; while ((instruction = iterator.next()) !== null);</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;);</span><br><span class="hljs-string">        &#125;, onLeave: function (retval) &#123;</span><br><span class="hljs-string">            Stalker.unfollow(this.tid);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;)</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function get_diff_regs(context,pre_regs)&#123;</span><br><span class="hljs-string">    var diff_regs = &#123;&#125;</span><br><span class="hljs-string">    for (const [reg_name,reg_value] of Object.entries(JSON.parse(JSON.stringify(context))))&#123;</span><br><span class="hljs-string">        if (reg_name !== &quot;pc&quot; &amp;&amp; pre_regs[reg_name] !== reg_value)&#123;</span><br><span class="hljs-string">            var ret = &quot;   ;   &quot;+reg_name +&quot; = &quot;+ pre_regs[reg_name] +&quot; -&gt; &quot;+ reg_value</span><br><span class="hljs-string">            pre_regs[reg_name] = reg_value;</span><br><span class="hljs-string">            diff_regs[reg_name] = reg_value;</span><br><span class="hljs-string">            return ret;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    return null;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="frida-seccomp-拦截svc"><a href="#frida-seccomp-拦截svc" class="headerlink" title="frida + seccomp     拦截svc"></a>frida + seccomp     拦截svc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> install_filter = null, syscall_thread_ptr, call_task, lock, unlock, findSoinfoByAddr, solist_get_head_ptr, get_soname, get_base, get_size, maps = [];<br>const MAX_STACK_TRACE_DEPTH = 10;<br>const Target_NR = 56; //hook的系统调用号<br>const prctl_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;prctl&#x27;</span>)<br>const strcpy_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;strcpy&#x27;</span>)<br>const fopen_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;fopen&#x27;</span>)<br>const fclose_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;fclose&#x27;</span>)<br>const fgets_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;fgets&#x27;</span>)<br>const strtoul_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;strtoul&#x27;</span>)<br>const strtok_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;strtok&#x27;</span>)<br>const malloc_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;malloc&#x27;</span>)<br>const __android_log_print_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;__android_log_print&#x27;</span>)<br>const pthread_create_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;pthread_create&#x27;</span>)<br>const pthread_mutex_init_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;pthread_mutex_init&#x27;</span>)<br>const pthread_mutex_lock_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;pthread_mutex_lock&#x27;</span>)<br>const pthread_mutex_unlock_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;pthread_mutex_unlock&#x27;</span>)<br>const pthread_join_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;pthread_join&#x27;</span>)<br>const syscall_ptr = Module.findExportByName(null, <span class="hljs-string">&#x27;syscall&#x27;</span>)<br>const linker = Process.findModuleByName(<span class="hljs-string">&quot;linker64&quot;</span>);<br>const linker_symbols = linker.enumerateSymbols()<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> index = 0; index &lt; linker_symbols.length; index++) &#123;<br>    const element = linker_symbols[index];<br>    <span class="hljs-keyword">if</span> (element.name == <span class="hljs-string">&#x27;__dl__Z15solist_get_headv&#x27;</span>) &#123;<br>        solist_get_head_ptr = element.address<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.name == <span class="hljs-string">&#x27;__dl__ZNK6soinfo10get_sonameEv&#x27;</span>) &#123;<br>        get_soname = new NativeFunction(element.address, <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>])<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">init</span></span>() &#123;<br>    //初始化，需要在主线程初始化且需要一个比较早的时机，frida脚本运行在它自己创建的一个线程，所以需要通过hook安装seccomp规则<br>    syscall_thread_ptr = new NativeFunction(cm.pthread_syscall_create, <span class="hljs-string">&quot;pointer&quot;</span>, [])()<br>    findSoinfoByAddr = new NativeFunction(cm.findSoinfoByAddr, <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>])<br>    get_base = new NativeFunction(cm.get_base, <span class="hljs-string">&quot;uint64&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>])<br>    get_size = new NativeFunction(cm.get_size, <span class="hljs-string">&quot;size_t&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>])<br>    call_task = new NativeFunction(cm.call_task, <span class="hljs-string">&quot;pointer&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;pointer&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>])<br>    install_filter = new NativeFunction(cm.install_filter, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&#x27;uint32&#x27;</span>])<br>    lock = new NativeFunction(cm.lock, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>])<br>    unlock = new NativeFunction(cm.unlock, <span class="hljs-string">&quot;int&quot;</span>, [<span class="hljs-string">&quot;pointer&quot;</span>])<br>    // 异常处理<br>    Process.setExceptionHandler(<span class="hljs-keyword">function</span> (details) &#123;<br>        const current_off = details.context.pc - 4;<br>        // 判断是否是seccomp导致的异常 读取opcode 010000d4 == svc 0<br>        <span class="hljs-keyword">if</span> (details.message == <span class="hljs-string">&quot;system error&quot;</span> &amp;&amp; details.type == <span class="hljs-string">&quot;system&quot;</span> &amp;&amp; hex(ptr(current_off).readByteArray(4)) == <span class="hljs-string">&quot;010000d4&quot;</span>) &#123;<br>            // 上锁避免多线程问题<br>            lock(syscall_thread_ptr)<br>            // 获取x8寄存器中的调用号<br>            const nr = details.context.x8.toString(10);<br>            <span class="hljs-built_in">let</span> loginfo = <span class="hljs-string">&quot;\n==================&quot;</span><br>            loginfo += `\nSVC[<span class="hljs-variable">$&#123;syscalls[nr][1]&#125;</span>|<span class="hljs-variable">$&#123;nr&#125;</span>] ==&gt; PC:<span class="hljs-variable">$&#123;addrToString(current_off)&#125;</span> P<span class="hljs-variable">$&#123;Process.id&#125;</span>-T<span class="hljs-variable">$&#123;Process.getCurrentThreadId()&#125;</span>`<br>            // 构造线程syscall调用参数<br>            const args = Memory.alloc(7 * 8)<br>            args.writePointer(details.context.x8)<br>            <span class="hljs-built_in">let</span> args_reg_arr = &#123;&#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> index = 0; index &lt; 6; index++) &#123;<br>                <span class="hljs-built_in">eval</span>(`args.add(8 * (index + 1)).writePointer(details.context.x<span class="hljs-variable">$&#123;index&#125;</span>)`)<br>                <span class="hljs-built_in">eval</span>(`args_reg_arr[<span class="hljs-string">&quot;arg<span class="hljs-variable">$&#123;index&#125;</span>&quot;</span>] = details.context.x<span class="hljs-variable">$&#123;index&#125;</span>`)<br>            &#125;<br><br>            // 获取手动堆栈信息<br>            //loginfo += <span class="hljs-string">&quot;\n&quot;</span> + stacktrace(ptr(current_off), details.context.fp, details.context.sp).map(addrToString).<span class="hljs-built_in">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><br>            // 打印传参<br>            loginfo += <span class="hljs-string">&quot;\nargs = &quot;</span> + JSON.stringify(args_reg_arr)<br><br>            loginfo += <span class="hljs-string">&quot;\npath = &quot;</span> + args_reg_arr.arg1.readCString()<br><br>            // 调用线程syscall 赋值x0寄存器<br>            details.context.x0 = call_task(syscall_thread_ptr, args, 0)<br><br>            loginfo += <span class="hljs-string">&quot;\nret = &quot;</span> + details.context.x0.toString()<br><br>            // 打印信息<br>            call_thread_log(loginfo)<br>            // 解锁<br>            unlock(syscall_thread_ptr)<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>    &#125;)<br>    // openat的调用号<br>    install_filter(Target_NR)<br>&#125;<br><br>// CModule模块编写<br>const cm = new CModule(`<br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;gum/gumprocess.h&gt;</span><br><span class="hljs-comment">#define BPF_STMT(code,k) &#123; (unsigned short) (code), 0, 0, k &#125;</span><br><span class="hljs-comment">#define BPF_JUMP(code,k,jt,jf) &#123; (unsigned short) (code), jt, jf, k &#125;</span><br><span class="hljs-comment">#define BPF_LD 0x00</span><br><span class="hljs-comment">#define BPF_W 0x00</span><br><span class="hljs-comment">#define BPF_ABS 0x20</span><br><span class="hljs-comment">#define BPF_JEQ 0x10</span><br><span class="hljs-comment">#define BPF_JMP 0x05</span><br><span class="hljs-comment">#define BPF_K 0x00</span><br><span class="hljs-comment">#define BPF_RET 0x06</span><br><br><span class="hljs-comment">#define PR_SET_SECCOMP22</span><br><span class="hljs-comment">#define PR_SET_NO_NEW_PRIVS38</span><br><span class="hljs-comment">#define SECCOMP_MODE_FILTER2</span><br><span class="hljs-comment">#define SECCOMP_RET_TRAP 0x00030000U</span><br><span class="hljs-comment">#define SECCOMP_RET_ALLOW 0x7fff0000U</span><br><br><span class="hljs-comment">#define SIGSYS  12</span><br><span class="hljs-comment">#define SIG_UNBLOCK     2</span><br><br>typedef unsigned char __u8;<br>typedef unsigned short __u16;<br>typedef unsigned int __u32;<br>typedef unsigned long long __u64;<br>typedef unsigned long sigset_t;<br>typedef long pthread_t;<br><br>typedef struct &#123;<br>    uint32_t flags;<br>    void* stack_base;<br>    size_t stack_size;<br>    size_t guard_size;<br>    int32_t sched_policy;<br>    int32_t sched_priority;<br>  <span class="hljs-comment">#ifdef __LP64__</span><br>    char __reserved[16];<br>  <span class="hljs-comment">#endif</span><br>  &#125; pthread_attr_t;<br><br>typedef struct &#123;<br><span class="hljs-comment">#if defined(__LP64__)</span><br>  int32_t __private[10];<br><span class="hljs-comment">#else</span><br>  int32_t __private[1];<br><span class="hljs-comment">#endif</span><br>&#125; pthread_mutex_t;<br><br>typedef struct &#123;<br>    int <span class="hljs-built_in">type</span>;<br>    int isTask;<br>    void *args;<br>    int isReturn;<br>    void *ret;<br>    pthread_t thread;<br>    pthread_mutex_t mutex;<br>&#125; thread_syscall_t;<br><br>typedef struct&#123;<br>    const void *phdr;<br>    size_t phnum;<br>    uint64_t base;<br>    size_t size;<br>    void *dynamic;<br>    void *next;<br>&#125; soinfo;<br><br>extern char* strcpy(char* __dst, const char* __src);<br>extern void* fopen(const char* __path, const char* __mode);<br>extern int fclose(void* __fp);<br>extern char* fgets(char* __buf, int __size, void* __fp);<br>extern unsigned long strtoul(const char* __s, char** __end_ptr, int __base);<br>extern char* strtok(char* __s, const char* __delimiter);<br>extern soinfo *solist_get_head();<br>extern int __android_log_print(int prio, const char* tag, const char* <span class="hljs-built_in">fmt</span>, ...);<br>extern void *malloc(size_t __byte_count);<br>extern long syscall(long __number, ...);<br>extern int pthread_create(pthread_t* __pthread_ptr, pthread_attr_t const* __attr, void* (*__start_routine)(void*), void*);<br>extern int pthread_mutex_init(pthread_mutex_t* __mutex, const void* __attr);<br>extern int pthread_mutex_lock(pthread_mutex_t* __mutex);<br>extern int pthread_mutex_unlock(pthread_mutex_t* __mutex);<br>extern int pthread_join(pthread_t __pthread, void** __return_value_ptr);<br>extern void on_message(const gchar *message);<br>extern int prctl(int __option, ...);<br><br>uint64_t get_base(soinfo *si)&#123;<br>    <span class="hljs-built_in">return</span> si-&gt;base;<br>&#125;<br><br>size_t get_size(soinfo *si)&#123;<br>    <span class="hljs-built_in">return</span> si-&gt;size;<br>&#125;<br><br>soinfo *findSoinfoByAddr(void *addr_v) &#123;<br>    uint64_t addr = (uint64_t) addr_v;<br>    <span class="hljs-keyword">for</span> (soinfo *si = (soinfo *)solist_get_head(); si != NULL; si = si-&gt;next) &#123;<br>      <span class="hljs-keyword">if</span> (addr &gt;= si-&gt;base &amp;&amp; addr &lt; (si-&gt;base + si-&gt;size)) &#123;<br>        <span class="hljs-built_in">return</span> si;<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span> NULL;<br>&#125;<br><br>static void <span class="hljs-built_in">log</span>(const gchar *format, ...)<br>&#123;<br>    gchar *message;<br>    va_list args;<br>    va_start(args, format);<br>    message = g_strdup_vprintf(format, args);<br>    va_end(args);<br>    on_message(message);<br>    g_free(message);<br>&#125;<br><br>int lock(thread_syscall_t *syscall_thread)&#123;<br>    <span class="hljs-built_in">return</span> pthread_mutex_lock(&amp;syscall_thread-&gt;mutex);<br>&#125;<br><br>int unlock(thread_syscall_t *syscall_thread)&#123;<br>    <span class="hljs-built_in">return</span> pthread_mutex_unlock(&amp;syscall_thread-&gt;mutex);<br>&#125;<br><br>void *call_syscall(void *args)&#123;<br>    void **d_args = (void **)args;<br>    void *ret = (void *)syscall((long)d_args[0] ,d_args[1] ,d_args[2] ,d_args[3], d_args[4], d_args[5], d_args[6]);<br>    <span class="hljs-built_in">return</span> ret;<br>&#125;<br><br>void *call_log(void *args)&#123;<br>    __android_log_print(3, <span class="hljs-string">&quot;tuziSeccmop&quot;</span>, (const char *)args);<br>    <span class="hljs-built_in">return</span> NULL;<br>&#125;<br><br>void *call_read_maps(void *args)&#123;<br>    uint64_t addr = (uint64_t) args;<br>    FILE *fp = fopen(<span class="hljs-string">&quot;/proc/self/maps&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    char line[1024];<br>    char _line[1024];<br>    uint64_t start, end;<br>    <span class="hljs-keyword">while</span> (fgets(line, sizeof(line), fp) != NULL) &#123;<br>        strcpy(_line, line);<br>        start = (uint64_t) strtoul(strtok(line, <span class="hljs-string">&quot;-&quot;</span>), NULL, 16);<br>        end = (uint64_t) strtoul(strtok(NULL, <span class="hljs-string">&quot; &quot;</span>), NULL, 16);<br>        <span class="hljs-keyword">if</span> (addr &gt;= start &amp;&amp; addr &lt; end) &#123;<br>          <span class="hljs-built_in">break</span>;<br>        &#125;<br>    &#125;<br>    fclose(fp);<br>    <span class="hljs-built_in">return</span> (void *)_line;<br>&#125;<br><br>void *call_task(thread_syscall_t *syscall_thread,void *args,int <span class="hljs-built_in">type</span>)&#123;<br>    <span class="hljs-keyword">if</span>(syscall_thread-&gt;isTask == 0)&#123;<br>        syscall_thread-&gt;args = args;<br>        syscall_thread-&gt;<span class="hljs-built_in">type</span> = <span class="hljs-built_in">type</span>;<br>        syscall_thread-&gt;isTask = 1;<br>    &#125;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">if</span>(syscall_thread-&gt;isReturn)&#123;<br>            syscall_thread-&gt;isReturn = 0;<br>            <span class="hljs-built_in">return</span> syscall_thread-&gt;ret;<br>        &#125;<br>    &#125;<span class="hljs-keyword">while</span>(1);<br>&#125;<br><br>void *pthread_syscall(void *args)&#123;<br>    thread_syscall_t *syscall_thread = (thread_syscall_t *)args;<br>    <span class="hljs-keyword">while</span>(1)&#123;<br>        <span class="hljs-keyword">if</span>(syscall_thread-&gt;isTask)&#123;<br>            <span class="hljs-keyword">if</span>(syscall_thread-&gt;<span class="hljs-built_in">type</span> == 0)&#123;<br>                syscall_thread-&gt;ret = call_syscall(syscall_thread-&gt;args);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(syscall_thread-&gt;<span class="hljs-built_in">type</span> == 1)&#123;<br>                syscall_thread-&gt;ret = call_log(syscall_thread-&gt;args);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(syscall_thread-&gt;<span class="hljs-built_in">type</span> == 2)&#123;<br>                syscall_thread-&gt;ret = call_read_maps(syscall_thread-&gt;args);<br>            &#125;<br>            syscall_thread-&gt;args = NULL;<br>            syscall_thread-&gt;isReturn = 1;<br>            syscall_thread-&gt;isTask = 0;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">return</span> NULL;<br>&#125;<br><br>//syscall线程创建<br><br>thread_syscall_t *<span class="hljs-function"><span class="hljs-title">pthread_syscall_create</span></span>()&#123;<br>    thread_syscall_t *syscall_thread = (thread_syscall_t *)malloc(sizeof(thread_syscall_t));<br>    syscall_thread-&gt;<span class="hljs-built_in">type</span> = 0;<br>    syscall_thread-&gt;isTask = 0;<br>    syscall_thread-&gt;args = NULL;<br>    syscall_thread-&gt;ret = NULL;<br>    syscall_thread-&gt;isReturn = 0;<br>    pthread_mutex_init(&amp;syscall_thread-&gt;mutex, NULL);<br>    pthread_t threadId;<br>    pthread_create(&amp;threadId, NULL, &amp;pthread_syscall, (void *)syscall_thread);<br>    syscall_thread-&gt;thread = threadId;<br>    <span class="hljs-built_in">return</span> syscall_thread;<br>&#125;<br><br>struct seccomp_data &#123;<br>    int nr;<br>    __u32 <span class="hljs-built_in">arch</span>;<br>    __u64 instruction_pointer;<br>    __u64 args[6];<br>&#125;;<br><br>struct sock_filter &#123;<br>    __u16 code;<br>    __u8 jt;<br>    __u8 jf;<br>    __u32 k;<br>&#125;;<br><br>struct sock_fprog &#123;<br>    unsigned short len;<br>    struct sock_filter * filter;<br>&#125;;<br><br>int install_filter(__u32 nr) &#123;<br>    <span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;install_filter(%lu)&quot;</span>,nr);<br>    struct sock_filter filter[] = &#123;<br>            BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0),<br>            BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, nr, 0, 1),<br>            BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_TRAP),<br>            BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),<br>    &#125;;<br>    struct sock_fprog prog = &#123;<br>            .len = (unsigned short) (sizeof(filter) / sizeof(filter[0])),<br>            .filter = filter,<br>    &#125;;<br>    <span class="hljs-keyword">if</span> (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) &#123;<br>        on_message(<span class="hljs-string">&quot;prctl(NO_NEW_PRIVS)&quot;</span>);<br>        <span class="hljs-built_in">return</span> 1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog)) &#123;<br>        on_message(<span class="hljs-string">&quot;prctl(PR_SET_SECCOMP)&quot;</span>);<br>        <span class="hljs-built_in">return</span> 1;<br>    &#125;<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br>`, &#123;<br>    malloc: malloc_ptr,<br>    prctl: prctl_ptr,<br>    fopen: fopen_ptr,<br>    fclose: fclose_ptr,<br>    fgets: fgets_ptr,<br>    strtok: strtok_ptr,<br>    strcpy: strcpy_ptr,<br>    strtoul: strtoul_ptr,<br>    __android_log_print: __android_log_print_ptr,<br>    pthread_create: pthread_create_ptr,<br>    pthread_join: pthread_join_ptr,<br>    pthread_mutex_init: pthread_mutex_init_ptr,<br>    pthread_mutex_lock: pthread_mutex_lock_ptr,<br>    pthread_mutex_unlock: pthread_mutex_unlock_ptr,<br>    syscall: syscall_ptr,<br>    solist_get_head: solist_get_head_ptr,<br>    on_message: new NativeCallback(messagePtr =&gt; &#123;<br>        const message = messagePtr.readUtf8String();<br>        console.log(message)<br>    &#125;, <span class="hljs-string">&#x27;void&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>])<br>&#125;);<br><br>Interceptor.attach(Module.findExportByName(null, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>), &#123;<br>    onEnter(args) &#123;<br>        <span class="hljs-keyword">if</span> (install_filter == null) &#123;<br>            init()<br>        &#125;<br>    &#125;<br>&#125;)<br><br><br>const byteToHex = [];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> n = 0; n &lt;= 0xff; ++n) &#123;<br>    const hexOctet = n.toString(16).padStart(2, <span class="hljs-string">&quot;0&quot;</span>);<br>    byteToHex.push(hexOctet);<br>&#125;<br><br><span class="hljs-keyword">function</span> hex(arrayBuffer) &#123;<br>    const buff = new Uint8Array(arrayBuffer);<br>    const hexOctets = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; buff.length; ++i)<br>        hexOctets.push(byteToHex[buff[i]]);<br>    <span class="hljs-built_in">return</span> hexOctets.<span class="hljs-built_in">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> call_thread_log(str) &#123;<br>    call_task(syscall_thread_ptr, Memory.allocUtf8String(str), 1)<br>&#125;<br><br><span class="hljs-keyword">function</span> call_thread_read_maps(addr) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> index = 0; index &lt; maps.length; index++) &#123;<br>        const element = maps[index];<br>        <span class="hljs-keyword">if</span> (parseInt(addr.toString()) &gt;= element[0] &amp;&amp; parseInt(addr.toString()) &lt; element[1]) &#123;<br>            <span class="hljs-built_in">return</span> &#123; start: element[0], end: element[1], name: element[2] &#125;<br>        &#125;<br>    &#125;<br>    const map_info = call_task(syscall_thread_ptr, ptr(addr), 2).readUtf8String()<br>    const start = parseInt(<span class="hljs-string">&quot;0x&quot;</span> + map_info.split(<span class="hljs-string">&quot;-&quot;</span>)[0])<br>    const end = parseInt(<span class="hljs-string">&quot;0x&quot;</span> + map_info.split(<span class="hljs-string">&quot;-&quot;</span>)[1].<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; &quot;</span>)[0])<br>    const name_arr = map_info.split(<span class="hljs-string">&quot;                              &quot;</span>)<br>    const name = name_arr.length == 2 ? name_arr[2] : <span class="hljs-string">&quot;&quot;</span><br>    maps.push([start, end, name])<br>    <span class="hljs-built_in">return</span> &#123; start, end, name &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> addrToString(addr) &#123;<br>    const add_s = parseInt(addr.toString(10))<br>    const addr_soinfo = findSoinfoByAddr(ptr(add_s));<br>    <span class="hljs-keyword">if</span> (addr_soinfo != 0) &#123;<br>        <span class="hljs-built_in">return</span> `0x<span class="hljs-variable">$&#123;addr.toString(16)&#125;</span>[<span class="hljs-variable">$&#123;get_soname(addr_soinfo).readUtf8String()&#125;</span>:0x<span class="hljs-variable">$&#123;(addr - get_base(addr_soinfo)).toString(16)&#125;</span>]`<br>    &#125;<br>    <span class="hljs-keyword">if</span> (add_s &gt;= linker.base &amp;&amp; add_s &lt; linker.base + linker.size) &#123;<br>        <span class="hljs-built_in">return</span> `0x<span class="hljs-variable">$&#123;add_s.toString(16)&#125;</span>[<span class="hljs-variable">$&#123;linker.name&#125;</span>:0x<span class="hljs-variable">$&#123;(add_s - linker.base).toString(16)&#125;</span>]`<br>    &#125;<br>    const mem_region = call_thread_read_maps(add_s);<br>    <span class="hljs-keyword">if</span> (mem_region.name != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-built_in">return</span> `0x<span class="hljs-variable">$&#123;add_s.toString(16)&#125;</span>[<span class="hljs-variable">$&#123;mem_region.name&#125;</span>:0x<span class="hljs-variable">$&#123;(add_s - mem_region.start).toString(16)&#125;</span>]`<br>    &#125;<br>    <span class="hljs-built_in">return</span> `0x<span class="hljs-variable">$&#123;addr.toString(16)&#125;</span>[unkownmem:]`<br>&#125;<br><br><span class="hljs-keyword">function</span> stacktrace(pc, fp, sp) &#123;<br>    <span class="hljs-built_in">let</span> n = 0, stack_arr = [], fp_c = fp;<br>    stack_arr[n++] = pc;<br>    const mem_region = call_thread_read_maps(sp);<br>    <span class="hljs-keyword">while</span> (n &lt; MAX_STACK_TRACE_DEPTH) &#123;<br>        <span class="hljs-keyword">if</span> (parseInt(fp_c.toString()) &lt; parseInt(sp.toString()) || fp_c &lt; mem_region.start || fp_c &gt; mem_region.end) &#123;<br>            <span class="hljs-built_in">break</span><br>        &#125;<br>        <span class="hljs-built_in">let</span> next_fp = fp_c.readPointer()<br>        <span class="hljs-built_in">let</span> lr = fp_c.add(8).readPointer()<br>        fp_c = next_fp<br>        stack_arr[n++] = lr<br>    &#125;<br>    <span class="hljs-built_in">return</span> stack_arr;<br>&#125;<br><br>const syscalls = [<br>    [0, <span class="hljs-string">&quot;io_setup&quot;</span>, 0x00, <span class="hljs-string">&quot;unsigned nr_reqs&quot;</span>, <span class="hljs-string">&quot;aio_context_t *ctx&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [1, <span class="hljs-string">&quot;io_destroy&quot;</span>, 0x01, <span class="hljs-string">&quot;aio_context_t ctx&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [2, <span class="hljs-string">&quot;io_submit&quot;</span>, 0x02, <span class="hljs-string">&quot;aio_context_t&quot;</span>, <span class="hljs-string">&quot;long&quot;</span>, <span class="hljs-string">&quot;struct iocb * *&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [3, <span class="hljs-string">&quot;io_cancel&quot;</span>, 0x03, <span class="hljs-string">&quot;aio_context_t ctx_id&quot;</span>, <span class="hljs-string">&quot;struct iocb *iocb&quot;</span>, <span class="hljs-string">&quot;struct io_event *result&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [4, <span class="hljs-string">&quot;io_getevents&quot;</span>, 0x04, <span class="hljs-string">&quot;aio_context_t ctx_id&quot;</span>, <span class="hljs-string">&quot;long min_nr&quot;</span>, <span class="hljs-string">&quot;long nr&quot;</span>, <span class="hljs-string">&quot;struct io_event *events&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *timeout&quot;</span>],<br>    [5, <span class="hljs-string">&quot;setxattr&quot;</span>, 0x05, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;const void *value&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [6, <span class="hljs-string">&quot;lsetxattr&quot;</span>, 0x06, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;const void *value&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [7, <span class="hljs-string">&quot;fsetxattr&quot;</span>, 0x07, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;const void *value&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [8, <span class="hljs-string">&quot;getxattr&quot;</span>, 0x08, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;void *value&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [9, <span class="hljs-string">&quot;lgetxattr&quot;</span>, 0x09, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;void *value&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [10, <span class="hljs-string">&quot;fgetxattr&quot;</span>, 0x0a, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;void *value&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>],<br>    [11, <span class="hljs-string">&quot;listxattr&quot;</span>, 0x0b, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;char *list&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [12, <span class="hljs-string">&quot;llistxattr&quot;</span>, 0x0c, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;char *list&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [13, <span class="hljs-string">&quot;flistxattr&quot;</span>, 0x0d, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;char *list&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [14, <span class="hljs-string">&quot;removexattr&quot;</span>, 0x0e, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [15, <span class="hljs-string">&quot;lremovexattr&quot;</span>, 0x0f, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [16, <span class="hljs-string">&quot;fremovexattr&quot;</span>, 0x10, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [17, <span class="hljs-string">&quot;getcwd&quot;</span>, 0x11, <span class="hljs-string">&quot;char *buf&quot;</span>, <span class="hljs-string">&quot;unsigned long size&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [18, <span class="hljs-string">&quot;lookup_dcookie&quot;</span>, 0x12, <span class="hljs-string">&quot;u64 cookie64&quot;</span>, <span class="hljs-string">&quot;char *buf&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [19, <span class="hljs-string">&quot;eventfd2&quot;</span>, 0x13, <span class="hljs-string">&quot;unsigned int count&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [20, <span class="hljs-string">&quot;epoll_create1&quot;</span>, 0x14, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [21, <span class="hljs-string">&quot;epoll_ctl&quot;</span>, 0x15, <span class="hljs-string">&quot;int epfd&quot;</span>, <span class="hljs-string">&quot;int op&quot;</span>, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;struct epoll_event *event&quot;</span>],<br>    [22, <span class="hljs-string">&quot;epoll_pwait&quot;</span>, 0x16, <span class="hljs-string">&quot;int epfd&quot;</span>, <span class="hljs-string">&quot;struct epoll_event *events&quot;</span>, <span class="hljs-string">&quot;int maxevents&quot;</span>, <span class="hljs-string">&quot;int timeout&quot;</span>, <span class="hljs-string">&quot;const sigset_t *sigmask&quot;</span>, <span class="hljs-string">&quot;size_t sigsetsize&quot;</span>],<br>    [23, <span class="hljs-string">&quot;dup&quot;</span>, 0x17, <span class="hljs-string">&quot;unsigned int fildes&quot;</span>],<br>    [24, <span class="hljs-string">&quot;dup3&quot;</span>, 0x18, <span class="hljs-string">&quot;unsigned int oldfd&quot;</span>, <span class="hljs-string">&quot;unsigned int newfd&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [25, <span class="hljs-string">&quot;fcntl&quot;</span>, 0x19, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;unsigned int cmd&quot;</span>, <span class="hljs-string">&quot;unsigned long arg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [26, <span class="hljs-string">&quot;inotify_init1&quot;</span>, 0x1a, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [27, <span class="hljs-string">&quot;inotify_add_watch&quot;</span>, 0x1b, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;u32 mask&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [28, <span class="hljs-string">&quot;inotify_rm_watch&quot;</span>, 0x1c, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;__s32 wd&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [29, <span class="hljs-string">&quot;ioctl&quot;</span>, 0x1d, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;unsigned int cmd&quot;</span>, <span class="hljs-string">&quot;unsigned long arg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [30, <span class="hljs-string">&quot;ioprio_set&quot;</span>, 0x1e, <span class="hljs-string">&quot;int which&quot;</span>, <span class="hljs-string">&quot;int who&quot;</span>, <span class="hljs-string">&quot;int ioprio&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [31, <span class="hljs-string">&quot;ioprio_get&quot;</span>, 0x1f, <span class="hljs-string">&quot;int which&quot;</span>, <span class="hljs-string">&quot;int who&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [32, <span class="hljs-string">&quot;flock&quot;</span>, 0x20, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;unsigned int cmd&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [33, <span class="hljs-string">&quot;mknodat&quot;</span>, 0x21, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char * filename&quot;</span>, <span class="hljs-string">&quot;umode_t mode&quot;</span>, <span class="hljs-string">&quot;unsigned dev&quot;</span>],<br>    [34, <span class="hljs-string">&quot;mkdirat&quot;</span>, 0x22, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char * pathname&quot;</span>, <span class="hljs-string">&quot;umode_t mode&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [35, <span class="hljs-string">&quot;unlinkat&quot;</span>, 0x23, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char * pathname&quot;</span>, <span class="hljs-string">&quot;int flag&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [36, <span class="hljs-string">&quot;symlinkat&quot;</span>, 0x24, <span class="hljs-string">&quot;const char * oldname&quot;</span>, <span class="hljs-string">&quot;int newdfd&quot;</span>, <span class="hljs-string">&quot;const char * newname&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [37, <span class="hljs-string">&quot;linkat&quot;</span>, 0x25, <span class="hljs-string">&quot;int olddfd&quot;</span>, <span class="hljs-string">&quot;const char *oldname&quot;</span>, <span class="hljs-string">&quot;int newdfd&quot;</span>, <span class="hljs-string">&quot;const char *newname&quot;</span>, <span class="hljs-string">&quot;int flag&quot;</span>],<br>    [38, <span class="hljs-string">&quot;renameat&quot;</span>, 0x26, <span class="hljs-string">&quot;int olddfd&quot;</span>, <span class="hljs-string">&quot;const char * oldname&quot;</span>, <span class="hljs-string">&quot;int newdfd&quot;</span>, <span class="hljs-string">&quot;const char * newname&quot;</span>],<br>    [39, <span class="hljs-string">&quot;umount2&quot;</span>, 0x27, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?[&quot;</span>],<br>    [40, <span class="hljs-string">&quot;mount&quot;</span>, 0x28, <span class="hljs-string">&quot;char *dev_name&quot;</span>, <span class="hljs-string">&quot;char *dir_name&quot;</span>, <span class="hljs-string">&quot;char *type&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>, <span class="hljs-string">&quot;void *dat&quot;</span>],<br>    [41, <span class="hljs-string">&quot;pivot_root&quot;</span>, 0x29, <span class="hljs-string">&quot;const char *new_root&quot;</span>, <span class="hljs-string">&quot;const char *put_old&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [42, <span class="hljs-string">&quot;nfsservctl&quot;</span>, 0x2a, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?[&quot;</span>],<br>    [43, <span class="hljs-string">&quot;statfs&quot;</span>, 0x2b, <span class="hljs-string">&quot;const char * path&quot;</span>, <span class="hljs-string">&quot;struct statfs *buf&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [44, <span class="hljs-string">&quot;fstatfs&quot;</span>, 0x2c, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;struct statfs *buf&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [45, <span class="hljs-string">&quot;truncate&quot;</span>, 0x2d, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;long length&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [46, <span class="hljs-string">&quot;ftruncate&quot;</span>, 0x2e, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;unsigned long length&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [47, <span class="hljs-string">&quot;fallocate&quot;</span>, 0x2f, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;int mode&quot;</span>, <span class="hljs-string">&quot;loff_t offset&quot;</span>, <span class="hljs-string">&quot;loff_t len&quot;</span>],<br>    [48, <span class="hljs-string">&quot;faccessat&quot;</span>, 0x30, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *filename&quot;</span>, <span class="hljs-string">&quot;int mode&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [49, <span class="hljs-string">&quot;chdir&quot;</span>, 0x31, <span class="hljs-string">&quot;const char *filename&quot;</span>],<br>    [50, <span class="hljs-string">&quot;fchdir&quot;</span>, 0x32, <span class="hljs-string">&quot;unsigned int fd&quot;</span>],<br>    [51, <span class="hljs-string">&quot;chroot&quot;</span>, 0x33, <span class="hljs-string">&quot;const char *filename&quot;</span>],<br>    [52, <span class="hljs-string">&quot;fchmod&quot;</span>, 0x34, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;umode_t mode&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [53, <span class="hljs-string">&quot;fchmodat&quot;</span>, 0x35, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char * filename&quot;</span>, <span class="hljs-string">&quot;umode_t mode&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [54, <span class="hljs-string">&quot;fchownat&quot;</span>, 0x36, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *filename&quot;</span>, <span class="hljs-string">&quot;uid_t user&quot;</span>, <span class="hljs-string">&quot;gid_t group&quot;</span>, <span class="hljs-string">&quot;int fla&quot;</span>],<br>    [55, <span class="hljs-string">&quot;fchown&quot;</span>, 0x37, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;uid_t user&quot;</span>, <span class="hljs-string">&quot;gid_t group&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [56, <span class="hljs-string">&quot;openat&quot;</span>, 0x38, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *filename&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;umode_t mode&quot;</span>],<br>    [57, <span class="hljs-string">&quot;close&quot;</span>, 0x39, <span class="hljs-string">&quot;unsigned int fd&quot;</span>],<br>    [58, <span class="hljs-string">&quot;vhangup&quot;</span>, 0x3a, <span class="hljs-string">&quot;-&quot;</span>],<br>    [59, <span class="hljs-string">&quot;pipe2&quot;</span>, 0x3b, <span class="hljs-string">&quot;int *fildes&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [60, <span class="hljs-string">&quot;quotactl&quot;</span>, 0x3c, <span class="hljs-string">&quot;unsigned int cmd&quot;</span>, <span class="hljs-string">&quot;const char *special&quot;</span>, <span class="hljs-string">&quot;qid_t id&quot;</span>, <span class="hljs-string">&quot;void *addr&quot;</span>],<br>    [61, <span class="hljs-string">&quot;getdents64&quot;</span>, 0x3d, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;struct linux_dirent64 *dirent&quot;</span>, <span class="hljs-string">&quot;unsigned int count&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [62, <span class="hljs-string">&quot;lseek&quot;</span>, 0x3e, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;off_t offset&quot;</span>, <span class="hljs-string">&quot;unsigned int whence&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [63, <span class="hljs-string">&quot;read&quot;</span>, 0x3f, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;char *buf&quot;</span>, <span class="hljs-string">&quot;size_t count&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [64, <span class="hljs-string">&quot;write&quot;</span>, 0x40, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;const char *buf&quot;</span>, <span class="hljs-string">&quot;size_t count&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [65, <span class="hljs-string">&quot;readv&quot;</span>, 0x41, <span class="hljs-string">&quot;unsigned long fd&quot;</span>, <span class="hljs-string">&quot;const struct iovec *vec&quot;</span>, <span class="hljs-string">&quot;unsigned long vlen&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [66, <span class="hljs-string">&quot;writev&quot;</span>, 0x42, <span class="hljs-string">&quot;unsigned long fd&quot;</span>, <span class="hljs-string">&quot;const struct iovec *vec&quot;</span>, <span class="hljs-string">&quot;unsigned long vlen&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [67, <span class="hljs-string">&quot;pread64&quot;</span>, 0x43, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;char *buf&quot;</span>, <span class="hljs-string">&quot;size_t count&quot;</span>, <span class="hljs-string">&quot;loff_t pos&quot;</span>],<br>    [68, <span class="hljs-string">&quot;pwrite64&quot;</span>, 0x44, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;const char *buf&quot;</span>, <span class="hljs-string">&quot;size_t count&quot;</span>, <span class="hljs-string">&quot;loff_t pos&quot;</span>],<br>    [69, <span class="hljs-string">&quot;preadv&quot;</span>, 0x45, <span class="hljs-string">&quot;unsigned long fd&quot;</span>, <span class="hljs-string">&quot;const struct iovec *vec&quot;</span>, <span class="hljs-string">&quot;unsigned long vlen&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_l&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_&quot;</span>],<br>    [70, <span class="hljs-string">&quot;pwritev&quot;</span>, 0x46, <span class="hljs-string">&quot;unsigned long fd&quot;</span>, <span class="hljs-string">&quot;const struct iovec *vec&quot;</span>, <span class="hljs-string">&quot;unsigned long vlen&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_l&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_&quot;</span>],<br>    [71, <span class="hljs-string">&quot;sendfile&quot;</span>, 0x47, <span class="hljs-string">&quot;int out_fd&quot;</span>, <span class="hljs-string">&quot;int in_fd&quot;</span>, <span class="hljs-string">&quot;off_t *offset&quot;</span>, <span class="hljs-string">&quot;size_t count&quot;</span>],<br>    [72, <span class="hljs-string">&quot;pselect6&quot;</span>, 0x48, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;fd_set *&quot;</span>, <span class="hljs-string">&quot;fd_set *&quot;</span>, <span class="hljs-string">&quot;fd_set *&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *&quot;</span>, <span class="hljs-string">&quot;void *[&quot;</span>],<br>    [73, <span class="hljs-string">&quot;ppoll&quot;</span>, 0x49, <span class="hljs-string">&quot;struct pollfd *&quot;</span>, <span class="hljs-string">&quot;unsigned int&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *&quot;</span>, <span class="hljs-string">&quot;const sigset_t *&quot;</span>, <span class="hljs-string">&quot;size_&quot;</span>],<br>    [74, <span class="hljs-string">&quot;signalfd4&quot;</span>, 0x4a, <span class="hljs-string">&quot;int ufd&quot;</span>, <span class="hljs-string">&quot;sigset_t *user_mask&quot;</span>, <span class="hljs-string">&quot;size_t sizemask&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [75, <span class="hljs-string">&quot;vmsplice&quot;</span>, 0x4b, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;const struct iovec *iov&quot;</span>, <span class="hljs-string">&quot;unsigned long nr_segs&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>],<br>    [76, <span class="hljs-string">&quot;splice&quot;</span>, 0x4c, <span class="hljs-string">&quot;int fd_in&quot;</span>, <span class="hljs-string">&quot;loff_t *off_in&quot;</span>, <span class="hljs-string">&quot;int fd_out&quot;</span>, <span class="hljs-string">&quot;loff_t *off_out&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;unsigned int flags[&quot;</span>],<br>    [77, <span class="hljs-string">&quot;tee&quot;</span>, 0x4d, <span class="hljs-string">&quot;int fdin&quot;</span>, <span class="hljs-string">&quot;int fdout&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>],<br>    [78, <span class="hljs-string">&quot;readlinkat&quot;</span>, 0x4e, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;char *buf&quot;</span>, <span class="hljs-string">&quot;int bufsiz&quot;</span>],<br>    [79, <span class="hljs-string">&quot;newfstatat&quot;</span>, 0x4f, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *filename&quot;</span>, <span class="hljs-string">&quot;struct stat *statbuf&quot;</span>, <span class="hljs-string">&quot;int flag&quot;</span>],<br>    [80, <span class="hljs-string">&quot;fstat&quot;</span>, 0x50, <span class="hljs-string">&quot;unsigned int fd&quot;</span>, <span class="hljs-string">&quot;struct __old_kernel_stat *statbuf&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [81, <span class="hljs-string">&quot;sync&quot;</span>, 0x51, <span class="hljs-string">&quot;-&quot;</span>],<br>    [82, <span class="hljs-string">&quot;fsync&quot;</span>, 0x52, <span class="hljs-string">&quot;unsigned int fd&quot;</span>],<br>    [83, <span class="hljs-string">&quot;fdatasync&quot;</span>, 0x53, <span class="hljs-string">&quot;unsigned int fd&quot;</span>],<br>    [84, <span class="hljs-string">&quot;sync_file_range&quot;</span>, 0x54, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;loff_t offset&quot;</span>, <span class="hljs-string">&quot;loff_t nbytes&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>],<br>    [85, <span class="hljs-string">&quot;timerfd_create&quot;</span>, 0x55, <span class="hljs-string">&quot;int clockid&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [86, <span class="hljs-string">&quot;timerfd_settime&quot;</span>, 0x56, <span class="hljs-string">&quot;int ufd&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_itimerspec *utmr&quot;</span>, <span class="hljs-string">&quot;struct __kernel_itimerspec *otmr&quot;</span>],<br>    [87, <span class="hljs-string">&quot;timerfd_gettime&quot;</span>, 0x57, <span class="hljs-string">&quot;int ufd&quot;</span>, <span class="hljs-string">&quot;struct __kernel_itimerspec *otmr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [88, <span class="hljs-string">&quot;utimensat&quot;</span>, 0x58, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *filename&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *utimes&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [89, <span class="hljs-string">&quot;acct&quot;</span>, 0x59, <span class="hljs-string">&quot;const char *name&quot;</span>],<br>    [90, <span class="hljs-string">&quot;capget&quot;</span>, 0x5a, <span class="hljs-string">&quot;cap_user_header_t header&quot;</span>, <span class="hljs-string">&quot;cap_user_data_t dataptr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [91, <span class="hljs-string">&quot;capset&quot;</span>, 0x5b, <span class="hljs-string">&quot;cap_user_header_t header&quot;</span>, <span class="hljs-string">&quot;const cap_user_data_t data&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [92, <span class="hljs-string">&quot;personality&quot;</span>, 0x5c, <span class="hljs-string">&quot;unsigned int personality&quot;</span>],<br>    [93, <span class="hljs-string">&quot;exit&quot;</span>, 0x5d, <span class="hljs-string">&quot;int error_code&quot;</span>],<br>    [94, <span class="hljs-string">&quot;exit_group&quot;</span>, 0x5e, <span class="hljs-string">&quot;int error_code&quot;</span>],<br>    [95, <span class="hljs-string">&quot;waitid&quot;</span>, 0x5f, <span class="hljs-string">&quot;int which&quot;</span>, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;struct siginfo *infop&quot;</span>, <span class="hljs-string">&quot;int options&quot;</span>, <span class="hljs-string">&quot;struct rusage *r&quot;</span>],<br>    [96, <span class="hljs-string">&quot;set_tid_address&quot;</span>, 0x60, <span class="hljs-string">&quot;int *tidptr&quot;</span>],<br>    [97, <span class="hljs-string">&quot;unshare&quot;</span>, 0x61, <span class="hljs-string">&quot;unsigned long unshare_flags&quot;</span>],<br>    [98, <span class="hljs-string">&quot;futex&quot;</span>, 0x62, <span class="hljs-string">&quot;u32 *uaddr&quot;</span>, <span class="hljs-string">&quot;int op&quot;</span>, <span class="hljs-string">&quot;u32 val&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *utime&quot;</span>, <span class="hljs-string">&quot;u32 *uaddr2&quot;</span>, <span class="hljs-string">&quot;u32 val3[&quot;</span>],<br>    [99, <span class="hljs-string">&quot;set_robust_list&quot;</span>, 0x63, <span class="hljs-string">&quot;struct robust_list_head *head&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [100, <span class="hljs-string">&quot;get_robust_list&quot;</span>, 0x64, <span class="hljs-string">&quot;int pid&quot;</span>, <span class="hljs-string">&quot;struct robust_list_head * *head_ptr&quot;</span>, <span class="hljs-string">&quot;size_t *len_ptr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [101, <span class="hljs-string">&quot;nanosleep&quot;</span>, 0x65, <span class="hljs-string">&quot;struct __kernel_timespec *rqtp&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *rmtp&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [102, <span class="hljs-string">&quot;getitimer&quot;</span>, 0x66, <span class="hljs-string">&quot;int which&quot;</span>, <span class="hljs-string">&quot;struct itimerval *value&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [103, <span class="hljs-string">&quot;setitimer&quot;</span>, 0x67, <span class="hljs-string">&quot;int which&quot;</span>, <span class="hljs-string">&quot;struct itimerval *value&quot;</span>, <span class="hljs-string">&quot;struct itimerval *ovalue&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [104, <span class="hljs-string">&quot;kexec_load&quot;</span>, 0x68, <span class="hljs-string">&quot;unsigned long entry&quot;</span>, <span class="hljs-string">&quot;unsigned long nr_segments&quot;</span>, <span class="hljs-string">&quot;struct kexec_segment *segments&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [105, <span class="hljs-string">&quot;init_module&quot;</span>, 0x69, <span class="hljs-string">&quot;void *umod&quot;</span>, <span class="hljs-string">&quot;unsigned long len&quot;</span>, <span class="hljs-string">&quot;const char *uargs&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [106, <span class="hljs-string">&quot;delete_module&quot;</span>, 0x6a, <span class="hljs-string">&quot;const char *name_user&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [107, <span class="hljs-string">&quot;timer_create&quot;</span>, 0x6b, <span class="hljs-string">&quot;clockid_t which_clock&quot;</span>, <span class="hljs-string">&quot;struct sigevent *timer_event_spec&quot;</span>, <span class="hljs-string">&quot;timer_t * created_timer_id&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [108, <span class="hljs-string">&quot;timer_gettime&quot;</span>, 0x6c, <span class="hljs-string">&quot;timer_t timer_id&quot;</span>, <span class="hljs-string">&quot;struct __kernel_itimerspec *setting&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [109, <span class="hljs-string">&quot;timer_getoverrun&quot;</span>, 0x6d, <span class="hljs-string">&quot;timer_t timer_id&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [110, <span class="hljs-string">&quot;timer_settime&quot;</span>, 0x6e, <span class="hljs-string">&quot;timer_t timer_id&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_itimerspec *new_setting&quot;</span>, <span class="hljs-string">&quot;struct __kernel_itimerspec *old_setting&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [111, <span class="hljs-string">&quot;timer_delete&quot;</span>, 0x6f, <span class="hljs-string">&quot;timer_t timer_id&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [112, <span class="hljs-string">&quot;clock_settime&quot;</span>, 0x70, <span class="hljs-string">&quot;clockid_t which_clock&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_timespec *tp&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [113, <span class="hljs-string">&quot;clock_gettime&quot;</span>, 0x71, <span class="hljs-string">&quot;clockid_t which_clock&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *tp&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [114, <span class="hljs-string">&quot;clock_getres&quot;</span>, 0x72, <span class="hljs-string">&quot;clockid_t which_clock&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *tp&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [115, <span class="hljs-string">&quot;clock_nanosleep&quot;</span>, 0x73, <span class="hljs-string">&quot;clockid_t which_clock&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_timespec *rqtp&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *rmtp&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [116, <span class="hljs-string">&quot;syslog&quot;</span>, 0x74, <span class="hljs-string">&quot;int type&quot;</span>, <span class="hljs-string">&quot;char *buf&quot;</span>, <span class="hljs-string">&quot;int len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [117, <span class="hljs-string">&quot;ptrace&quot;</span>, 0x75, <span class="hljs-string">&quot;long request&quot;</span>, <span class="hljs-string">&quot;long pid&quot;</span>, <span class="hljs-string">&quot;unsigned long addr&quot;</span>, <span class="hljs-string">&quot;unsigned long data&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [118, <span class="hljs-string">&quot;sched_setparam&quot;</span>, 0x76, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;struct sched_param *param&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [119, <span class="hljs-string">&quot;sched_setscheduler&quot;</span>, 0x77, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int policy&quot;</span>, <span class="hljs-string">&quot;struct sched_param *param&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [120, <span class="hljs-string">&quot;sched_getscheduler&quot;</span>, 0x78, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [121, <span class="hljs-string">&quot;sched_getparam&quot;</span>, 0x79, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;struct sched_param *param&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [122, <span class="hljs-string">&quot;sched_setaffinity&quot;</span>, 0x7a, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;unsigned int len&quot;</span>, <span class="hljs-string">&quot;unsigned long *user_mask_ptr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [123, <span class="hljs-string">&quot;sched_getaffinity&quot;</span>, 0x7b, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;unsigned int len&quot;</span>, <span class="hljs-string">&quot;unsigned long *user_mask_ptr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [124, <span class="hljs-string">&quot;sched_yield&quot;</span>, 0x7c, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [125, <span class="hljs-string">&quot;sched_get_priority_max&quot;</span>, 0x7d, <span class="hljs-string">&quot;int policy&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [126, <span class="hljs-string">&quot;sched_get_priority_min&quot;</span>, 0x7e, <span class="hljs-string">&quot;int policy&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [127, <span class="hljs-string">&quot;sched_rr_get_interval&quot;</span>, 0x7f, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *interval&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [128, <span class="hljs-string">&quot;restart_syscall&quot;</span>, 0x80, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [129, <span class="hljs-string">&quot;kill&quot;</span>, 0x81, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int sig&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [130, <span class="hljs-string">&quot;tkill&quot;</span>, 0x82, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int sig&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [131, <span class="hljs-string">&quot;tgkill&quot;</span>, 0x83, <span class="hljs-string">&quot;pid_t tgid&quot;</span>, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int sig&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [132, <span class="hljs-string">&quot;sigaltstack&quot;</span>, 0x84, <span class="hljs-string">&quot;const struct sigaltstack *uss&quot;</span>, <span class="hljs-string">&quot;struct sigaltstack *uoss&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [133, <span class="hljs-string">&quot;rt_sigsuspend&quot;</span>, 0x85, <span class="hljs-string">&quot;sigset_t *unewset&quot;</span>, <span class="hljs-string">&quot;size_t sigsetsize&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [134, <span class="hljs-string">&quot;rt_sigaction&quot;</span>, 0x86, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;const struct sigaction *&quot;</span>, <span class="hljs-string">&quot;struct sigaction *&quot;</span>, <span class="hljs-string">&quot;size_t&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [135, <span class="hljs-string">&quot;rt_sigprocmask&quot;</span>, 0x87, <span class="hljs-string">&quot;int how&quot;</span>, <span class="hljs-string">&quot;sigset_t *set&quot;</span>, <span class="hljs-string">&quot;sigset_t *oset&quot;</span>, <span class="hljs-string">&quot;size_t sigsetsize&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [136, <span class="hljs-string">&quot;rt_sigpending&quot;</span>, 0x88, <span class="hljs-string">&quot;sigset_t *set&quot;</span>, <span class="hljs-string">&quot;size_t sigsetsize&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [137, <span class="hljs-string">&quot;rt_sigtimedwait&quot;</span>, 0x89, <span class="hljs-string">&quot;const sigset_t *uthese&quot;</span>, <span class="hljs-string">&quot;siginfo_t *uinfo&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_timespec *uts&quot;</span>, <span class="hljs-string">&quot;size_t sigsetsize&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [138, <span class="hljs-string">&quot;rt_sigqueueinfo&quot;</span>, 0x8a, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int sig&quot;</span>, <span class="hljs-string">&quot;siginfo_t *uinfo&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [139, <span class="hljs-string">&quot;rt_sigreturn&quot;</span>, 0x8b, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>],<br>    [140, <span class="hljs-string">&quot;setpriority&quot;</span>, 0x8c, <span class="hljs-string">&quot;int which&quot;</span>, <span class="hljs-string">&quot;int who&quot;</span>, <span class="hljs-string">&quot;int niceval&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [141, <span class="hljs-string">&quot;getpriority&quot;</span>, 0x8d, <span class="hljs-string">&quot;int which&quot;</span>, <span class="hljs-string">&quot;int who&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [142, <span class="hljs-string">&quot;reboot&quot;</span>, 0x8e, <span class="hljs-string">&quot;int magic1&quot;</span>, <span class="hljs-string">&quot;int magic2&quot;</span>, <span class="hljs-string">&quot;unsigned int cmd&quot;</span>, <span class="hljs-string">&quot;void *arg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [143, <span class="hljs-string">&quot;setregid&quot;</span>, 0x8f, <span class="hljs-string">&quot;gid_t rgid&quot;</span>, <span class="hljs-string">&quot;gid_t egid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [144, <span class="hljs-string">&quot;setgid&quot;</span>, 0x90, <span class="hljs-string">&quot;gid_t gid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [145, <span class="hljs-string">&quot;setreuid&quot;</span>, 0x91, <span class="hljs-string">&quot;uid_t ruid&quot;</span>, <span class="hljs-string">&quot;uid_t euid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [146, <span class="hljs-string">&quot;setuid&quot;</span>, 0x92, <span class="hljs-string">&quot;uid_t uid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [147, <span class="hljs-string">&quot;setresuid&quot;</span>, 0x93, <span class="hljs-string">&quot;uid_t ruid&quot;</span>, <span class="hljs-string">&quot;uid_t euid&quot;</span>, <span class="hljs-string">&quot;uid_t suid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [148, <span class="hljs-string">&quot;getresuid&quot;</span>, 0x94, <span class="hljs-string">&quot;uid_t *ruid&quot;</span>, <span class="hljs-string">&quot;uid_t *euid&quot;</span>, <span class="hljs-string">&quot;uid_t *suid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [149, <span class="hljs-string">&quot;setresgid&quot;</span>, 0x95, <span class="hljs-string">&quot;gid_t rgid&quot;</span>, <span class="hljs-string">&quot;gid_t egid&quot;</span>, <span class="hljs-string">&quot;gid_t sgid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [150, <span class="hljs-string">&quot;getresgid&quot;</span>, 0x96, <span class="hljs-string">&quot;gid_t *rgid&quot;</span>, <span class="hljs-string">&quot;gid_t *egid&quot;</span>, <span class="hljs-string">&quot;gid_t *sgid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [151, <span class="hljs-string">&quot;setfsuid&quot;</span>, 0x97, <span class="hljs-string">&quot;uid_t uid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [152, <span class="hljs-string">&quot;setfsgid&quot;</span>, 0x98, <span class="hljs-string">&quot;gid_t gid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [153, <span class="hljs-string">&quot;times&quot;</span>, 0x99, <span class="hljs-string">&quot;struct tms *tbuf&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [154, <span class="hljs-string">&quot;setpgid&quot;</span>, 0x9a, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;pid_t pgid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [155, <span class="hljs-string">&quot;getpgid&quot;</span>, 0x9b, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [156, <span class="hljs-string">&quot;getsid&quot;</span>, 0x9c, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [157, <span class="hljs-string">&quot;setsid&quot;</span>, 0x9d, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [158, <span class="hljs-string">&quot;getgroups&quot;</span>, 0x9e, <span class="hljs-string">&quot;int gidsetsize&quot;</span>, <span class="hljs-string">&quot;gid_t *grouplist&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [159, <span class="hljs-string">&quot;setgroups&quot;</span>, 0x9f, <span class="hljs-string">&quot;int gidsetsize&quot;</span>, <span class="hljs-string">&quot;gid_t *grouplist&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [160, <span class="hljs-string">&quot;uname&quot;</span>, 0xa0, <span class="hljs-string">&quot;struct old_utsname *&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [161, <span class="hljs-string">&quot;sethostname&quot;</span>, 0xa1, <span class="hljs-string">&quot;char *name&quot;</span>, <span class="hljs-string">&quot;int len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [162, <span class="hljs-string">&quot;setdomainname&quot;</span>, 0xa2, <span class="hljs-string">&quot;char *name&quot;</span>, <span class="hljs-string">&quot;int len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [163, <span class="hljs-string">&quot;getrlimit&quot;</span>, 0xa3, <span class="hljs-string">&quot;unsigned int resource&quot;</span>, <span class="hljs-string">&quot;struct rlimit *rlim&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [164, <span class="hljs-string">&quot;setrlimit&quot;</span>, 0xa4, <span class="hljs-string">&quot;unsigned int resource&quot;</span>, <span class="hljs-string">&quot;struct rlimit *rlim&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [165, <span class="hljs-string">&quot;getrusage&quot;</span>, 0xa5, <span class="hljs-string">&quot;int who&quot;</span>, <span class="hljs-string">&quot;struct rusage *ru&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [166, <span class="hljs-string">&quot;umask&quot;</span>, 0xa6, <span class="hljs-string">&quot;int mask&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [167, <span class="hljs-string">&quot;prctl&quot;</span>, 0xa7, <span class="hljs-string">&quot;int option&quot;</span>, <span class="hljs-string">&quot;unsigned long arg2&quot;</span>, <span class="hljs-string">&quot;unsigned long arg3&quot;</span>, <span class="hljs-string">&quot;unsigned long arg4&quot;</span>, <span class="hljs-string">&quot;unsigned long arg5&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [168, <span class="hljs-string">&quot;getcpu&quot;</span>, 0xa8, <span class="hljs-string">&quot;unsigned *cpu&quot;</span>, <span class="hljs-string">&quot;unsigned *node&quot;</span>, <span class="hljs-string">&quot;struct getcpu_cache *cache&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [169, <span class="hljs-string">&quot;gettimeofday&quot;</span>, 0xa9, <span class="hljs-string">&quot;struct timeval *tv&quot;</span>, <span class="hljs-string">&quot;struct timezone *tz&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [170, <span class="hljs-string">&quot;settimeofday&quot;</span>, 0xaa, <span class="hljs-string">&quot;struct timeval *tv&quot;</span>, <span class="hljs-string">&quot;struct timezone *tz&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [171, <span class="hljs-string">&quot;adjtimex&quot;</span>, 0xab, <span class="hljs-string">&quot;struct __kernel_timex *txc_p&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [172, <span class="hljs-string">&quot;getpid&quot;</span>, 0xac, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [173, <span class="hljs-string">&quot;getppid&quot;</span>, 0xad, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [174, <span class="hljs-string">&quot;getuid&quot;</span>, 0xae, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [175, <span class="hljs-string">&quot;geteuid&quot;</span>, 0xaf, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [176, <span class="hljs-string">&quot;getgid&quot;</span>, 0xb0, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [177, <span class="hljs-string">&quot;getegid&quot;</span>, 0xb1, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [178, <span class="hljs-string">&quot;gettid&quot;</span>, 0xb2, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [179, <span class="hljs-string">&quot;sysinfo&quot;</span>, 0xb3, <span class="hljs-string">&quot;struct sysinfo *info&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [180, <span class="hljs-string">&quot;mq_open&quot;</span>, 0xb4, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;int oflag&quot;</span>, <span class="hljs-string">&quot;umode_t mode&quot;</span>, <span class="hljs-string">&quot;struct mq_attr *attr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [181, <span class="hljs-string">&quot;mq_unlink&quot;</span>, 0xb5, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [182, <span class="hljs-string">&quot;mq_timedsend&quot;</span>, 0xb6, <span class="hljs-string">&quot;mqd_t mqdes&quot;</span>, <span class="hljs-string">&quot;const char *msg_ptr&quot;</span>, <span class="hljs-string">&quot;size_t msg_len&quot;</span>, <span class="hljs-string">&quot;unsigned int msg_prio&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_timespec *abs_timeout&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [183, <span class="hljs-string">&quot;mq_timedreceive&quot;</span>, 0xb7, <span class="hljs-string">&quot;mqd_t mqdes&quot;</span>, <span class="hljs-string">&quot;char *msg_ptr&quot;</span>, <span class="hljs-string">&quot;size_t msg_len&quot;</span>, <span class="hljs-string">&quot;unsigned int *msg_prio&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_timespec *abs_timeout&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [184, <span class="hljs-string">&quot;mq_notify&quot;</span>, 0xb8, <span class="hljs-string">&quot;mqd_t mqdes&quot;</span>, <span class="hljs-string">&quot;const struct sigevent *notification&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [185, <span class="hljs-string">&quot;mq_getsetattr&quot;</span>, 0xb9, <span class="hljs-string">&quot;mqd_t mqdes&quot;</span>, <span class="hljs-string">&quot;const struct mq_attr *mqstat&quot;</span>, <span class="hljs-string">&quot;struct mq_attr *omqstat&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [186, <span class="hljs-string">&quot;msgget&quot;</span>, 0xba, <span class="hljs-string">&quot;key_t key&quot;</span>, <span class="hljs-string">&quot;int msgflg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [187, <span class="hljs-string">&quot;msgctl&quot;</span>, 0xbb, <span class="hljs-string">&quot;int msqid&quot;</span>, <span class="hljs-string">&quot;int cmd&quot;</span>, <span class="hljs-string">&quot;struct msqid_ds *buf&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [188, <span class="hljs-string">&quot;msgrcv&quot;</span>, 0xbc, <span class="hljs-string">&quot;int msqid&quot;</span>, <span class="hljs-string">&quot;struct msgbuf *msgp&quot;</span>, <span class="hljs-string">&quot;size_t msgsz&quot;</span>, <span class="hljs-string">&quot;long msgtyp&quot;</span>, <span class="hljs-string">&quot;int msgflg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [189, <span class="hljs-string">&quot;msgsnd&quot;</span>, 0xbd, <span class="hljs-string">&quot;int msqid&quot;</span>, <span class="hljs-string">&quot;struct msgbuf *msgp&quot;</span>, <span class="hljs-string">&quot;size_t msgsz&quot;</span>, <span class="hljs-string">&quot;int msgflg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [190, <span class="hljs-string">&quot;semget&quot;</span>, 0xbe, <span class="hljs-string">&quot;key_t key&quot;</span>, <span class="hljs-string">&quot;int nsems&quot;</span>, <span class="hljs-string">&quot;int semflg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [191, <span class="hljs-string">&quot;semctl&quot;</span>, 0xbf, <span class="hljs-string">&quot;int semid&quot;</span>, <span class="hljs-string">&quot;int semnum&quot;</span>, <span class="hljs-string">&quot;int cmd&quot;</span>, <span class="hljs-string">&quot;unsigned long arg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [192, <span class="hljs-string">&quot;semtimedop&quot;</span>, 0xc0, <span class="hljs-string">&quot;int semid&quot;</span>, <span class="hljs-string">&quot;struct sembuf *sops&quot;</span>, <span class="hljs-string">&quot;unsigned nsops&quot;</span>, <span class="hljs-string">&quot;const struct __kernel_timespec *timeout&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [193, <span class="hljs-string">&quot;semop&quot;</span>, 0xc1, <span class="hljs-string">&quot;int semid&quot;</span>, <span class="hljs-string">&quot;struct sembuf *sops&quot;</span>, <span class="hljs-string">&quot;unsigned nsops&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [194, <span class="hljs-string">&quot;shmget&quot;</span>, 0xc2, <span class="hljs-string">&quot;key_t key&quot;</span>, <span class="hljs-string">&quot;size_t size&quot;</span>, <span class="hljs-string">&quot;int flag&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [195, <span class="hljs-string">&quot;shmctl&quot;</span>, 0xc3, <span class="hljs-string">&quot;int shmid&quot;</span>, <span class="hljs-string">&quot;int cmd&quot;</span>, <span class="hljs-string">&quot;struct shmid_ds *buf&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [196, <span class="hljs-string">&quot;shmat&quot;</span>, 0xc4, <span class="hljs-string">&quot;int shmid&quot;</span>, <span class="hljs-string">&quot;char *shmaddr&quot;</span>, <span class="hljs-string">&quot;int shmflg&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [197, <span class="hljs-string">&quot;shmdt&quot;</span>, 0xc5, <span class="hljs-string">&quot;char *shmaddr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [198, <span class="hljs-string">&quot;socket&quot;</span>, 0xc6, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [199, <span class="hljs-string">&quot;socketpair&quot;</span>, 0xc7, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [200, <span class="hljs-string">&quot;bind&quot;</span>, 0xc8, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [201, <span class="hljs-string">&quot;listen&quot;</span>, 0xc9, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [202, <span class="hljs-string">&quot;accept&quot;</span>, 0xca, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [203, <span class="hljs-string">&quot;connect&quot;</span>, 0xcb, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [204, <span class="hljs-string">&quot;getsockname&quot;</span>, 0xcc, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [205, <span class="hljs-string">&quot;getpeername&quot;</span>, 0xcd, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [206, <span class="hljs-string">&quot;sendto&quot;</span>, 0xce, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;void *&quot;</span>, <span class="hljs-string">&quot;size_t&quot;</span>, <span class="hljs-string">&quot;unsigned&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>],<br>    [207, <span class="hljs-string">&quot;recvfrom&quot;</span>, 0xcf, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;void *&quot;</span>, <span class="hljs-string">&quot;size_t&quot;</span>, <span class="hljs-string">&quot;unsigned&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>],<br>    [208, <span class="hljs-string">&quot;setsockopt&quot;</span>, 0xd0, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;int level&quot;</span>, <span class="hljs-string">&quot;int optname&quot;</span>, <span class="hljs-string">&quot;char *optval&quot;</span>, <span class="hljs-string">&quot;int optlen&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [209, <span class="hljs-string">&quot;getsockopt&quot;</span>, 0xd1, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;int level&quot;</span>, <span class="hljs-string">&quot;int optname&quot;</span>, <span class="hljs-string">&quot;char *optval&quot;</span>, <span class="hljs-string">&quot;int *optlen&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [210, <span class="hljs-string">&quot;shutdown&quot;</span>, 0xd2, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [211, <span class="hljs-string">&quot;sendmsg&quot;</span>, 0xd3, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;struct user_msghdr *msg&quot;</span>, <span class="hljs-string">&quot;unsigned flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [212, <span class="hljs-string">&quot;recvmsg&quot;</span>, 0xd4, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;struct user_msghdr *msg&quot;</span>, <span class="hljs-string">&quot;unsigned flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [213, <span class="hljs-string">&quot;readahead&quot;</span>, 0xd5, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;loff_t offset&quot;</span>, <span class="hljs-string">&quot;size_t count&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [214, <span class="hljs-string">&quot;brk&quot;</span>, 0xd6, <span class="hljs-string">&quot;unsigned long brk&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [215, <span class="hljs-string">&quot;munmap&quot;</span>, 0xd7, <span class="hljs-string">&quot;unsigned long addr&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [216, <span class="hljs-string">&quot;mremap&quot;</span>, 0xd8, <span class="hljs-string">&quot;unsigned long addr&quot;</span>, <span class="hljs-string">&quot;unsigned long old_len&quot;</span>, <span class="hljs-string">&quot;unsigned long new_len&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>, <span class="hljs-string">&quot;unsigned long new_addr&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [217, <span class="hljs-string">&quot;add_key&quot;</span>, 0xd9, <span class="hljs-string">&quot;const char *_type&quot;</span>, <span class="hljs-string">&quot;const char *_description&quot;</span>, <span class="hljs-string">&quot;const void *_payload&quot;</span>, <span class="hljs-string">&quot;size_t plen&quot;</span>, <span class="hljs-string">&quot;key_serial_t destringid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [218, <span class="hljs-string">&quot;request_key&quot;</span>, 0xda, <span class="hljs-string">&quot;const char *_type&quot;</span>, <span class="hljs-string">&quot;const char *_description&quot;</span>, <span class="hljs-string">&quot;const char *_callout_info&quot;</span>, <span class="hljs-string">&quot;key_serial_t destringid&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [219, <span class="hljs-string">&quot;keyctl&quot;</span>, 0xdb, <span class="hljs-string">&quot;int cmd&quot;</span>, <span class="hljs-string">&quot;unsigned long arg2&quot;</span>, <span class="hljs-string">&quot;unsigned long arg3&quot;</span>, <span class="hljs-string">&quot;unsigned long arg4&quot;</span>, <span class="hljs-string">&quot;unsigned long arg5&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [220, <span class="hljs-string">&quot;clone&quot;</span>, 0xdc, <span class="hljs-string">&quot;unsigned long&quot;</span>, <span class="hljs-string">&quot;unsigned long&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>, <span class="hljs-string">&quot;unsigned long&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [221, <span class="hljs-string">&quot;execve&quot;</span>, 0xdd, <span class="hljs-string">&quot;const char *filename&quot;</span>, <span class="hljs-string">&quot;const char *const *argv&quot;</span>, <span class="hljs-string">&quot;const char *const *envp&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [222, <span class="hljs-string">&quot;mmap&quot;</span>, 0xde, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>],<br>    [223, <span class="hljs-string">&quot;fadvise64&quot;</span>, 0xdf, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;loff_t offset&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;int advice&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [224, <span class="hljs-string">&quot;swapon&quot;</span>, 0xe0, <span class="hljs-string">&quot;const char *specialfile&quot;</span>, <span class="hljs-string">&quot;int swap_flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [225, <span class="hljs-string">&quot;swapoff&quot;</span>, 0xe1, <span class="hljs-string">&quot;const char *specialfile&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [226, <span class="hljs-string">&quot;mprotect&quot;</span>, 0xe2, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;unsigned long prot&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [227, <span class="hljs-string">&quot;msync&quot;</span>, 0xe3, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [228, <span class="hljs-string">&quot;mlock&quot;</span>, 0xe4, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [229, <span class="hljs-string">&quot;munlock&quot;</span>, 0xe5, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [230, <span class="hljs-string">&quot;mlockall&quot;</span>, 0xe6, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [231, <span class="hljs-string">&quot;munlockall&quot;</span>, 0xe7, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [232, <span class="hljs-string">&quot;mincore&quot;</span>, 0xe8, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;unsigned char * vec&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [233, <span class="hljs-string">&quot;madvise&quot;</span>, 0xe9, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;int behavior&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [234, <span class="hljs-string">&quot;remap_file_pages&quot;</span>, 0xea, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;unsigned long size&quot;</span>, <span class="hljs-string">&quot;unsigned long prot&quot;</span>, <span class="hljs-string">&quot;unsigned long pgoff&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [235, <span class="hljs-string">&quot;mbind&quot;</span>, 0xeb, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;unsigned long len&quot;</span>, <span class="hljs-string">&quot;unsigned long mode&quot;</span>, <span class="hljs-string">&quot;const unsigned long *nmask&quot;</span>, <span class="hljs-string">&quot;unsigned long maxnode&quot;</span>, <span class="hljs-string">&quot;unsigned flags&quot;</span>],<br>    [236, <span class="hljs-string">&quot;get_mempolicy&quot;</span>, 0xec, <span class="hljs-string">&quot;int *policy&quot;</span>, <span class="hljs-string">&quot;unsigned long *nmask&quot;</span>, <span class="hljs-string">&quot;unsigned long maxnode&quot;</span>, <span class="hljs-string">&quot;unsigned long addr&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [237, <span class="hljs-string">&quot;set_mempolicy&quot;</span>, 0xed, <span class="hljs-string">&quot;int mode&quot;</span>, <span class="hljs-string">&quot;const unsigned long *nmask&quot;</span>, <span class="hljs-string">&quot;unsigned long maxnode&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [238, <span class="hljs-string">&quot;migrate_pages&quot;</span>, 0xee, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;unsigned long maxnode&quot;</span>, <span class="hljs-string">&quot;const unsigned long *from&quot;</span>, <span class="hljs-string">&quot;const unsigned long *to&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [239, <span class="hljs-string">&quot;move_pages&quot;</span>, 0xef, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;unsigned long nr_pages&quot;</span>, <span class="hljs-string">&quot;const void * *pages&quot;</span>, <span class="hljs-string">&quot;const int *nodes&quot;</span>, <span class="hljs-string">&quot;int *status&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>],<br>    [240, <span class="hljs-string">&quot;rt_tgsigqueueinfo&quot;</span>, 0xf0, <span class="hljs-string">&quot;pid_t tgid&quot;</span>, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int sig&quot;</span>, <span class="hljs-string">&quot;siginfo_t *uinfo&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [241, <span class="hljs-string">&quot;perf_event_open&quot;</span>, 0xf1, <span class="hljs-string">&quot;struct perf_event_attr *attr_uptr&quot;</span>, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int cpu&quot;</span>, <span class="hljs-string">&quot;int group_fd&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [242, <span class="hljs-string">&quot;accept4&quot;</span>, 0xf2, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;struct sockaddr *&quot;</span>, <span class="hljs-string">&quot;int *&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [243, <span class="hljs-string">&quot;recvmmsg&quot;</span>, 0xf3, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;struct mmsghdr *msg&quot;</span>, <span class="hljs-string">&quot;unsigned int vlen&quot;</span>, <span class="hljs-string">&quot;unsigned flags&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timespec *timeout&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [244, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xf4],<br>    [245, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xf5],<br>    [246, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xf6],<br>    [247, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xf7],<br>    [248, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xf8],<br>    [249, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xf9],<br>    [250, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xfa],<br>    [251, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xfb],<br>    [252, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xfc],<br>    [253, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xfd],<br>    [254, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xfe],<br>    [255, <span class="hljs-string">&quot;not implemented&quot;</span>, 0xff],<br>    [256, <span class="hljs-string">&quot;not implemented&quot;</span>, 0x100],<br>    [257, <span class="hljs-string">&quot;not implemented&quot;</span>, 0x101],<br>    [258, <span class="hljs-string">&quot;not implemented&quot;</span>, 0x102],<br>    [259, <span class="hljs-string">&quot;not implemented&quot;</span>, 0x103],<br>    [260, <span class="hljs-string">&quot;wait4&quot;</span>, 0x104, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;int *stat_addr&quot;</span>, <span class="hljs-string">&quot;int options&quot;</span>, <span class="hljs-string">&quot;struct rusage *ru&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [261, <span class="hljs-string">&quot;prlimit64&quot;</span>, 0x105, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;unsigned int resource&quot;</span>, <span class="hljs-string">&quot;const struct rlimit64 *new_rlim&quot;</span>, <span class="hljs-string">&quot;struct rlimit64 *old_rlim&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [262, <span class="hljs-string">&quot;fanotify_init&quot;</span>, 0x106, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;unsigned int event_f_flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [263, <span class="hljs-string">&quot;fanotify_mark&quot;</span>, 0x107, <span class="hljs-string">&quot;int fanotify_fd&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;u64 mask&quot;</span>, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;const char *pathname&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [264, <span class="hljs-string">&quot;name_to_handle_at&quot;</span>, 0x108, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *name&quot;</span>, <span class="hljs-string">&quot;struct file_handle *handle&quot;</span>, <span class="hljs-string">&quot;int *mnt_id&quot;</span>, <span class="hljs-string">&quot;int flag&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [265, <span class="hljs-string">&quot;open_by_handle_at&quot;</span>, 0x109, <span class="hljs-string">&quot;int mountdirfd&quot;</span>, <span class="hljs-string">&quot;struct file_handle *handle&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [266, <span class="hljs-string">&quot;clock_adjtime&quot;</span>, 0x10a, <span class="hljs-string">&quot;clockid_t which_clock&quot;</span>, <span class="hljs-string">&quot;struct __kernel_timex *tx&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [267, <span class="hljs-string">&quot;syncfs&quot;</span>, 0x10b, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [268, <span class="hljs-string">&quot;setns&quot;</span>, 0x10c, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;int nstype&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [269, <span class="hljs-string">&quot;sendmmsg&quot;</span>, 0x10d, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;struct mmsghdr *msg&quot;</span>, <span class="hljs-string">&quot;unsigned int vlen&quot;</span>, <span class="hljs-string">&quot;unsigned flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [270, <span class="hljs-string">&quot;process_vm_readv&quot;</span>, 0x10e, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;const struct iovec *lvec&quot;</span>, <span class="hljs-string">&quot;unsigned long liovcnt&quot;</span>, <span class="hljs-string">&quot;const struct iovec *rvec&quot;</span>, <span class="hljs-string">&quot;unsigned long riovcnt&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>],<br>    [271, <span class="hljs-string">&quot;process_vm_writev&quot;</span>, 0x10f, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;const struct iovec *lvec&quot;</span>, <span class="hljs-string">&quot;unsigned long liovcnt&quot;</span>, <span class="hljs-string">&quot;const struct iovec *rvec&quot;</span>, <span class="hljs-string">&quot;unsigned long riovcnt&quot;</span>, <span class="hljs-string">&quot;unsigned long flags&quot;</span>],<br>    [272, <span class="hljs-string">&quot;kcmp&quot;</span>, 0x110, <span class="hljs-string">&quot;pid_t pid1&quot;</span>, <span class="hljs-string">&quot;pid_t pid2&quot;</span>, <span class="hljs-string">&quot;int type&quot;</span>, <span class="hljs-string">&quot;unsigned long idx1&quot;</span>, <span class="hljs-string">&quot;unsigned long idx2&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [273, <span class="hljs-string">&quot;finit_module&quot;</span>, 0x111, <span class="hljs-string">&quot;int fd&quot;</span>, <span class="hljs-string">&quot;const char *uargs&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [274, <span class="hljs-string">&quot;sched_setattr&quot;</span>, 0x112, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;struct sched_attr *attr&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [275, <span class="hljs-string">&quot;sched_getattr&quot;</span>, 0x113, <span class="hljs-string">&quot;pid_t pid&quot;</span>, <span class="hljs-string">&quot;struct sched_attr *attr&quot;</span>, <span class="hljs-string">&quot;unsigned int size&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [276, <span class="hljs-string">&quot;renameat2&quot;</span>, 0x114, <span class="hljs-string">&quot;int olddfd&quot;</span>, <span class="hljs-string">&quot;const char *oldname&quot;</span>, <span class="hljs-string">&quot;int newdfd&quot;</span>, <span class="hljs-string">&quot;const char *newname&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [277, <span class="hljs-string">&quot;seccomp&quot;</span>, 0x115, <span class="hljs-string">&quot;unsigned int op&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;void *uargs&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [278, <span class="hljs-string">&quot;getrandom&quot;</span>, 0x116, <span class="hljs-string">&quot;char *buf&quot;</span>, <span class="hljs-string">&quot;size_t count&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [279, <span class="hljs-string">&quot;memfd_create&quot;</span>, 0x117, <span class="hljs-string">&quot;const char *uname_ptr&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [280, <span class="hljs-string">&quot;bpf&quot;</span>, 0x118, <span class="hljs-string">&quot;int cmd&quot;</span>, <span class="hljs-string">&quot;union bpf_attr *attr&quot;</span>, <span class="hljs-string">&quot;unsigned int size&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [281, <span class="hljs-string">&quot;execveat&quot;</span>, 0x119, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *filename&quot;</span>, <span class="hljs-string">&quot;const char *const *argv&quot;</span>, <span class="hljs-string">&quot;const char *const *envp&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [282, <span class="hljs-string">&quot;userfaultfd&quot;</span>, 0x11a, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [283, <span class="hljs-string">&quot;membarrier&quot;</span>, 0x11b, <span class="hljs-string">&quot;int cmd&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [284, <span class="hljs-string">&quot;mlock2&quot;</span>, 0x11c, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;int flags&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [285, <span class="hljs-string">&quot;copy_file_range&quot;</span>, 0x11d, <span class="hljs-string">&quot;int fd_in&quot;</span>, <span class="hljs-string">&quot;loff_t *off_in&quot;</span>, <span class="hljs-string">&quot;int fd_out&quot;</span>, <span class="hljs-string">&quot;loff_t *off_out&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;unsigned int flags&quot;</span>],<br>    [286, <span class="hljs-string">&quot;preadv2&quot;</span>, 0x11e, <span class="hljs-string">&quot;unsigned long fd&quot;</span>, <span class="hljs-string">&quot;const struct iovec *vec&quot;</span>, <span class="hljs-string">&quot;unsigned long vlen&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_l&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_h&quot;</span>, <span class="hljs-string">&quot;rwf_t flags&quot;</span>],<br>    [287, <span class="hljs-string">&quot;pwritev2&quot;</span>, 0x11f, <span class="hljs-string">&quot;unsigned long fd&quot;</span>, <span class="hljs-string">&quot;const struct iovec *vec&quot;</span>, <span class="hljs-string">&quot;unsigned long vlen&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_l&quot;</span>, <span class="hljs-string">&quot;unsigned long pos_h&quot;</span>, <span class="hljs-string">&quot;rwf_t flags&quot;</span>],<br>    [288, <span class="hljs-string">&quot;pkey_mprotect&quot;</span>, 0x120, <span class="hljs-string">&quot;unsigned long start&quot;</span>, <span class="hljs-string">&quot;size_t len&quot;</span>, <span class="hljs-string">&quot;unsigned long prot&quot;</span>, <span class="hljs-string">&quot;int pkey&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [289, <span class="hljs-string">&quot;pkey_alloc&quot;</span>, 0x121, <span class="hljs-string">&quot;unsigned long flags&quot;</span>, <span class="hljs-string">&quot;unsigned long init_val&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [290, <span class="hljs-string">&quot;pkey_free&quot;</span>, 0x122, <span class="hljs-string">&quot;int pkey&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>],<br>    [291, <span class="hljs-string">&quot;statx&quot;</span>, 0x123, <span class="hljs-string">&quot;int dfd&quot;</span>, <span class="hljs-string">&quot;const char *path&quot;</span>, <span class="hljs-string">&quot;unsigned flags&quot;</span>, <span class="hljs-string">&quot;unsigned mask&quot;</span>, <span class="hljs-string">&quot;struct statx *buffer&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>]<br>];<br><br></code></pre></td></tr></table></figure><h3 id="jniTrace"><a href="#jniTrace" class="headerlink" title="jniTrace"></a>jniTrace</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br></pre></td><td class="code"><pre><code class="hljs bash">(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br><br>    (<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<span class="hljs-keyword">function</span> r(e,n,t)&#123;<span class="hljs-keyword">function</span> o(i,f)&#123;<span class="hljs-keyword">if</span>(!n[i])&#123;<span class="hljs-keyword">if</span>(!e[i])&#123;var c=<span class="hljs-string">&quot;function&quot;</span>==typeof require&amp;&amp;require;<span class="hljs-keyword">if</span>(!f&amp;&amp;c)<span class="hljs-built_in">return</span> c(i,!0);<span class="hljs-keyword">if</span>(u)<span class="hljs-built_in">return</span> u(i,!0);var a=new Error(<span class="hljs-string">&quot;Cannot find module &#x27;&quot;</span>+i+<span class="hljs-string">&quot;&#x27;&quot;</span>);throw a.code=<span class="hljs-string">&quot;MODULE_NOT_FOUND&quot;</span>,a&#125;var p=n[i]=&#123;exports:&#123;&#125;&#125;;e[i][0].call(p.exports,<span class="hljs-keyword">function</span>(r)&#123;var n=e[i][1][r];<span class="hljs-built_in">return</span> o(n||r)&#125;,p,p.exports,r,e,n,t)&#125;<span class="hljs-built_in">return</span> n[i].exports&#125;<span class="hljs-keyword">for</span>(var u=<span class="hljs-string">&quot;function&quot;</span>==typeof require&amp;&amp;require,i=0;i&lt;t.length;i++)o(t[i]);<span class="hljs-built_in">return</span> o&#125;<span class="hljs-built_in">return</span> r&#125;)()(&#123;1:[<span class="hljs-keyword">function</span>(require,module,exports)&#123;<br>            const jni = require(<span class="hljs-string">&quot;./utils/jni_struct.js&quot;</span>)<br><br>            var library_name = <span class="hljs-string">&quot;%moduleName%&quot;</span> // ex: libsqlite.so<br>            var function_name = <span class="hljs-string">&quot;%methodName%&quot;</span> // ex: JNI_OnLoad<br>            var library_loaded = 0<br><br>            <span class="hljs-keyword">function</span> klog(data)&#123;<br>                var message=&#123;&#125;;<br>                message[<span class="hljs-string">&quot;jsname&quot;</span>]=<span class="hljs-string">&quot;jni_trace_new&quot;</span>;<br>                message[<span class="hljs-string">&quot;data&quot;</span>]=data;<br>                send(message);<br>            &#125;<br>            <span class="hljs-keyword">function</span> klogData(data,key,value)&#123;<br>                var message=&#123;&#125;;<br>                message[<span class="hljs-string">&quot;jsname&quot;</span>]=<span class="hljs-string">&quot;jni_trace_new&quot;</span>;<br>                message[<span class="hljs-string">&quot;data&quot;</span>]=data;<br>                message[key]=value;<br>                send(message);<br>            &#125;<br><br>// Function that will process the JNICall after calculating it from<br>// the jnienv pointer <span class="hljs-keyword">in</span> args[0]<br>            <span class="hljs-keyword">function</span> hook_jni(library_name, function_name)&#123;<br>                // To get the list of exports<br>                Module.enumerateExportsSync(library_name).forEach(<span class="hljs-keyword">function</span>(symbol)&#123;<br>                    // console.log(symbol.name);<br>                    <span class="hljs-keyword">if</span>(symbol.name == function_name)&#123;<br>                        klog(<span class="hljs-string">&quot;[...] Hooking : &quot;</span> + library_name + <span class="hljs-string">&quot; -&gt; &quot;</span> + function_name + <span class="hljs-string">&quot; at &quot;</span> + symbol.address)<br>                        Interceptor.attach(symbol.address,&#123;<br>                            onEnter: <span class="hljs-keyword">function</span>(args)&#123;<br><br>                                var jnienv_addr = 0x0<br>                                Java.perform(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>                                    jnienv_addr = Java.vm.getEnv().handle.readPointer();<br>                                &#125;);<br><br><br>                                // console.log(<span class="hljs-string">&quot;[+] Hooked successfully, JNIEnv base adress :&quot;</span> + jnienv_addr)<br>                                klog(<span class="hljs-string">&quot;[+] Hooked successfully, JNIEnv base adress :&quot;</span> + jnienv_addr)<br>                                /*<br>                                 Here you can choose <span class="hljs-built_in">which</span> <span class="hljs-keyword">function</span> to hook<br>                                 Either you hook all to have an overview of the <span class="hljs-keyword">function</span> called<br>                                */<br><br>                                jni.hook_all(jnienv_addr)<br><br>                                /*<br>                                Either you hook the one you want by precising what to <span class="hljs-keyword">do</span> with it<br>                                */<br><br>                                Interceptor.attach(jni.getJNIFunctionAdress(jnienv_addr,<span class="hljs-string">&quot;FindClass&quot;</span>),&#123;<br>                                    onEnter: <span class="hljs-keyword">function</span>(args)&#123;<br>                                        klog(<span class="hljs-string">&quot;env-&gt;FindClass(\&quot;&quot;</span> + Memory.readCString(args[1]) + <span class="hljs-string">&quot;\&quot;)&quot;</span>);<br>                                    &#125;<br>                                &#125;)<br>                            &#125;,<br>                            onLeave: <span class="hljs-keyword">function</span>(args)&#123;<br>                                // Prevent from displaying junk from other <span class="hljs-built_in">functions</span><br>                                Interceptor.detachAll()<br>                                klog(<span class="hljs-string">&quot;[-] Detaching all interceptors&quot;</span>)<br>                            &#125;<br>                        &#125;)<br>                    &#125;<br>                &#125;)<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(library_name == <span class="hljs-string">&quot;&quot;</span> || function_name == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                klog(<span class="hljs-string">&quot;[-] You must provide a function name and a library name to hook&quot;</span>)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br><br>                klogData(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;jni_trace_new.js init hook success library_name:&quot;</span>+library_name+<span class="hljs-string">&quot;,function_name:&quot;</span>+function_name);<br><br>// First Step : waiting <span class="hljs-keyword">for</span> the application to load the good library<br>// https://android.googlesource.com/platform/system/core/+/master/libnativeloader/native_loader.cpp<span class="hljs-comment">#746</span><br>//<br>// OpenNativeLibrary is called when you loadLibrary from Java, it <span class="hljs-keyword">then</span> call android_dlopen_ext<br>                var isSpawn=<span class="hljs-string">&quot;%spawn%&quot;</span>;<br>                <span class="hljs-keyword">if</span>(isSpawn)&#123;<br>                    Interceptor.attach(Module.findExportByName(null, <span class="hljs-string">&#x27;android_dlopen_ext&#x27;</span>),&#123;<br>                        onEnter: <span class="hljs-keyword">function</span>(args)&#123;<br>                            // first arg is the path to the library loaded<br>                            var library_path = Memory.readCString(args[0])<br><br>                            <span class="hljs-keyword">if</span>( library_path.includes(library_name))&#123;<br>                                klog(<span class="hljs-string">&quot;[...] Loading library : &quot;</span> + library_path)<br>                                library_loaded = 1<br>                            &#125;<br>                        &#125;,<br>                        onLeave: <span class="hljs-keyword">function</span>(args)&#123;<br><br>                            // <span class="hljs-keyword">if</span> it<span class="hljs-string">&#x27;s the library we want to hook, hooking it</span><br><span class="hljs-string">                            if(library_loaded ==  1)&#123;</span><br><span class="hljs-string">                                klog(&quot;[+] Loaded&quot;)</span><br><span class="hljs-string">                                hook_jni(library_name, function_name)</span><br><span class="hljs-string">                                library_loaded = 0</span><br><span class="hljs-string">                            &#125;</span><br><span class="hljs-string">                        &#125;</span><br><span class="hljs-string">                    &#125;)</span><br><span class="hljs-string">                &#125;else&#123;</span><br><span class="hljs-string">                    hook_jni(library_name, function_name);</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &#125;,&#123;&quot;./utils/jni_struct.js&quot;:2&#125;],2:[function(require,module,exports)&#123;</span><br><span class="hljs-string">// class created from</span><br><span class="hljs-string">// struct JNINativeInterface :</span><br><span class="hljs-string">// https://android.googlesource.com/platform/libnativehelper/+/master/include_jni/jni.h#129</span><br><span class="hljs-string"></span><br><span class="hljs-string">            const jni_struct_array = [</span><br><span class="hljs-string">                &quot;reserved0&quot;,</span><br><span class="hljs-string">                &quot;reserved1&quot;,</span><br><span class="hljs-string">                &quot;reserved2&quot;,</span><br><span class="hljs-string">                &quot;reserved3&quot;,</span><br><span class="hljs-string">                &quot;GetVersion&quot;,</span><br><span class="hljs-string">                &quot;DefineClass&quot;,</span><br><span class="hljs-string">                &quot;FindClass&quot;,</span><br><span class="hljs-string">                &quot;FromReflectedMethod&quot;,</span><br><span class="hljs-string">                &quot;FromReflectedField&quot;,</span><br><span class="hljs-string">                &quot;ToReflectedMethod&quot;,</span><br><span class="hljs-string">                &quot;GetSuperclass&quot;,</span><br><span class="hljs-string">                &quot;IsAssignableFrom&quot;,</span><br><span class="hljs-string">                &quot;ToReflectedField&quot;,</span><br><span class="hljs-string">                &quot;Throw&quot;,</span><br><span class="hljs-string">                &quot;ThrowNew&quot;,</span><br><span class="hljs-string">                &quot;ExceptionOccurred&quot;,</span><br><span class="hljs-string">                &quot;ExceptionDescribe&quot;,</span><br><span class="hljs-string">                &quot;ExceptionClear&quot;,</span><br><span class="hljs-string">                &quot;FatalError&quot;,</span><br><span class="hljs-string">                &quot;PushLocalFrame&quot;,</span><br><span class="hljs-string">                &quot;PopLocalFrame&quot;,</span><br><span class="hljs-string">                &quot;NewGlobalRef&quot;,</span><br><span class="hljs-string">                &quot;DeleteGlobalRef&quot;,</span><br><span class="hljs-string">                &quot;DeleteLocalRef&quot;,</span><br><span class="hljs-string">                &quot;IsSameObject&quot;,</span><br><span class="hljs-string">                &quot;NewLocalRef&quot;,</span><br><span class="hljs-string">                &quot;EnsureLocalCapacity&quot;,</span><br><span class="hljs-string">                &quot;AllocObject&quot;,</span><br><span class="hljs-string">                &quot;NewObject&quot;,</span><br><span class="hljs-string">                &quot;NewObjectV&quot;,</span><br><span class="hljs-string">                &quot;NewObjectA&quot;,</span><br><span class="hljs-string">                &quot;GetObjectClass&quot;,</span><br><span class="hljs-string">                &quot;IsInstanceOf&quot;,</span><br><span class="hljs-string">                &quot;GetMethodID&quot;,</span><br><span class="hljs-string">                &quot;CallObjectMethod&quot;,</span><br><span class="hljs-string">                &quot;CallObjectMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallObjectMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallBooleanMethod&quot;,</span><br><span class="hljs-string">                &quot;CallBooleanMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallBooleanMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallByteMethod&quot;,</span><br><span class="hljs-string">                &quot;CallByteMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallByteMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallCharMethod&quot;,</span><br><span class="hljs-string">                &quot;CallCharMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallCharMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallShortMethod&quot;,</span><br><span class="hljs-string">                &quot;CallShortMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallShortMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallIntMethod&quot;,</span><br><span class="hljs-string">                &quot;CallIntMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallIntMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallLongMethod&quot;,</span><br><span class="hljs-string">                &quot;CallLongMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallLongMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallFloatMethod&quot;,</span><br><span class="hljs-string">                &quot;CallFloatMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallFloatMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallDoubleMethod&quot;,</span><br><span class="hljs-string">                &quot;CallDoubleMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallDoubleMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallVoidMethod&quot;,</span><br><span class="hljs-string">                &quot;CallVoidMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallVoidMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualObjectMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualObjectMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualObjectMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualBooleanMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualBooleanMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualBooleanMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualByteMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualByteMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualByteMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualCharMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualCharMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualCharMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualShortMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualShortMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualShortMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualIntMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualIntMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualIntMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualLongMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualLongMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualLongMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualFloatMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualFloatMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualFloatMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualDoubleMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualDoubleMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualDoubleMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualVoidMethod&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualVoidMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallNonvirtualVoidMethodA&quot;,</span><br><span class="hljs-string">                &quot;GetFieldID&quot;,</span><br><span class="hljs-string">                &quot;GetObjectField&quot;,</span><br><span class="hljs-string">                &quot;GetBooleanField&quot;,</span><br><span class="hljs-string">                &quot;GetByteField&quot;,</span><br><span class="hljs-string">                &quot;GetCharField&quot;,</span><br><span class="hljs-string">                &quot;GetShortField&quot;,</span><br><span class="hljs-string">                &quot;GetIntField&quot;,</span><br><span class="hljs-string">                &quot;GetLongField&quot;,</span><br><span class="hljs-string">                &quot;GetFloatField&quot;,</span><br><span class="hljs-string">                &quot;GetDoubleField&quot;,</span><br><span class="hljs-string">                &quot;SetObjectField&quot;,</span><br><span class="hljs-string">                &quot;SetBooleanField&quot;,</span><br><span class="hljs-string">                &quot;SetByteField&quot;,</span><br><span class="hljs-string">                &quot;SetCharField&quot;,</span><br><span class="hljs-string">                &quot;SetShortField&quot;,</span><br><span class="hljs-string">                &quot;SetIntField&quot;,</span><br><span class="hljs-string">                &quot;SetLongField&quot;,</span><br><span class="hljs-string">                &quot;SetFloatField&quot;,</span><br><span class="hljs-string">                &quot;SetDoubleField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticMethodID&quot;,</span><br><span class="hljs-string">                &quot;CallStaticObjectMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticObjectMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticObjectMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticBooleanMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticBooleanMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticBooleanMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticByteMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticByteMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticByteMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticCharMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticCharMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticCharMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticShortMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticShortMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticShortMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticIntMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticIntMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticIntMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticLongMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticLongMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticLongMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticFloatMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticFloatMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticFloatMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticDoubleMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticDoubleMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticDoubleMethodA&quot;,</span><br><span class="hljs-string">                &quot;CallStaticVoidMethod&quot;,</span><br><span class="hljs-string">                &quot;CallStaticVoidMethodV&quot;,</span><br><span class="hljs-string">                &quot;CallStaticVoidMethodA&quot;,</span><br><span class="hljs-string">                &quot;GetStaticFieldID&quot;,</span><br><span class="hljs-string">                &quot;GetStaticObjectField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticBooleanField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticByteField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticCharField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticShortField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticIntField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticLongField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticFloatField&quot;,</span><br><span class="hljs-string">                &quot;GetStaticDoubleField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticObjectField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticBooleanField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticByteField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticCharField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticShortField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticIntField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticLongField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticFloatField&quot;,</span><br><span class="hljs-string">                &quot;SetStaticDoubleField&quot;,</span><br><span class="hljs-string">                &quot;NewString&quot;,</span><br><span class="hljs-string">                &quot;GetStringLength&quot;,</span><br><span class="hljs-string">                &quot;GetStringChars&quot;,</span><br><span class="hljs-string">                &quot;ReleaseStringChars&quot;,</span><br><span class="hljs-string">                &quot;NewStringUTF&quot;,</span><br><span class="hljs-string">                &quot;GetStringUTFLength&quot;,</span><br><span class="hljs-string">                &quot;GetStringUTFChars&quot;,</span><br><span class="hljs-string">                &quot;ReleaseStringUTFChars&quot;,</span><br><span class="hljs-string">                &quot;GetArrayLength&quot;,</span><br><span class="hljs-string">                &quot;NewObjectArray&quot;,</span><br><span class="hljs-string">                &quot;GetObjectArrayElement&quot;,</span><br><span class="hljs-string">                &quot;SetObjectArrayElement&quot;,</span><br><span class="hljs-string">                &quot;NewBooleanArray&quot;,</span><br><span class="hljs-string">                &quot;NewByteArray&quot;,</span><br><span class="hljs-string">                &quot;NewCharArray&quot;,</span><br><span class="hljs-string">                &quot;NewShortArray&quot;,</span><br><span class="hljs-string">                &quot;NewIntArray&quot;,</span><br><span class="hljs-string">                &quot;NewLongArray&quot;,</span><br><span class="hljs-string">                &quot;NewFloatArray&quot;,</span><br><span class="hljs-string">                &quot;NewDoubleArray&quot;,</span><br><span class="hljs-string">                &quot;GetBooleanArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetByteArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetCharArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetShortArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetIntArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetLongArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetFloatArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetDoubleArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseBooleanArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseByteArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseCharArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseShortArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseIntArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseLongArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseFloatArrayElements&quot;,</span><br><span class="hljs-string">                &quot;ReleaseDoubleArrayElements&quot;,</span><br><span class="hljs-string">                &quot;GetBooleanArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;GetByteArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;GetCharArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;GetShortArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;GetIntArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;GetLongArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;GetFloatArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;GetDoubleArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetBooleanArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetByteArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetCharArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetShortArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetIntArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetLongArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetFloatArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;SetDoubleArrayRegion&quot;,</span><br><span class="hljs-string">                &quot;RegisterNatives&quot;,</span><br><span class="hljs-string">                &quot;UnregisterNatives&quot;,</span><br><span class="hljs-string">                &quot;MonitorEnter&quot;,</span><br><span class="hljs-string">                &quot;MonitorExit&quot;,</span><br><span class="hljs-string">                &quot;GetJavaVM&quot;,</span><br><span class="hljs-string">                &quot;GetStringRegion&quot;,</span><br><span class="hljs-string">                &quot;GetStringUTFRegion&quot;,</span><br><span class="hljs-string">                &quot;GetPrimitiveArrayCritical&quot;,</span><br><span class="hljs-string">                &quot;ReleasePrimitiveArrayCritical&quot;,</span><br><span class="hljs-string">                &quot;GetStringCritical&quot;,</span><br><span class="hljs-string">                &quot;ReleaseStringCritical&quot;,</span><br><span class="hljs-string">                &quot;NewWeakGlobalRef&quot;,</span><br><span class="hljs-string">                &quot;DeleteWeakGlobalRef&quot;,</span><br><span class="hljs-string">                &quot;ExceptionCheck&quot;,</span><br><span class="hljs-string">                &quot;NewDirectByteBuffer&quot;,</span><br><span class="hljs-string">                &quot;GetDirectBufferAddress&quot;,</span><br><span class="hljs-string">                &quot;GetDirectBufferCapacity&quot;,</span><br><span class="hljs-string">                &quot;GetObjectRefType&quot;</span><br><span class="hljs-string">            ]</span><br><span class="hljs-string"></span><br><span class="hljs-string">            /*</span><br><span class="hljs-string">            Calculate the given funcName address from the JNIEnv pointer</span><br><span class="hljs-string">            */</span><br><span class="hljs-string">            function getJNIFunctionAdress(jnienv_addr,func_name)&#123;</span><br><span class="hljs-string">                var offset = jni_struct_array.indexOf(func_name) * Process.pointerSize</span><br><span class="hljs-string"></span><br><span class="hljs-string">                // console.log(&quot;offset : 0x&quot; + offset.toString(16))</span><br><span class="hljs-string"></span><br><span class="hljs-string">                return Memory.readPointer(jnienv_addr.add(offset))</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">// Hook all function to have an overview of the function called</span><br><span class="hljs-string">            function hook_all(jnienv_addr)&#123;</span><br><span class="hljs-string">                jni_struct_array.forEach(function(func_name)&#123;</span><br><span class="hljs-string">                    // Calculating the address of the function</span><br><span class="hljs-string">                    if(!func_name.includes(&quot;reserved&quot;))</span><br><span class="hljs-string">                    &#123;</span><br><span class="hljs-string">                        var func_addr = getJNIFunctionAdress(jnienv_addr,func_name)</span><br><span class="hljs-string">                        Interceptor.attach(func_addr,&#123;</span><br><span class="hljs-string">                            onEnter: function(args)&#123;</span><br><span class="hljs-string">                                klog(&quot;[+] Entered : &quot; + func_name)</span><br><span class="hljs-string">                            &#125;</span><br><span class="hljs-string">                        &#125;)</span><br><span class="hljs-string">                    &#125;</span><br><span class="hljs-string">                &#125;)</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            exports.getJNIFunctionAdress = getJNIFunctionAdress</span><br><span class="hljs-string">            exports.hook_all = hook_all</span><br><span class="hljs-string">        &#125;,&#123;&#125;]&#125;,&#123;&#125;,[1])</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;)();</span><br></code></pre></td></tr></table></figure><h1 id="frida-的一些简单检测方式"><a href="#frida-的一些简单检测方式" class="headerlink" title="frida 的一些简单检测方式"></a>frida 的一些简单检测方式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash">//frida 检测相关的方法<br>/**<br> * 1.ptrace 占坑<br> * 在函数开始时 自己执行 ptrace(0,0,0,0);<br> * 因为一个进程只能附加一次 自己附加自己 frida 和ida就不能进行附加了<br> * 经典报错 Failed to attach: unable to access process with pid xxx due to system restrictions: try <span class="hljs-string">&#x27;sudo sysctl kernel.yama.ptrace_scope=0&#x27;</span> , or run Frida as root<br> * 就是自己的app已经被别的app注入了  可以使用 frida -U -f 启动前就进行附加 自己附加了 ptrace占坑就没效果了<br> * 开启一个子进程附加父进程  代表：梆梆加固<br> *    守护进程<br> *    子进程附加父进程 目的是不让别人附加<br> *    普通的多进程<br> *    如果进程已经有两个同名的进程了可以通过pid注入 因为有两个包名一样的进程 可以通过 -p注入<br> * 2.进程名检测，遍历运行的进程列表，检测frida-server是否运行  如果开启了fridaserver在进程中是存在的<br> * 3. 端口检测，检测frida-server默认端口27042是否开放  frida 默认的端口是27042 修改了27042就可以了<br> *<br> * 4. D-Bus协议通信<br> * ps -A|grep packg<br> * Frida使用D-Bus协议通信，可以遍历/proc/net/tcp文件，或者直接从0-65535<br> * 向每个开放的端口发送D-Bus认证消息，哪个端口回复了REJECT，就是frida-server<br> *<br> * 5.扫描maps文件<br> * maps文件用于显示当前app中加载的依赖库<br> * Frida在运行时会先确定路径下是否有re.frida.server文件夹<br> * 若没有则创建该文件夹并存放frida-agent.so等文件，该so会出现在maps文件中<br> *<br> * 6. 扫描task目录<br> * 扫描目录下所有/task/pid/status中的Name字段<br> * 寻找是否存在frida注入的特征<br> * 具体线程名为gmain、gdbus、gum-js-loop、pool-frida等<br> *<br> * 7. 通过<span class="hljs-built_in">readlink</span>查看/proc/self/fd、/proc/self/task/pid/fd下所有打开的文件，检测是否有Frida相关文件<br> *<br> * 8. 常见用于检测的系统函数<br> * strstr、strcmp、open、<span class="hljs-built_in">read</span>、fread、<span class="hljs-built_in">readlink</span><br> *<br> * 9. 扫描内存中是否有Frida库特征出现，例如字符串LIBFRIDA<br> *<br> *<br> * 1. 双进程，子进程附加主进程的问题<br> * 守护进程<br> * 占坑，为了防止调试<br> * 程序自身确实需要双进程<br> * 可以以pid的方式注入，也可以spawn方式启动<br> * 2. Hook dlopen可以用来查看，加载哪个so时程序退出<br> * 3. Hook pthread_create查看为哪些函数开启了子线程<br> * 4. Hook strstr、strcmp等比较字符串的函数，查看是否存在关键字<br> * 5. 常见检测关键字<br> * tmp、frida、gum-js-loop、gmain、linjector<br> * 6. 不建议直接在strstr、strcmp中修改<br> * 7. Hook open可以用来查看，访问了哪些文件<br> * 监控open执行，查看读取maps、task等敏感文件<br> * 主动读取这些文件，并把除去包含关键字的行，保存到新文件中<br> * 将open打开的文件，指向新文件<br> * 8. Hook常用系统函数，打印函数栈，去对应的检测so中分析代码<br> * 9. 其他常见需要Hook的函数 <span class="hljs-built_in">readlink</span><br> *<br> * 1. 通常比较会被检测的文件<br> * riru的特征文件<br> * /system/lib/libmemtrack.so<br> * /system/lib/libmemtrack_real.so<br> * cmdline 检测进程名，防重打包<br> * status 检测进程是否被附加  S 没有被调试<br> * <span class="hljs-built_in">stat</span> 检测进程是否被附加  S 没有被调试<br> * task/xxx/cmdline 检测进程名，防重打包<br> * task/xxx/stat 检测进程是否被附加<br> * task/xxx/status 检测线程name是否包含Frida关键字<br> * fd/xxx 检测app是否打开的Frida相关文件<br> * maps 检测app是否加载的依赖库里是否有Frida<br> * net/tcp 检测app打开的端口<br> *<br> *<br> *<br> */<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida编译过检测</title>
      <link href="/2022/11/15/frida%E7%BC%96%E8%AF%91%E8%BF%87%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/11/15/frida%E7%BC%96%E8%AF%91%E8%BF%87%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>ubunt 22.04<br>frida 16.04<br>NDK 25r</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>确保你有：<br>带有 GCC 7.5 或更新版本的现代 x86 系统<br>PATH 上的开发工具链和 Node.js。例如在 Ubuntu 22.04 上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install build-essential curl git lib32stdc++-9-dev \<br>    libc6-dev-i386 nodejs npm python3-dev python3-pip<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//这个是补丁引用python的一个模块 不安装编译成功启动server也会重启手机<br>pip install lief <br></code></pre></td></tr></table></figure><p>克隆frida并构建它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recurse-submodules https://github.com/frida/frida.git<br><span class="hljs-built_in">cd</span> frida<br>make<br></code></pre></td></tr></table></figure><p>输入make会弹出所有可以构建的版本  编译完成的结果在 frida&#x2F;build&#x2F;编译的版本&#x2F;bin目录下</p><h1 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h1><p>用葫芦娃大佬的那个补丁 执行必重启 我选择手动添加<br> <a href="https://github.com/AAAA-Project/Patchs.git">https://github.com/AAAA-Project/Patchs.git</a></p><h2 id="PATCH-RPC"><a href="#PATCH-RPC" class="headerlink" title="PATCH RPC"></a>PATCH RPC</h2><p>lib&#x2F;base&#x2F;rpc.vala<br>有三个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">add_string_value (<span class="hljs-string">&quot;frida:rpc&quot;</span>)<br>add_string_value (<span class="hljs-string">&quot;tuzi:rcc&quot;</span>)<br></code></pre></td></tr></table></figure><p>修改这里的话找到自己frida的安装目录<br>site-packages&#x2F;frida&#x2F;core.py </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">message = [&quot;tuzi:cc&quot;, request_id]<br><br>elif mtype == &quot;send&quot; and isinstance(payload, list) and len(payload) &gt; 0 and payload[0] == &quot;tuzi:cc&quot;:<br></code></pre></td></tr></table></figure><h2 id="PATCH-server"><a href="#PATCH-server" class="headerlink" title="PATCH server"></a>PATCH server</h2><p>server&#x2F;server.vala b&#x2F;server&#x2F;server.vala</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">private const string DEFAULT_DIRECTORY = &quot;tuzi.sv&quot;;<br></code></pre></td></tr></table></figure><h2 id="PATCH-helper"><a href="#PATCH-helper" class="headerlink" title="PATCH helper"></a>PATCH helper</h2><p>src&#x2F;linux&#x2F;frida-helper-backend-glue.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">self-&gt;fifo_path = g_strdup_printf (&quot;%s/tuzi_%u&quot;, self-&gt;temp_path, self-&gt;id);<br></code></pre></td></tr></table></figure><h2 id="PATCH-frida-agent-arm"><a href="#PATCH-frida-agent-arm" class="headerlink" title="PATCH frida-agent-arm"></a>PATCH frida-agent-arm</h2><p>src&#x2F;linux&#x2F;linux-host-session.vala b&#x2F;src&#x2F;linux&#x2F;linux-host-session.vala</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">agent = new AgentDescriptor (PathTemplate (<span class="hljs-string">&quot;tuzi_at-&lt;arch&gt;.so&quot;</span>),<br>new Bytes.static (blob32.data),<br>new Bytes.static (blob64.data),<br>new AgentResource[] &#123;<br>new AgentResource (<span class="hljs-string">&quot;tuzi_at_32.so&quot;</span>, new Bytes.static (emulated_arm.data), tempdir),<br>new AgentResource (<span class="hljs-string">&quot;tuzi_at_64.so&quot;</span>, new Bytes.static (emulated_arm64.data), tempdir),<br></code></pre></td></tr></table></figure><h2 id="PATCH-frida-agent-main"><a href="#PATCH-frida-agent-main" class="headerlink" title="PATCH frida_agent_main"></a>PATCH frida_agent_main</h2><h3 id="src-x2F-agent-container-vala-b-x2F-src-x2F-agent-container-vala"><a href="#src-x2F-agent-container-vala-b-x2F-src-x2F-agent-container-vala" class="headerlink" title="src&#x2F;agent-container.vala b&#x2F;src&#x2F;agent-container.vala"></a>src&#x2F;agent-container.vala b&#x2F;src&#x2F;agent-container.vala</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">var main_func_found = container.module.symbol (<span class="hljs-string">&quot;tuzi_main&quot;</span>, out main_func_symbol);<br></code></pre></td></tr></table></figure><p>src&#x2F;anti-anti-frida.py</p><h3 id="在src目录下添加anti-anti-frida-py"><a href="#在src目录下添加anti-anti-frida-py" class="headerlink" title="在src目录下添加anti-anti-frida.py"></a>在src目录下添加anti-anti-frida.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">import lief<br>import sys<br>import random<br>import os<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    input_file = sys.argv[1]<br>    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;[*] Patch frida-agent: &#123;input_file&#125;&quot;</span>)<br>    random_name = <span class="hljs-string">&quot;tuzi&quot;</span><br>    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;[*] Patch `frida` to `&#123;random_name&#125;``&quot;</span>)<br><br>    binary = lief.parse(input_file)<br><br>    <span class="hljs-keyword">if</span> not binary:<br>        <span class="hljs-built_in">exit</span>()<br><br>    <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> binary.symbols:<br>        <span class="hljs-keyword">if</span> symbol.name == <span class="hljs-string">&quot;frida_agent_main&quot;</span>:<br>            symbol.name = <span class="hljs-string">&quot;tuzi_main&quot;</span><br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;frida&quot;</span> <span class="hljs-keyword">in</span> symbol.name:<br>            symbol.name = symbol.name.replace(<span class="hljs-string">&quot;frida&quot;</span>, random_name)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;FRIDA&quot;</span> <span class="hljs-keyword">in</span> symbol.name:<br>            symbol.name = symbol.name.replace(<span class="hljs-string">&quot;FRIDA&quot;</span>, random_name)<br><br>    binary.write(input_file)<br><br><span class="hljs-comment"># gum-js-loop thread</span><br>    random_name = <span class="hljs-string">&quot;tuzi_loop&quot;</span><br>    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;[*] Patch `gum-js-loop` to `&#123;random_name&#125;`&quot;</span>)<br>    os.system(f<span class="hljs-string">&quot;sed -b -i s/gum-js-loop/&#123;random_name&#125;/g &#123;input_file&#125;&quot;</span>)<br><br>random_name = <span class="hljs-string">&quot;tuzimain&quot;</span><br>    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;[*] Patch `gmain` to `&#123;random_name&#125;`&quot;</span>)<br>    os.system(f<span class="hljs-string">&quot;sed -b -i s/gmain/&#123;random_name&#125;/g &#123;input_file&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="src-x2F-darwin-x2F-darwin-host-session-vala"><a href="#src-x2F-darwin-x2F-darwin-host-session-vala" class="headerlink" title="src&#x2F;darwin&#x2F;darwin-host-session.vala"></a>src&#x2F;darwin&#x2F;darwin-host-session.vala</h3><p>unowned string entrypoint &#x3D; “tuzi_main”;</p><h3 id="src-x2F-embed-agent-sh"><a href="#src-x2F-embed-agent-sh" class="headerlink" title="src&#x2F;embed-agent.sh"></a>src&#x2F;embed-agent.sh</h3><p>在src&#x2F;embed-agent.sh添加 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">@@ -9,6 +9,7 @@ host_os=<span class="hljs-string">&quot;<span class="hljs-variable">$6</span>&quot;</span><br> resource_compiler=<span class="hljs-string">&quot;<span class="hljs-variable">$7</span>&quot;</span><br> resource_config=<span class="hljs-string">&quot;<span class="hljs-variable">$8</span>&quot;</span><br> <br>+custom_script=<span class="hljs-string">&quot;<span class="hljs-variable">$output_dir</span>/../../../../frida-core/src/anti-anti-frida.py&quot;</span><br> priv_dir=<span class="hljs-string">&quot;<span class="hljs-variable">$output_dir</span>/frida-agent@emb&quot;</span><br> <br> <span class="hljs-keyword">case</span> <span class="hljs-variable">$host_os</span> <span class="hljs-keyword">in</span><br>@@ -30,6 +31,10 @@ collect_generic_agent ()<br>   <span class="hljs-keyword">else</span><br>     <span class="hljs-built_in">touch</span> <span class="hljs-string">&quot;<span class="hljs-variable">$embedded_agent</span>&quot;</span><br>   <span class="hljs-keyword">fi</span><br>+  <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$custom_script</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>+    python3 <span class="hljs-string">&quot;<span class="hljs-variable">$custom_script</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$embedded_agent</span>&quot;</span><br>+  <span class="hljs-keyword">fi</span><br>+  <br>   embedded_agents+=(<span class="hljs-string">&quot;<span class="hljs-variable">$embedded_agent</span>&quot;</span>)<br> &#125;<br> <br>@@ -62,6 +67,10 @@ <span class="hljs-keyword">case</span> <span class="hljs-variable">$host_os</span> <span class="hljs-keyword">in</span><br>       <span class="hljs-built_in">exit</span> 1<br>     <span class="hljs-keyword">fi</span><br> <br>+    <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$custom_script</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>+      python3 <span class="hljs-string">&quot;<span class="hljs-variable">$custom_script</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$embedded_agent</span>&quot;</span><br>+    <span class="hljs-keyword">fi</span><br>+    <br></code></pre></td></tr></table></figure><h3 id="src-x2F-linux-x2F-linux-host-session-vala"><a href="#src-x2F-linux-x2F-linux-host-session-vala" class="headerlink" title="src&#x2F;linux&#x2F;linux-host-session.vala"></a>src&#x2F;linux&#x2F;linux-host-session.vala</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">string entrypoint = <span class="hljs-string">&quot;tuzi_main&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="src-x2F-qnx-x2F-qnx-host-session-vala"><a href="#src-x2F-qnx-x2F-qnx-host-session-vala" class="headerlink" title="src&#x2F;qnx&#x2F;qnx-host-session.vala"></a>src&#x2F;qnx&#x2F;qnx-host-session.vala</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">var <span class="hljs-built_in">id</span> = yield qinjector.inject_library_resource (pid, agent_desc, <span class="hljs-string">&quot;tuzi_main&quot;</span>,<br> make_agent_parameters (t.remote_address, options), cancellable);<br></code></pre></td></tr></table></figure><h3 id="src-x2F-windows-x2F-windows-host-session-vala"><a href="#src-x2F-windows-x2F-windows-host-session-vala" class="headerlink" title="src&#x2F;windows&#x2F;windows-host-session.vala"></a>src&#x2F;windows&#x2F;windows-host-session.vala</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">var <span class="hljs-built_in">id</span> = yield winjector.inject_library_resource (pid, agent, <span class="hljs-string">&quot;tuzi_main&quot;</span>,<br> make_agent_parameters (t.remote_address, options), cancellable);<br></code></pre></td></tr></table></figure><h3 id="tests-x2F-test-agent-vala"><a href="#tests-x2F-test-agent-vala" class="headerlink" title="tests&#x2F;test-agent.vala"></a>tests&#x2F;test-agent.vala</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">var main_func_found = module.symbol (<span class="hljs-string">&quot;tuzi_main&quot;</span>, out main_func_symbol);<br></code></pre></td></tr></table></figure><h3 id="tests-x2F-test-injector-vala"><a href="#tests-x2F-test-injector-vala" class="headerlink" title="tests&#x2F;test-injector.vala"></a>tests&#x2F;test-injector.vala</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yield injector.inject_library_file (process.id, path, <span class="hljs-string">&quot;tuzi_main&quot;</span>, data);<br></code></pre></td></tr></table></figure><h2 id="PATCH-Unexpected-command"><a href="#PATCH-Unexpected-command" class="headerlink" title="PATCH Unexpected command"></a>PATCH Unexpected command</h2><p>src&#x2F;droidy&#x2F;droidy-client.vala</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">-throw new Error.PROTOCOL (<span class="hljs-string">&quot;Unexpected command&quot;</span>);<br>+<span class="hljs-built_in">break</span>;<br></code></pre></td></tr></table></figure><h2 id="PATCH-x2F-data-x2F-local-x2F-tmp"><a href="#PATCH-x2F-data-x2F-local-x2F-tmp" class="headerlink" title="PATCH &#x2F;data&#x2F;local&#x2F;tmp"></a>PATCH &#x2F;data&#x2F;local&#x2F;tmp</h2><p>frida&#x2F;frida-core&#x2F;src&#x2F;linux&#x2F;system-linux.c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">return</span> g_strdup (<span class="hljs-string">&quot;/data/local/&quot;</span>);<br></code></pre></td></tr></table></figure><p>frida&#x2F;frida-core&#x2F;lib&#x2F;pipe&#x2F;pipe-unix.c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># define FRIDA_TEMP_PATH &quot;/data/local/&quot;</span><br></code></pre></td></tr></table></figure><h2 id="PATCH-frida-helper"><a href="#PATCH-frida-helper" class="headerlink" title="PATCH frida-helper"></a>PATCH frida-helper</h2><p>src&#x2F;embed-helper.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">embedded_helper_modern=<span class="hljs-string">&quot;<span class="hljs-variable">$priv_dir</span>/tuzi_hp_32&quot;</span><br>embedded_helper_legacy=<span class="hljs-string">&quot;<span class="hljs-variable">$priv_dir</span>/tuzi_hp_64&quot;</span><br></code></pre></td></tr></table></figure><p>src&#x2F;linux&#x2F;frida-helper-process.vala</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (blob32.data.length &gt; 0) &#123;<br>helper32 = new TemporaryHelperFile (<br>new TemporaryFile.from_stream (<span class="hljs-string">&quot;tuzi_hp_32&quot;</span>,<br>new MemoryInputStream.from_data (blob32.data, null),<br>tempdir));<br>FileUtils.<span class="hljs-built_in">chmod</span> (helper32.path, 0700);<br>&#125;<br><br>var blob64 = Frida.Data.Helper.get_frida_helper_64_blob ();<br><span class="hljs-keyword">if</span> (blob64.data.length &gt; 0) &#123;<br>helper64 = new TemporaryHelperFile (<br>new TemporaryFile.from_stream (<span class="hljs-string">&quot;tuzi_hp_64&quot;</span>,<br>new MemoryInputStream.from_data (blob64.data, null),<br>tempdir));<br>FileUtils.<span class="hljs-built_in">chmod</span> (helper64.path, 0700);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> 编译 </tag>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>strace实现原理：ptrace系统调用</title>
      <link href="/2022/11/14/strace%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9Aptrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
      <url>/2022/11/14/strace%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9Aptrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是strace？"><a href="#什么是strace？" class="headerlink" title="什么是strace？"></a>什么是strace？</h1><p>根据strace官网的描述，strace是一个Linux用户空间跟踪器，可用于诊断、调试和教学。我们用它来监控用户空间进程和内核之间的交互，比如系统调用、信令、进程状态变化等等。</p><p>strace 使用内核的 ptrace 特性来实现其功能。</p><p>在运维的日常工作中，故障处理和问题诊断是主要内容和必备技能。strace 可以作为跟踪故障过程的有效工具。就像侦探通过系统调用的痕迹告诉你异常的真相。</p><p>这次想分享一个实用的东西，就是写一个strace工具。</p><p>用过strace的同学都知道，strace是用来跟踪进程调用的系统调用的，还可以统计进程调用对系统调用的统计。strace有两种使用方式，如下：</p><p>strace的过程<br>strace -p 进程 pid<br>第一个用于跟踪要执行的程序，而第二个用于跟踪正在运行的进程。</p><p>下图是用 strace 跟踪 ls 命令的结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ strace <span class="hljs-built_in">ls</span><br>--- Process 15332 created<br>--- Process 15332 loaded C:\Windows\System32\ntdll.dll at 00007ffdd6fd0000<br>--- Process 15332 loaded C:\Windows\System32\kernel32.dll at 00007ffdd4660000<br>--- Process 15332 loaded C:\Windows\System32\KernelBase.dll at 00007ffdd40b0000<br>--- Process 15332 thread 2208 created<br>--- Process 15332 thread 9072 created<br>--- Process 15332 loaded D:\Program Files (x86)\cygwin64\bin\cygwin1.dll at 0000000180040000<br>--- Process 15332 loaded D:\Program Files (x86)\cygwin64\bin\cygintl-8.dll at 00000003c0ba0000<br>--- Process 15332 thread 13508 created<br>--- Process 15332 loaded D:\Program Files (x86)\cygwin64\bin\cygiconv-2.dll at 00000003cf8b0000<br>    0       0 [main] <span class="hljs-built_in">ls</span> (15332) **********************************************<br>   42      42 [main] <span class="hljs-built_in">ls</span> (15332) Program name: D:\Program Files (x86)\cygwin64\bin\ls.exe (windows pid 15332)<br>   27      69 [main] <span class="hljs-built_in">ls</span> (15332) OS version:   Windows NT-10.0<br>   24      93 [main] <span class="hljs-built_in">ls</span> (15332) **********************************************<br>--- Process 15332 loaded C:\Windows\System32\advapi32.dll at 00007ffdd4500000<br>--- Process 15332 loaded C:\Windows\System32\msvcrt.dll at 00007ffdd6830000<br>--- Process 15332 loaded C:\Windows\System32\sechost.dll at 00007ffdd4a50000<br>--- Process 15332 loaded C:\Windows\System32\rpcrt4.dll at 00007ffdd48d0000<br><br>A lot is omitted here<br><br>   19   24022 [main] <span class="hljs-built_in">ls</span> 588 proc_terminate: nprocs 0<br>   19   24041 [main] <span class="hljs-built_in">ls</span> 588 proc_terminate: leaving<br>   25   24066 [main] <span class="hljs-built_in">ls</span> 588 pinfo::<span class="hljs-built_in">exit</span>: Calling dlls.cleanup_forkables n 0x0, exitcode 0x0<br>   21   24087 [main] <span class="hljs-built_in">ls</span> 588 pinfo::<span class="hljs-built_in">exit</span>: Calling ExitProcess n 0x0, exitcode 0x0<br>--- Process 15332 (pid: 588) thread 9072 exited with status 0x0<br>--- Process 15332 (pid: 588) thread 2208 exited with status 0x0<br>--- Process 15332 (pid: 588) thread 6340 exited with status 0x0<br>--- Process 15332 (pid: 588) thread 13508 exited with status 0x0<br>--- Process 15332 (pid: 588) exited with status 0x0<br></code></pre></td></tr></table></figure><h1 id="自己写一个-strace-的第一步是了解-ptrace-系统调用的使用。我们来看看ptrace-系统调用的定义"><a href="#自己写一个-strace-的第一步是了解-ptrace-系统调用的使用。我们来看看ptrace-系统调用的定义" class="headerlink" title="自己写一个 strace 的第一步是了解 ptrace() 系统调用的使用。我们来看看ptrace()系统调用的定义"></a>自己写一个 strace 的第一步是了解 ptrace() 系统调用的使用。我们来看看ptrace()系统调用的定义</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">int ptrace(long request, long pid, long addr, long data);<br></code></pre></td></tr></table></figure><p>ptrace() 系统调用用于跟踪进程的运行状态。下面介绍其参数的含义：</p><p>请求：指定要跟踪的操作。换句话说，可以通过传入不同的请求参数，对进程进行不同的跟踪。可选值是：<br>PTRACE_TRACEME<br>PTRACE_PEEKTEXT<br>PTRACE_POKETEXT<br>PTRACE_CONT<br>PTRACE_SINGLESTEP<br>…<br>PID：指定要跟踪的进程的PID。<br>addr：指定要读取或修改的内存地址。<br>数据：对于不同的请求操作，数据有不同的作用，下面会分别介绍。<br>如前所述，有两种方法可以使用 strace 跟踪进程。一种是通过strace命令启动进程，另一种是通过-p指定要跟踪的进程。</p><p>ptrace() 系统调用还提供了两种“请求”来实现上述两种方式：</p><p>第一个是通过 ptrace_Trace</p><p>第二个是通过 PTRACE_ATTACH</p><p>本文主要介绍第一种方法。由于第一种方法使用跟踪器启动被跟踪程序，因此需要启动两个进程。通常，可以使用 fork() 系统调用来创建一个新进程，所以我们自然也使用了 fork() 系统调用。</p><p>我们新建一个文件strace.c，输入代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">int main(int argc, char *argv[])&#123;<br>    pid_t child;<br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        // Child process<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        // Parent process<br>    &#125;<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码通过调用fork()创建了一个子进程，但是什么都不做。之后，我们将在子进程中运行被跟踪的程序，在父进程中运行跟踪进程代码。</p><h1 id="运行跟踪的程序"><a href="#运行跟踪的程序" class="headerlink" title="运行跟踪的程序"></a>运行跟踪的程序</h1><p>如前所述，被跟踪的程序需要在子进程中运行。要运行程序，您可以调用 execl() 系统。因此，您可以通过以下代码在子进程中运行 ls 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br>int main(int argc, char *argv[])&#123;<br>    pid_t child;<br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        // Parent process<br>    &#125;<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>execl() 用于执行指定的程序。如果执行成功，则不会返回。因此，EXECL(…) 的下一行代码 exit(0) 将不会被执行。</p><p>由于我们需要跟踪ls命令，所以在执行ls命令之前必须调用ptrace(ptrace_trace,0,null,null)来告诉系统需要跟踪进程。代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>    pid_t child;<br><br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        ptrace(PTRACE_TRACEME, 0, NULL, NULL);<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        // Parent process<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就完成了被跟踪进程部分的代码，然后启动跟踪进程部分的代码。</p><h1 id="编写跟踪过程代码"><a href="#编写跟踪过程代码" class="headerlink" title="编写跟踪过程代码"></a>编写跟踪过程代码</h1><p>如果你编译运行上面的代码，你会发现没有任何效果。这是因为当子进程调用 ptrace (ptrace_trace, 0, null, null) 并调用 execl() 系统调用时，子进程会向父进程（跟踪进程）发送 SIGCHLD 信号并停止运行本身。直到父进程发送调试命令，它才会继续运行。</p><p>因为在上面的代码中，父进程（跟踪进程）并没有发送任何调试命令退出，所以子进程（被跟踪进程）没有运行就随父进程退出，所以你不会看到任何效果。</p><p>现在让我们开始编写代码来跟踪这个过程。</p><p>由于被跟踪进程会向跟踪进程发送 SIGCHLD 消息，所以我们必须首先在跟踪进程的代码中接收到 SIGCHLD 信号。接收信号通过“wait()”系统调用完成，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>    pid_t child;<br>    int status;<br><br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        ptrace(PTRACE_TRACEME, 0, NULL, NULL);<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码调用“wait()”系统调用接收被跟踪进程发送的SIGCHLD信号，接下来需要开始向被跟踪进程发送调试命令，对被跟踪进程进行调试。</p><p>由于本文介绍了如何跟踪某个进程进行了哪些系统调用，所以我们需要使用 ptrace() 的 ptrace_syscall 命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/user.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>    pid_t child;<br>    int status;<br>    struct user_regs_struct regs;<br>    int orig_rax;<br><br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        ptrace(PTRACE_TRACEME, 0, NULL, NULL);<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br><br>        // 1. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> is given to the tracked process (parameters of system call can be obtained before calling system call)<br>        ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br><br>        // 2. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> to the tracked process (after calling the system call, you can get the <span class="hljs-built_in">return</span> value of the system call)<br>        ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码可以看出，我们调用了两次ptrace(ptrace_syscall,child,null,null)。这是因为在跟踪系统调用时，需要跟踪系统调用前的环境（如获取系统调用的参数）和系统调用后的环境（如获取系统调用的返回值） . 因此，ptrace(ptrace)需要调用两次_SYSCALL,child,NULL,NULL)。</p><h1 id="获取进程寄存器的值"><a href="#获取进程寄存器的值" class="headerlink" title="获取进程寄存器的值"></a>获取进程寄存器的值</h1><p>Linux系统调用通过CPU寄存器传递参数，因此要获取调用哪个系统调用，必须获取进程寄存器的值。获取进程寄存器的值，可以通过ptrace() system_getregs命令调用，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/user.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>    pid_t child;<br>    int status;<br>    struct user_regs_struct regs;<br>    int orig_rax;<br><br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        ptrace(PTRACE_TRACEME, 0, NULL, NULL);<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br><br>        // 1. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> is given to the tracked process (parameters of system call can be obtained before calling system call)<br>        ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br><br>        ptrace(PTRACE_GETREGS, child, 0, &amp;regs); // Gets the value of the tracked process register<br><br>        orig_rax = regs.orig_rax; // Gets the value of the rax register<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;orig_rax: %d\n&quot;</span>, orig_rax); // Print the value of the rax register<br><br>        // 2. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> to the tracked process (after calling the system call, you can get the <span class="hljs-built_in">return</span> value of the system call)<br>        ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码调用ptrace(ptrace)<em>getregs,child,0,®s)获取进程寄存器的值，ptrace_getregs命令需要传入data参数中user的类型_regs_指向struct结构体的指针，user</em> regs_struct结构定义如下（在文件sys&#x2F;user.h中）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">struct user_regs_struct &#123;<br>    unsigned long r15,r14,r13,r12,rbp,rbx,r11,r10;<br>    unsigned long r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;<br>    unsigned long rip,cs,eflags;<br>    unsigned long rsp,ss;<br>    unsigned long fs_base, gs_base;<br>    unsigned long ds,es,fs,gs;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中struct结构体的user_regs_orig_rax保存了系统调用号，所以我们可以通过orig_rax的值来知道调用了哪个系统调用。</p><p>编译运行上述代码，会输出结果：orig_rax: 12，表示系统调用编号为12。那么系统调用编号12是多少呢？您可以通过以下链接查看：</p><p><a href="https://www.cnblogs.com/gavanwanggw/p/6920826.html">https://www.cnblogs.com/gavanwanggw/p/6920826.html</a></p><p>通过查找系统调用表，我们可以知道系统调用号12是brk()，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">System call number     Function name     entry point     Source code<br>...<br>12            brk       sys_brk    mm/mmap.c<br>...<br></code></pre></td></tr></table></figure><p>上面的程序只跟踪一个系统调用，那么如何跟踪所有的系统调用呢？很简单，就是把被跟踪的代码放到一个无限循环中。代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/user.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>    pid_t child;<br>    int status;<br>    struct user_regs_struct regs;<br>    int orig_rax;<br><br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        ptrace(PTRACE_TRACEME, 0, NULL, NULL);<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br><br>        <span class="hljs-keyword">while</span> (1) &#123;<br>            // 1. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> is given to the tracked process (parameters of system call can be obtained before calling system call)<br>            ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>            <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br>            <span class="hljs-keyword">if</span> (WIFEXITED(status)) &#123; // If the child process exits, the trace is terminated<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br><br>            ptrace(PTRACE_GETREGS, child, 0, &amp;regs); // Gets the value of the tracked process register<br><br>            orig_rax = regs.orig_rax; // Gets the value of the rax register<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;orig_rax: %d\n&quot;</span>, orig_rax); // Print the value of the rax register<br><br>            // 2. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> to the tracked process (after calling the system call, you can get the <span class="hljs-built_in">return</span> value of the system call)<br>            ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>            <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br>            <span class="hljs-keyword">if</span> (WIFEXITED(status)) &#123; // If the child process exits, the trace is terminated<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>这行代码用于判断子进程（被跟踪的进程）是否退出，如果退出，则停止跟踪。现在您可以编译并运行该程序。输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost liexusong]$ ./strace<br>orig_rax: 12<br>orig_rax: 9<br>orig_rax: 21<br>orig_rax: 2<br>orig_rax: 5<br>orig_rax: 9<br>orig_rax: 3<br>orig_rax: 2<br>orig_rax: 0<br>orig_rax: 5<br>orig_rax: 9<br>orig_rax: 10<br>orig_rax: 9<br>orig_rax: 9<br>orig_rax: 3<br>orig_rax: 2<br>orig_rax: 0<br>orig_rax: 5<br>orig_rax: 9<br>orig_rax: 10<br>...<br></code></pre></td></tr></table></figure><p>从执行结果来看，只是打印系统调用号不直观，那我们该如何优化呢？</p><p>我们可以定义一个系统调用号和系统调用名的对应表来实现更清晰的输出结果，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/user.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>struct syscall &#123;<br>    int  code;<br>    char *name;<br>&#125; syscall_table[] = &#123;<br>    &#123;0, <span class="hljs-string">&quot;read&quot;</span>&#125;,<br>    &#123;1, <span class="hljs-string">&quot;write&quot;</span>&#125;,<br>    &#123;2, <span class="hljs-string">&quot;open&quot;</span>&#125;,<br>    &#123;3, <span class="hljs-string">&quot;close&quot;</span>&#125;,<br>    &#123;4, <span class="hljs-string">&quot;stat&quot;</span>&#125;,<br>    &#123;5, <span class="hljs-string">&quot;fstat&quot;</span>&#125;,<br>    &#123;6, <span class="hljs-string">&quot;lstat&quot;</span>&#125;,<br>    &#123;7, <span class="hljs-string">&quot;poll&quot;</span>&#125;,<br>    &#123;8, <span class="hljs-string">&quot;lseek&quot;</span>&#125;,<br>    ...<br>    &#123;-1, NULL&#125;,<br>&#125;<br><br>char *find_syscall_symbol(int code) &#123;<br>    struct syscall *sc;<br><br>    <span class="hljs-keyword">for</span> (sc = syscall_table; sc-&gt;code &gt;= 0; sc++) &#123;<br>        <span class="hljs-keyword">if</span> (sc-&gt;code == code) &#123;<br>            <span class="hljs-built_in">return</span> sc-&gt;name;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> NULL;<br>&#125;<br><br>int main(int argc, char *argv[])<br>&#123;<br>    pid_t child;<br>    int status;<br>    struct user_regs_struct regs;<br>    int orig_rax;<br><br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        ptrace(PTRACE_TRACEME, 0, NULL, NULL);<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br><br>        <span class="hljs-keyword">while</span> (1) &#123;<br>            // 1. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> is given to the tracked process (parameters of system call can be obtained before calling system call)<br>            ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>            <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br>            <span class="hljs-keyword">if</span>(WIFEXITED(status)) &#123; // If the child process exits, the trace is terminated<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br><br>            ptrace(PTRACE_GETREGS, child, 0, &amp;regs); // Gets the value of the tracked process register<br><br>            orig_rax = regs.orig_rax; // Gets the value of the rax register<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;syscall: %s()\n&quot;</span>, find_syscall_symbol(orig_rax)); // Print system call<br><br>            // 2. Send PTRACE_SYSCALL <span class="hljs-built_in">command</span> to the tracked process (after calling the system call, you can get the <span class="hljs-built_in">return</span> value of the system call)<br>            ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>            <span class="hljs-built_in">wait</span>(&amp;status); // Receive SIGCHLD signal sent by subprocess<br>            <span class="hljs-keyword">if</span>(WIFEXITED(status)) &#123; // If the child process is terminated, <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子增加了一个函数，find_syscall_symbol() 来获取系统调用号对应的系统调用名，实现比较简单。输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost liexusong]$ ./strace<br>syscall: brk()<br>syscall: mmap()<br>syscall: access()<br>syscall: open()<br>syscall: fstat()<br>syscall: mmap()<br>syscall: close()<br>syscall: open()<br>syscall: <span class="hljs-built_in">read</span>()<br>syscall: fstat()<br>syscall: mmap()<br>syscall: mprotect()<br>syscall: mmap()<br>syscall: mmap()<br>syscall: close()<br>...<br></code></pre></td></tr></table></figure><p>从执行结果来看，我们现在可以打印系统调用的名称，但是我们知道 strace 命令也会打印系统调用参数的值。我们可以使用 ptrace() 系统调用 PTRACE_PEEKTEXT 和 PTRACE_PEEKDATA 来获取参数的值，所以有兴趣自己实现这个效果。</p><p>本文完整代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/user.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>struct syscall &#123;<br>    int  code;<br>    char *name;<br>&#125; syscall_table[] = &#123;<br>    &#123;0, <span class="hljs-string">&quot;read&quot;</span>&#125;,<br>    &#123;1, <span class="hljs-string">&quot;write&quot;</span>&#125;,<br>    &#123;2, <span class="hljs-string">&quot;open&quot;</span>&#125;,<br>    &#123;3, <span class="hljs-string">&quot;close&quot;</span>&#125;,<br>    &#123;4, <span class="hljs-string">&quot;stat&quot;</span>&#125;,<br>    &#123;5, <span class="hljs-string">&quot;fstat&quot;</span>&#125;,<br>    &#123;6, <span class="hljs-string">&quot;lstat&quot;</span>&#125;,<br>    &#123;7, <span class="hljs-string">&quot;poll&quot;</span>&#125;,<br>    &#123;8, <span class="hljs-string">&quot;lseek&quot;</span>&#125;,<br>    &#123;9, <span class="hljs-string">&quot;mmap&quot;</span>&#125;,<br>    &#123;10, <span class="hljs-string">&quot;mprotect&quot;</span>&#125;,<br>    &#123;11, <span class="hljs-string">&quot;munmap&quot;</span>&#125;,<br>    &#123;12, <span class="hljs-string">&quot;brk&quot;</span>&#125;,<br>    &#123;13, <span class="hljs-string">&quot;rt_sigaction&quot;</span>&#125;,<br>    &#123;14, <span class="hljs-string">&quot;rt_sigprocmask&quot;</span>&#125;,<br>    &#123;15, <span class="hljs-string">&quot;rt_sigreturn&quot;</span>&#125;,<br>    &#123;16, <span class="hljs-string">&quot;ioctl&quot;</span>&#125;,<br>    &#123;17, <span class="hljs-string">&quot;pread64&quot;</span>&#125;,<br>    &#123;18, <span class="hljs-string">&quot;pwrite64&quot;</span>&#125;,<br>    &#123;19, <span class="hljs-string">&quot;readv&quot;</span>&#125;,<br>    &#123;20, <span class="hljs-string">&quot;writev&quot;</span>&#125;,<br>    &#123;21, <span class="hljs-string">&quot;access&quot;</span>&#125;,<br>    &#123;22, <span class="hljs-string">&quot;pipe&quot;</span>&#125;,<br>    &#123;23, <span class="hljs-string">&quot;select&quot;</span>&#125;,<br>    &#123;24, <span class="hljs-string">&quot;sched_yield&quot;</span>&#125;,<br>    &#123;25, <span class="hljs-string">&quot;mremap&quot;</span>&#125;,<br>    &#123;26, <span class="hljs-string">&quot;msync&quot;</span>&#125;,<br>    &#123;27, <span class="hljs-string">&quot;mincore&quot;</span>&#125;,<br>    &#123;28, <span class="hljs-string">&quot;madvise&quot;</span>&#125;,<br>    &#123;29, <span class="hljs-string">&quot;shmget&quot;</span>&#125;,<br>    &#123;30, <span class="hljs-string">&quot;shmat&quot;</span>&#125;,<br>    &#123;31, <span class="hljs-string">&quot;shmctl&quot;</span>&#125;,<br>    &#123;32, <span class="hljs-string">&quot;dup&quot;</span>&#125;,<br>    &#123;33, <span class="hljs-string">&quot;dup2&quot;</span>&#125;,<br>    &#123;34, <span class="hljs-string">&quot;pause&quot;</span>&#125;,<br>    &#123;35, <span class="hljs-string">&quot;nanosleep&quot;</span>&#125;,<br>    &#123;36, <span class="hljs-string">&quot;getitimer&quot;</span>&#125;,<br>    &#123;37, <span class="hljs-string">&quot;alarm&quot;</span>&#125;,<br>    &#123;38, <span class="hljs-string">&quot;setitimer&quot;</span>&#125;,<br>    &#123;39, <span class="hljs-string">&quot;getpid&quot;</span>&#125;,<br>    &#123;40, <span class="hljs-string">&quot;sendfile&quot;</span>&#125;,<br>    &#123;41, <span class="hljs-string">&quot;socket&quot;</span>&#125;,<br>    &#123;42, <span class="hljs-string">&quot;connect&quot;</span>&#125;,<br>    &#123;43, <span class="hljs-string">&quot;accept&quot;</span>&#125;,<br>    &#123;44, <span class="hljs-string">&quot;sendto&quot;</span>&#125;,<br>    &#123;45, <span class="hljs-string">&quot;recvfrom&quot;</span>&#125;,<br>    &#123;46, <span class="hljs-string">&quot;sendmsg&quot;</span>&#125;,<br>    &#123;47, <span class="hljs-string">&quot;recvmsg&quot;</span>&#125;,<br>    &#123;48, <span class="hljs-string">&quot;shutdown&quot;</span>&#125;,<br>    &#123;49, <span class="hljs-string">&quot;bind&quot;</span>&#125;,<br>    &#123;50, <span class="hljs-string">&quot;listen&quot;</span>&#125;,<br>    &#123;51, <span class="hljs-string">&quot;getsockname&quot;</span>&#125;,<br>    &#123;52, <span class="hljs-string">&quot;getpeername&quot;</span>&#125;,<br>    &#123;53, <span class="hljs-string">&quot;socketpair&quot;</span>&#125;,<br>    &#123;54, <span class="hljs-string">&quot;setsockopt&quot;</span>&#125;,<br>    &#123;55, <span class="hljs-string">&quot;getsockopt&quot;</span>&#125;,<br>    &#123;56, <span class="hljs-string">&quot;clone&quot;</span>&#125;,<br>    &#123;57, <span class="hljs-string">&quot;fork&quot;</span>&#125;,<br>    &#123;58, <span class="hljs-string">&quot;vfork&quot;</span>&#125;,<br>    &#123;59, <span class="hljs-string">&quot;execve&quot;</span>&#125;,<br>    &#123;60, <span class="hljs-string">&quot;exit&quot;</span>&#125;,<br>    &#123;61, <span class="hljs-string">&quot;wait4&quot;</span>&#125;,<br>    &#123;62, <span class="hljs-string">&quot;kill&quot;</span>&#125;,<br>    &#123;63, <span class="hljs-string">&quot;uname&quot;</span>&#125;,<br>    &#123;64, <span class="hljs-string">&quot;semget&quot;</span>&#125;,<br>    &#123;65, <span class="hljs-string">&quot;semop&quot;</span>&#125;,<br>    &#123;66, <span class="hljs-string">&quot;semctl&quot;</span>&#125;,<br>    &#123;67, <span class="hljs-string">&quot;shmdt&quot;</span>&#125;,<br>    &#123;68, <span class="hljs-string">&quot;msgget&quot;</span>&#125;,<br>    &#123;69, <span class="hljs-string">&quot;msgsnd&quot;</span>&#125;,<br>    &#123;70, <span class="hljs-string">&quot;msgrcv&quot;</span>&#125;,<br>    &#123;71, <span class="hljs-string">&quot;msgctl&quot;</span>&#125;,<br>    &#123;72, <span class="hljs-string">&quot;fcntl&quot;</span>&#125;,<br>    &#123;73, <span class="hljs-string">&quot;flock&quot;</span>&#125;,<br>    &#123;74, <span class="hljs-string">&quot;fsync&quot;</span>&#125;,<br>    &#123;75, <span class="hljs-string">&quot;fdatasync&quot;</span>&#125;,<br>    &#123;76, <span class="hljs-string">&quot;truncate&quot;</span>&#125;,<br>    &#123;77, <span class="hljs-string">&quot;ftruncate&quot;</span>&#125;,<br>    &#123;78, <span class="hljs-string">&quot;getdents&quot;</span>&#125;,<br>    &#123;79, <span class="hljs-string">&quot;getcwd&quot;</span>&#125;,<br>    &#123;80, <span class="hljs-string">&quot;chdir&quot;</span>&#125;,<br>    &#123;81, <span class="hljs-string">&quot;fchdir&quot;</span>&#125;,<br>    &#123;82, <span class="hljs-string">&quot;rename&quot;</span>&#125;,<br>    &#123;83, <span class="hljs-string">&quot;mkdir&quot;</span>&#125;,<br>    &#123;84, <span class="hljs-string">&quot;rmdir&quot;</span>&#125;,<br>    &#123;85, <span class="hljs-string">&quot;creat&quot;</span>&#125;,<br>    &#123;86, <span class="hljs-string">&quot;link&quot;</span>&#125;,<br>    &#123;87, <span class="hljs-string">&quot;unlink&quot;</span>&#125;,<br>    &#123;88, <span class="hljs-string">&quot;symlink&quot;</span>&#125;,<br>    &#123;89, <span class="hljs-string">&quot;readlink&quot;</span>&#125;,<br>    &#123;90, <span class="hljs-string">&quot;chmod&quot;</span>&#125;,<br>    &#123;91, <span class="hljs-string">&quot;fchmod&quot;</span>&#125;,<br>    &#123;92, <span class="hljs-string">&quot;chown&quot;</span>&#125;,<br>    &#123;93, <span class="hljs-string">&quot;fchown&quot;</span>&#125;,<br>    &#123;94, <span class="hljs-string">&quot;lchown&quot;</span>&#125;,<br>    &#123;95, <span class="hljs-string">&quot;umask&quot;</span>&#125;,<br>    &#123;96, <span class="hljs-string">&quot;gettimeofday&quot;</span>&#125;,<br>    &#123;97, <span class="hljs-string">&quot;getrlimit&quot;</span>&#125;,<br>    &#123;98, <span class="hljs-string">&quot;getrusage&quot;</span>&#125;,<br>    &#123;99, <span class="hljs-string">&quot;sysinfo&quot;</span>&#125;,<br>    &#123;100, <span class="hljs-string">&quot;times&quot;</span>&#125;,<br>    &#123;101, <span class="hljs-string">&quot;ptrace&quot;</span>&#125;,<br>    &#123;102, <span class="hljs-string">&quot;getuid&quot;</span>&#125;,<br>    &#123;103, <span class="hljs-string">&quot;syslog&quot;</span>&#125;,<br>    &#123;104, <span class="hljs-string">&quot;getgid&quot;</span>&#125;,<br>    &#123;105, <span class="hljs-string">&quot;setuid&quot;</span>&#125;,<br>    &#123;106, <span class="hljs-string">&quot;setgid&quot;</span>&#125;,<br>    &#123;107, <span class="hljs-string">&quot;geteuid&quot;</span>&#125;,<br>    &#123;108, <span class="hljs-string">&quot;getegid&quot;</span>&#125;,<br>    &#123;109, <span class="hljs-string">&quot;setpgid&quot;</span>&#125;,<br>    &#123;110, <span class="hljs-string">&quot;getppid&quot;</span>&#125;,<br>    &#123;111, <span class="hljs-string">&quot;getpgrp&quot;</span>&#125;,<br>    &#123;112, <span class="hljs-string">&quot;setsid&quot;</span>&#125;,<br>    &#123;113, <span class="hljs-string">&quot;setreuid&quot;</span>&#125;,<br>    &#123;114, <span class="hljs-string">&quot;setregid&quot;</span>&#125;,<br>    &#123;115, <span class="hljs-string">&quot;getgroups&quot;</span>&#125;,<br>    &#123;116, <span class="hljs-string">&quot;setgroups&quot;</span>&#125;,<br>    &#123;117, <span class="hljs-string">&quot;setresuid&quot;</span>&#125;,<br>    &#123;118, <span class="hljs-string">&quot;getresuid&quot;</span>&#125;,<br>    &#123;119, <span class="hljs-string">&quot;setresgid&quot;</span>&#125;,<br>    &#123;120, <span class="hljs-string">&quot;getresgid&quot;</span>&#125;,<br>    &#123;121, <span class="hljs-string">&quot;getpgid&quot;</span>&#125;,<br>    &#123;122, <span class="hljs-string">&quot;setfsuid&quot;</span>&#125;,<br>    &#123;123, <span class="hljs-string">&quot;setfsgid&quot;</span>&#125;,<br>    &#123;124, <span class="hljs-string">&quot;getsid&quot;</span>&#125;,<br>    &#123;125, <span class="hljs-string">&quot;capget&quot;</span>&#125;,<br>    &#123;126, <span class="hljs-string">&quot;capset&quot;</span>&#125;,<br>    &#123;127, <span class="hljs-string">&quot;rt_sigpending&quot;</span>&#125;,<br>    &#123;128, <span class="hljs-string">&quot;rt_sigtimedwait&quot;</span>&#125;,<br>    &#123;129, <span class="hljs-string">&quot;rt_sigqueueinfo&quot;</span>&#125;,<br>    &#123;130, <span class="hljs-string">&quot;rt_sigsuspend&quot;</span>&#125;,<br>    &#123;131, <span class="hljs-string">&quot;sigaltstack&quot;</span>&#125;,<br>    &#123;132, <span class="hljs-string">&quot;utime&quot;</span>&#125;,<br>    &#123;133, <span class="hljs-string">&quot;mknod&quot;</span>&#125;,<br>    &#123;134, <span class="hljs-string">&quot;uselib&quot;</span>&#125;,<br>    &#123;135, <span class="hljs-string">&quot;personality&quot;</span>&#125;,<br>    &#123;136, <span class="hljs-string">&quot;ustat&quot;</span>&#125;,<br>    &#123;137, <span class="hljs-string">&quot;statfs&quot;</span>&#125;,<br>    &#123;138, <span class="hljs-string">&quot;fstatfs&quot;</span>&#125;,<br>    &#123;139, <span class="hljs-string">&quot;sysfs&quot;</span>&#125;,<br>    &#123;140, <span class="hljs-string">&quot;getpriority&quot;</span>&#125;,<br>    &#123;141, <span class="hljs-string">&quot;setpriority&quot;</span>&#125;,<br>    &#123;142, <span class="hljs-string">&quot;sched_setparam&quot;</span>&#125;,<br>    &#123;143, <span class="hljs-string">&quot;sched_getparam&quot;</span>&#125;,<br>    &#123;144, <span class="hljs-string">&quot;sched_setscheduler&quot;</span>&#125;,<br>    &#123;145, <span class="hljs-string">&quot;sched_getscheduler&quot;</span>&#125;,<br>    &#123;146, <span class="hljs-string">&quot;sched_get_priority_max&quot;</span>&#125;,<br>    &#123;147, <span class="hljs-string">&quot;sched_get_priority_min&quot;</span>&#125;,<br>    &#123;148, <span class="hljs-string">&quot;sched_rr_get_interval&quot;</span>&#125;,<br>    &#123;149, <span class="hljs-string">&quot;mlock&quot;</span>&#125;,<br>    &#123;150, <span class="hljs-string">&quot;munlock&quot;</span>&#125;,<br>    &#123;151, <span class="hljs-string">&quot;mlockall&quot;</span>&#125;,<br>    &#123;152, <span class="hljs-string">&quot;munlockall&quot;</span>&#125;,<br>    &#123;153, <span class="hljs-string">&quot;vhangup&quot;</span>&#125;,<br>    &#123;154, <span class="hljs-string">&quot;modify_ldt&quot;</span>&#125;,<br>    &#123;155, <span class="hljs-string">&quot;pivot_root&quot;</span>&#125;,<br>    &#123;156, <span class="hljs-string">&quot;_sysctl&quot;</span>&#125;,<br>    &#123;157, <span class="hljs-string">&quot;prctl&quot;</span>&#125;,<br>    &#123;158, <span class="hljs-string">&quot;arch_prctl&quot;</span>&#125;,<br>    &#123;159, <span class="hljs-string">&quot;adjtimex&quot;</span>&#125;,<br>    &#123;160, <span class="hljs-string">&quot;setrlimit&quot;</span>&#125;,<br>    &#123;161, <span class="hljs-string">&quot;chroot&quot;</span>&#125;,<br>    &#123;162, <span class="hljs-string">&quot;sync&quot;</span>&#125;,<br>    &#123;163, <span class="hljs-string">&quot;acct&quot;</span>&#125;,<br>    &#123;164, <span class="hljs-string">&quot;settimeofday&quot;</span>&#125;,<br>    &#123;165, <span class="hljs-string">&quot;mount&quot;</span>&#125;,<br>    &#123;166, <span class="hljs-string">&quot;umount2&quot;</span>&#125;,<br>    &#123;167, <span class="hljs-string">&quot;swapon&quot;</span>&#125;,<br>    &#123;168, <span class="hljs-string">&quot;swapoff&quot;</span>&#125;,<br>    &#123;169, <span class="hljs-string">&quot;reboot&quot;</span>&#125;,<br>    &#123;170, <span class="hljs-string">&quot;sethostname&quot;</span>&#125;,<br>    &#123;171, <span class="hljs-string">&quot;setdomainname&quot;</span>&#125;,<br>    &#123;172, <span class="hljs-string">&quot;iopl&quot;</span>&#125;,<br>    &#123;173, <span class="hljs-string">&quot;ioperm&quot;</span>&#125;,<br>    &#123;174, <span class="hljs-string">&quot;create_module&quot;</span>&#125;,<br>    &#123;175, <span class="hljs-string">&quot;init_module&quot;</span>&#125;,<br>    &#123;176, <span class="hljs-string">&quot;delete_module&quot;</span>&#125;,<br>    &#123;177, <span class="hljs-string">&quot;get_kernel_syms&quot;</span>&#125;,<br>    &#123;178, <span class="hljs-string">&quot;query_module&quot;</span>&#125;,<br>    &#123;179, <span class="hljs-string">&quot;quotactl&quot;</span>&#125;,<br>    &#123;180, <span class="hljs-string">&quot;nfsservctl&quot;</span>&#125;,<br>    &#123;181, <span class="hljs-string">&quot;getpmsg&quot;</span>&#125;,<br>    &#123;182, <span class="hljs-string">&quot;putpmsg&quot;</span>&#125;,<br>    &#123;183, <span class="hljs-string">&quot;afs_syscall&quot;</span>&#125;,<br>    &#123;184, <span class="hljs-string">&quot;tuxcall&quot;</span>&#125;,<br>    &#123;185, <span class="hljs-string">&quot;security&quot;</span>&#125;,<br>    &#123;186, <span class="hljs-string">&quot;gettid&quot;</span>&#125;,<br>    &#123;187, <span class="hljs-string">&quot;readahead&quot;</span>&#125;,<br>    &#123;188, <span class="hljs-string">&quot;setxattr&quot;</span>&#125;,<br>    &#123;189, <span class="hljs-string">&quot;lsetxattr&quot;</span>&#125;,<br>    &#123;190, <span class="hljs-string">&quot;fsetxattr&quot;</span>&#125;,<br>    &#123;191, <span class="hljs-string">&quot;getxattr&quot;</span>&#125;,<br>    &#123;192, <span class="hljs-string">&quot;lgetxattr&quot;</span>&#125;,<br>    &#123;193, <span class="hljs-string">&quot;fgetxattr&quot;</span>&#125;,<br>    &#123;194, <span class="hljs-string">&quot;listxattr&quot;</span>&#125;,<br>    &#123;195, <span class="hljs-string">&quot;llistxattr&quot;</span>&#125;,<br>    &#123;196, <span class="hljs-string">&quot;flistxattr&quot;</span>&#125;,<br>    &#123;197, <span class="hljs-string">&quot;removexattr&quot;</span>&#125;,<br>    &#123;198, <span class="hljs-string">&quot;lremovexattr&quot;</span>&#125;,<br>    &#123;199, <span class="hljs-string">&quot;fremovexattr&quot;</span>&#125;,<br>    &#123;200, <span class="hljs-string">&quot;tkill&quot;</span>&#125;,<br>    &#123;201, <span class="hljs-string">&quot;time&quot;</span>&#125;,<br>    &#123;202, <span class="hljs-string">&quot;futex&quot;</span>&#125;,<br>    &#123;203, <span class="hljs-string">&quot;sched_setaffinity&quot;</span>&#125;,<br>    &#123;204, <span class="hljs-string">&quot;sched_getaffinity&quot;</span>&#125;,<br>    &#123;205, <span class="hljs-string">&quot;set_thread_area&quot;</span>&#125;,<br>    &#123;206, <span class="hljs-string">&quot;io_setup&quot;</span>&#125;,<br>    &#123;207, <span class="hljs-string">&quot;io_destroy&quot;</span>&#125;,<br>    &#123;208, <span class="hljs-string">&quot;io_getevents&quot;</span>&#125;,<br>    &#123;209, <span class="hljs-string">&quot;io_submit&quot;</span>&#125;,<br>    &#123;210, <span class="hljs-string">&quot;io_cancel&quot;</span>&#125;,<br>    &#123;211, <span class="hljs-string">&quot;get_thread_area&quot;</span>&#125;,<br>    &#123;212, <span class="hljs-string">&quot;lookup_dcookie&quot;</span>&#125;,<br>    &#123;213, <span class="hljs-string">&quot;epoll_create&quot;</span>&#125;,<br>    &#123;214, <span class="hljs-string">&quot;epoll_ctl_old&quot;</span>&#125;,<br>    &#123;215, <span class="hljs-string">&quot;epoll_wait_old&quot;</span>&#125;,<br>    &#123;216, <span class="hljs-string">&quot;remap_file_pages&quot;</span>&#125;,<br>    &#123;217, <span class="hljs-string">&quot;getdents64&quot;</span>&#125;,<br>    &#123;218, <span class="hljs-string">&quot;set_tid_address&quot;</span>&#125;,<br>    &#123;219, <span class="hljs-string">&quot;restart_syscall&quot;</span>&#125;,<br>    &#123;220, <span class="hljs-string">&quot;semtimedop&quot;</span>&#125;,<br>    &#123;221, <span class="hljs-string">&quot;fadvise64&quot;</span>&#125;,<br>    &#123;222, <span class="hljs-string">&quot;timer_create&quot;</span>&#125;,<br>    &#123;223, <span class="hljs-string">&quot;timer_settime&quot;</span>&#125;,<br>    &#123;224, <span class="hljs-string">&quot;timer_gettime&quot;</span>&#125;,<br>    &#123;225, <span class="hljs-string">&quot;timer_getoverrun&quot;</span>&#125;,<br>    &#123;226, <span class="hljs-string">&quot;timer_delete&quot;</span>&#125;,<br>    &#123;227, <span class="hljs-string">&quot;clock_settime&quot;</span>&#125;,<br>    &#123;228, <span class="hljs-string">&quot;clock_gettime&quot;</span>&#125;,<br>    &#123;229, <span class="hljs-string">&quot;clock_getres&quot;</span>&#125;,<br>    &#123;230, <span class="hljs-string">&quot;clock_nanosleep&quot;</span>&#125;,<br>    &#123;231, <span class="hljs-string">&quot;exit_group&quot;</span>&#125;,<br>    &#123;232, <span class="hljs-string">&quot;epoll_wait&quot;</span>&#125;,<br>    &#123;233, <span class="hljs-string">&quot;epoll_ctl&quot;</span>&#125;,<br>    &#123;234, <span class="hljs-string">&quot;tgkill&quot;</span>&#125;,<br>    &#123;235, <span class="hljs-string">&quot;utimes&quot;</span>&#125;,<br>    &#123;236, <span class="hljs-string">&quot;vserver&quot;</span>&#125;,<br>    &#123;237, <span class="hljs-string">&quot;mbind&quot;</span>&#125;,<br>    &#123;238, <span class="hljs-string">&quot;set_mempolicy&quot;</span>&#125;,<br>    &#123;239, <span class="hljs-string">&quot;get_mempolicy&quot;</span>&#125;,<br>    &#123;240, <span class="hljs-string">&quot;mq_open&quot;</span>&#125;,<br>    &#123;241, <span class="hljs-string">&quot;mq_unlink&quot;</span>&#125;,<br>    &#123;242, <span class="hljs-string">&quot;mq_timedsend&quot;</span>&#125;,<br>    &#123;243, <span class="hljs-string">&quot;mq_timedreceive&quot;</span>&#125;,<br>    &#123;244, <span class="hljs-string">&quot;mq_notify&quot;</span>&#125;,<br>    &#123;245, <span class="hljs-string">&quot;mq_getsetattr&quot;</span>&#125;,<br>    &#123;246, <span class="hljs-string">&quot;kexec_load&quot;</span>&#125;,<br>    &#123;247, <span class="hljs-string">&quot;waitid&quot;</span>&#125;,<br>    &#123;248, <span class="hljs-string">&quot;add_key&quot;</span>&#125;,<br>    &#123;249, <span class="hljs-string">&quot;request_key&quot;</span>&#125;,<br>    &#123;250, <span class="hljs-string">&quot;keyctl&quot;</span>&#125;,<br>    &#123;251, <span class="hljs-string">&quot;ioprio_set&quot;</span>&#125;,<br>    &#123;252, <span class="hljs-string">&quot;ioprio_get&quot;</span>&#125;,<br>    &#123;253, <span class="hljs-string">&quot;inotify_init&quot;</span>&#125;,<br>    &#123;254, <span class="hljs-string">&quot;inotify_add_watch&quot;</span>&#125;,<br>    &#123;255, <span class="hljs-string">&quot;inotify_rm_watch&quot;</span>&#125;,<br>    &#123;256, <span class="hljs-string">&quot;migrate_pages&quot;</span>&#125;,<br>    &#123;257, <span class="hljs-string">&quot;openat&quot;</span>&#125;,<br>    &#123;258, <span class="hljs-string">&quot;mkdirat&quot;</span>&#125;,<br>    &#123;259, <span class="hljs-string">&quot;mknodat&quot;</span>&#125;,<br>    &#123;260, <span class="hljs-string">&quot;fchownat&quot;</span>&#125;,<br>    &#123;261, <span class="hljs-string">&quot;futimesat&quot;</span>&#125;,<br>    &#123;262, <span class="hljs-string">&quot;newfstatat&quot;</span>&#125;,<br>    &#123;263, <span class="hljs-string">&quot;unlinkat&quot;</span>&#125;,<br>    &#123;264, <span class="hljs-string">&quot;renameat&quot;</span>&#125;,<br>    &#123;265, <span class="hljs-string">&quot;linkat&quot;</span>&#125;,<br>    &#123;266, <span class="hljs-string">&quot;symlinkat&quot;</span>&#125;,<br>    &#123;267, <span class="hljs-string">&quot;readlinkat&quot;</span>&#125;,<br>    &#123;268, <span class="hljs-string">&quot;fchmodat&quot;</span>&#125;,<br>    &#123;269, <span class="hljs-string">&quot;faccessat&quot;</span>&#125;,<br>    &#123;270, <span class="hljs-string">&quot;pselect6&quot;</span>&#125;,<br>    &#123;271, <span class="hljs-string">&quot;ppoll&quot;</span>&#125;,<br>    &#123;272, <span class="hljs-string">&quot;unshare&quot;</span>&#125;,<br>    &#123;273, <span class="hljs-string">&quot;set_robust_list&quot;</span>&#125;,<br>    &#123;274, <span class="hljs-string">&quot;get_robust_list&quot;</span>&#125;,<br>    &#123;275, <span class="hljs-string">&quot;splice&quot;</span>&#125;,<br>    &#123;276, <span class="hljs-string">&quot;tee&quot;</span>&#125;,<br>    &#123;277, <span class="hljs-string">&quot;sync_file_range&quot;</span>&#125;,<br>    &#123;278, <span class="hljs-string">&quot;vmsplice&quot;</span>&#125;,<br>    &#123;279, <span class="hljs-string">&quot;move_pages&quot;</span>&#125;,<br>    &#123;280, <span class="hljs-string">&quot;utimensat&quot;</span>&#125;,<br>    &#123;281, <span class="hljs-string">&quot;epoll_pwait&quot;</span>&#125;,<br>    &#123;282, <span class="hljs-string">&quot;signalfd&quot;</span>&#125;,<br>    &#123;283, <span class="hljs-string">&quot;timerfd_create&quot;</span>&#125;,<br>    &#123;284, <span class="hljs-string">&quot;eventfd&quot;</span>&#125;,<br>    &#123;285, <span class="hljs-string">&quot;fallocate&quot;</span>&#125;,<br>    &#123;286, <span class="hljs-string">&quot;timerfd_settime&quot;</span>&#125;,<br>    &#123;287, <span class="hljs-string">&quot;timerfd_gettime&quot;</span>&#125;,<br>    &#123;288, <span class="hljs-string">&quot;accept4&quot;</span>&#125;,<br>    &#123;289, <span class="hljs-string">&quot;signalfd4&quot;</span>&#125;,<br>    &#123;290, <span class="hljs-string">&quot;eventfd2&quot;</span>&#125;,<br>    &#123;291, <span class="hljs-string">&quot;epoll_create1&quot;</span>&#125;,<br>    &#123;292, <span class="hljs-string">&quot;dup3&quot;</span>&#125;,<br>    &#123;293, <span class="hljs-string">&quot;pipe2&quot;</span>&#125;,<br>    &#123;294, <span class="hljs-string">&quot;inotify_init1&quot;</span>&#125;,<br>    &#123;295, <span class="hljs-string">&quot;preadv&quot;</span>&#125;,<br>    &#123;296, <span class="hljs-string">&quot;pwritev&quot;</span>&#125;,<br>    &#123;297, <span class="hljs-string">&quot;rt_tgsigqueueinfo&quot;</span>&#125;,<br>    &#123;298, <span class="hljs-string">&quot;perf_event_open&quot;</span>&#125;,<br>    &#123;299, <span class="hljs-string">&quot;recvmmsg&quot;</span>&#125;,<br>    &#123;300, <span class="hljs-string">&quot;fanotify_init&quot;</span>&#125;,<br>    &#123;301, <span class="hljs-string">&quot;fanotify_mark&quot;</span>&#125;,<br>    &#123;302, <span class="hljs-string">&quot;prlimit64&quot;</span>&#125;,<br>    &#123;303, <span class="hljs-string">&quot;name_to_handle_at&quot;</span>&#125;,<br>    &#123;304, <span class="hljs-string">&quot;open_by_handle_at&quot;</span>&#125;,<br>    &#123;305, <span class="hljs-string">&quot;clock_adjtime&quot;</span>&#125;,<br>    &#123;306, <span class="hljs-string">&quot;syncfs&quot;</span>&#125;,<br>    &#123;307, <span class="hljs-string">&quot;sendmmsg&quot;</span>&#125;,<br>    &#123;308, <span class="hljs-string">&quot;setns&quot;</span>&#125;,<br>    &#123;309, <span class="hljs-string">&quot;getcpu&quot;</span>&#125;,<br>    &#123;310, <span class="hljs-string">&quot;process_vm_readv&quot;</span>&#125;,<br>    &#123;311, <span class="hljs-string">&quot;process_vm_writev&quot;</span>&#125;,<br>    &#123;312, <span class="hljs-string">&quot;kcmp&quot;</span>&#125;,<br>    &#123;313, <span class="hljs-string">&quot;finit_module&quot;</span>&#125;,<br>    &#123;314, <span class="hljs-string">&quot;sched_setattr&quot;</span>&#125;,<br>    &#123;315, <span class="hljs-string">&quot;sched_getattr&quot;</span>&#125;,<br>    &#123;316, <span class="hljs-string">&quot;renameat2&quot;</span>&#125;,<br>    &#123;317, <span class="hljs-string">&quot;seccomp&quot;</span>&#125;,<br>    &#123;318, <span class="hljs-string">&quot;getrandom&quot;</span>&#125;,<br>    &#123;319, <span class="hljs-string">&quot;memfd_create&quot;</span>&#125;,<br>    &#123;320, <span class="hljs-string">&quot;kexec_file_load&quot;</span>&#125;,<br>    &#123;321, <span class="hljs-string">&quot;bpf&quot;</span>&#125;,<br>    &#123;322, <span class="hljs-string">&quot;execveat&quot;</span>&#125;,<br>    &#123;323, <span class="hljs-string">&quot;userfaultfd&quot;</span>&#125;,<br>    &#123;324, <span class="hljs-string">&quot;membarrier&quot;</span>&#125;,<br>    &#123;325, <span class="hljs-string">&quot;mlock2&quot;</span>&#125;,<br>    &#123;326, <span class="hljs-string">&quot;copy_file_range&quot;</span>&#125;,<br>    &#123;327, <span class="hljs-string">&quot;preadv2&quot;</span>&#125;,<br>    &#123;328, <span class="hljs-string">&quot;pwritev2&quot;</span>&#125;,<br>    &#123;329, <span class="hljs-string">&quot;pkey_mprotect&quot;</span>&#125;,<br>    &#123;330, <span class="hljs-string">&quot;pkey_alloc&quot;</span>&#125;,<br>    &#123;331, <span class="hljs-string">&quot;pkey_free&quot;</span>&#125;,<br>    &#123;332, <span class="hljs-string">&quot;statx&quot;</span>&#125;,<br>    &#123;333, <span class="hljs-string">&quot;io_pgetevents&quot;</span>&#125;,<br>    &#123;334, <span class="hljs-string">&quot;rseq&quot;</span>&#125;,<br>    &#123;424, <span class="hljs-string">&quot;pidfd_send_signal&quot;</span>&#125;,<br>    &#123;425, <span class="hljs-string">&quot;io_uring_setup&quot;</span>&#125;,<br>    &#123;426, <span class="hljs-string">&quot;io_uring_enter&quot;</span>&#125;,<br>    &#123;427, <span class="hljs-string">&quot;io_uring_register&quot;</span>&#125;,<br>    &#123;428, <span class="hljs-string">&quot;open_tree&quot;</span>&#125;,<br>    &#123;429, <span class="hljs-string">&quot;move_mount&quot;</span>&#125;,<br>    &#123;430, <span class="hljs-string">&quot;fsopen&quot;</span>&#125;,<br>    &#123;431, <span class="hljs-string">&quot;fsconfig&quot;</span>&#125;,<br>    &#123;432, <span class="hljs-string">&quot;fsmount&quot;</span>&#125;,<br>    &#123;433, <span class="hljs-string">&quot;fspick&quot;</span>&#125;,<br>    &#123;434, <span class="hljs-string">&quot;pidfd_open&quot;</span>&#125;,<br>    &#123;435, <span class="hljs-string">&quot;clone3&quot;</span>&#125;,<br>    &#123;436, <span class="hljs-string">&quot;close_range&quot;</span>&#125;,<br>    &#123;437, <span class="hljs-string">&quot;openat2&quot;</span>&#125;,<br>    &#123;438, <span class="hljs-string">&quot;pidfd_getfd&quot;</span>&#125;,<br>    &#123;439, <span class="hljs-string">&quot;faccessat2&quot;</span>&#125;,<br>    &#123;440, <span class="hljs-string">&quot;process_madvise&quot;</span>&#125;,<br>    &#123;512, <span class="hljs-string">&quot;rt_sigaction&quot;</span>&#125;,<br>    &#123;513, <span class="hljs-string">&quot;rt_sigreturn&quot;</span>&#125;,<br>    &#123;514, <span class="hljs-string">&quot;ioctl&quot;</span>&#125;,<br>    &#123;515, <span class="hljs-string">&quot;readv&quot;</span>&#125;,<br>    &#123;516, <span class="hljs-string">&quot;writev&quot;</span>&#125;,<br>    &#123;517, <span class="hljs-string">&quot;recvfrom&quot;</span>&#125;,<br>    &#123;518, <span class="hljs-string">&quot;sendmsg&quot;</span>&#125;,<br>    &#123;519, <span class="hljs-string">&quot;recvmsg&quot;</span>&#125;,<br>    &#123;520, <span class="hljs-string">&quot;execve&quot;</span>&#125;,<br>    &#123;521, <span class="hljs-string">&quot;ptrace&quot;</span>&#125;,<br>    &#123;522, <span class="hljs-string">&quot;rt_sigpending&quot;</span>&#125;,<br>    &#123;523, <span class="hljs-string">&quot;rt_sigtimedwait&quot;</span>&#125;,<br>    &#123;524, <span class="hljs-string">&quot;rt_sigqueueinfo&quot;</span>&#125;,<br>    &#123;525, <span class="hljs-string">&quot;sigaltstack&quot;</span>&#125;,<br>    &#123;526, <span class="hljs-string">&quot;timer_create&quot;</span>&#125;,<br>    &#123;527, <span class="hljs-string">&quot;mq_notify&quot;</span>&#125;,<br>    &#123;528, <span class="hljs-string">&quot;kexec_load&quot;</span>&#125;,<br>    &#123;529, <span class="hljs-string">&quot;waitid&quot;</span>&#125;,<br>    &#123;530, <span class="hljs-string">&quot;set_robust_list&quot;</span>&#125;,<br>    &#123;531, <span class="hljs-string">&quot;get_robust_list&quot;</span>&#125;,<br>    &#123;532, <span class="hljs-string">&quot;vmsplice&quot;</span>&#125;,<br>    &#123;533, <span class="hljs-string">&quot;move_pages&quot;</span>&#125;,<br>    &#123;534, <span class="hljs-string">&quot;preadv&quot;</span>&#125;,<br>    &#123;535, <span class="hljs-string">&quot;pwritev&quot;</span>&#125;,<br>    &#123;536, <span class="hljs-string">&quot;rt_tgsigqueueinfo&quot;</span>&#125;,<br>    &#123;537, <span class="hljs-string">&quot;recvmmsg&quot;</span>&#125;,<br>    &#123;538, <span class="hljs-string">&quot;sendmmsg&quot;</span>&#125;,<br>    &#123;539, <span class="hljs-string">&quot;process_vm_readv&quot;</span>&#125;,<br>    &#123;540, <span class="hljs-string">&quot;process_vm_writev&quot;</span>&#125;,<br>    &#123;541, <span class="hljs-string">&quot;setsockopt&quot;</span>&#125;,<br>    &#123;542, <span class="hljs-string">&quot;getsockopt&quot;</span>&#125;,<br>    &#123;543, <span class="hljs-string">&quot;io_setup&quot;</span>&#125;,<br>    &#123;544, <span class="hljs-string">&quot;io_submit&quot;</span>&#125;,<br>    &#123;545, <span class="hljs-string">&quot;execveat&quot;</span>&#125;,<br>    &#123;546, <span class="hljs-string">&quot;preadv2&quot;</span>&#125;,<br>    &#123;547, <span class="hljs-string">&quot;pwritev2&quot;</span>&#125;,<br>    &#123;-1, NULL&#125;,<br>&#125;;<br><br>char *find_syscall_symbol(int code) &#123;<br>    struct syscall *sc;<br><br>    <span class="hljs-keyword">for</span> (sc = syscall_table; sc-&gt;code &gt;= 0; sc++) &#123;<br>        <span class="hljs-keyword">if</span> (sc-&gt;code == code) &#123;<br>            <span class="hljs-built_in">return</span> sc-&gt;name;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> NULL;<br>&#125;<br><br>int main(int argc, char *argv[])<br>&#123;<br>    pid_t child;<br>    int status;<br>    struct user_regs_struct regs;<br>    int orig_rax;<br><br>    child = fork();<br>    <span class="hljs-keyword">if</span> (child == 0) &#123;<br>        ptrace(PTRACE_TRACEME, 0, NULL, NULL);<br>        execl(<span class="hljs-string">&quot;/bin/ls&quot;</span>, <span class="hljs-string">&quot;/bin/ls&quot;</span>, NULL);<br>        <span class="hljs-built_in">exit</span>(0);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">wait</span>(&amp;status); // 接收被子进程发送过来的 SIGCHLD 信号<br><br>        <span class="hljs-keyword">while</span> (1) &#123;<br>            // 1. 发送 PTRACE_SYSCALL 命令给被跟踪进程 (调用系统调用前，可以获取系统调用的参数)<br>            ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>            <span class="hljs-built_in">wait</span>(&amp;status); // 接收被子进程发送过来的 SIGCHLD 信号<br>            <span class="hljs-keyword">if</span>(WIFEXITED(status)) &#123; // 如果子进程退出了, 那么终止跟踪<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br><br>            ptrace(PTRACE_GETREGS, child, 0, &amp;regs); // 获取被跟踪进程寄存器的值<br><br>            orig_rax = regs.orig_rax; // 获取rax寄存器的值<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;syscall: %s()\n&quot;</span>, find_syscall_symbol(orig_rax)); // 打印rax寄存器的值<br><br>            // 2. 发送 PTRACE_SYSCALL 命令给被跟踪进程 (调用系统调用后，可以获取系统调用的返回值)<br>            ptrace(PTRACE_SYSCALL, child, NULL, NULL);<br><br>            <span class="hljs-built_in">wait</span>(&amp;status); // 接收被子进程发送过来的 SIGCHLD 信号<br>            <span class="hljs-keyword">if</span>(WIFEXITED(status)) &#123; // 如果子进程退出了, 那么终止跟踪<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> trcae </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android内存读写断点--mprotect</title>
      <link href="/2022/11/14/Android%E5%86%85%E5%AD%98%E8%AF%BB%E5%86%99%E6%96%AD%E7%82%B9-mprotect/"/>
      <url>/2022/11/14/Android%E5%86%85%E5%AD%98%E8%AF%BB%E5%86%99%E6%96%AD%E7%82%B9-mprotect/</url>
      
        <content type="html"><![CDATA[<p>这几天听朋友说 GG 可以在不加载驱动的情况下设置内存读写断点，类似 PC 上 ce 的 “查看谁访问了该内存” 功能。网上也查了下资料，发现其实不难.</p><p>简单来说，就是先注册一个异常处理函数，然后把内存属性设置为无法访问 (PROT_NONE), 然后当程序读取或改写这段内存后会触发异常，在异常处理函数里获取到 pc 寄存器的值后恢复内存属性即可.</p><ol><li>注册异常处理函数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">struct sigaction act ;<br>memset(&amp;act ,0 ,sizeof(act));<br>act.sa_sigaction = &amp;handler ; //异常处理函数<br>act.sa_flags =SA_SIGINFO |SA_RESETHAND|SA_NODEFER;<br>sigaction(SIGSEGV,&amp;act ,NULL); //注册异常处理函数,SIGSEGV表示读取或写入无效内存的错误类型<br>void handler (int sig ,siginfo_t *siginfo , void * context)&#123;<br>    //匹配我们要监控的地址<br>    <span class="hljs-keyword">if</span> (siginfo-&gt;si_addr==&amp;i)&#123;<br>        ucontext_t ctx=(*(ucontext_t*)context);<br>        LOGD(<span class="hljs-string">&quot;pc = 0x%llx \n&quot;</span>,ctx.uc_mcontext.pc); //查看是哪个代码访问了这段内存<br>    &#125;<br>    //还原原来内存的属性<br>    int pageSize = getpagesize();<br>    unsigned long addr= reinterpret_cast&lt;unsigned long&gt;(&amp;start);<br>    unsigned long mem = addr &amp; (~(pageSize - 1));<br>    LOGD(<span class="hljs-string">&quot;mprotect:%d&quot;</span>,mprotect(reinterpret_cast&lt;void *&gt;(mem), pageSize, PROT_READ|PROT_WRITE));<br>    <span class="hljs-built_in">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>设置要读取的内存的属性，注意这个内存必须按页对齐。这里以读取 i 为例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">int pageSize = getpagesize();<br>unsigned long addr= reinterpret_cast&lt;unsigned long&gt;(&amp;i);<br>start = addr &amp; (~(pageSize - 1)); //按页对齐,start表示对齐后的内存地址<br>LOGD(<span class="hljs-string">&quot;start：%p &quot;</span>,start);<br>LOGD(<span class="hljs-string">&quot;pageSize：%p &quot;</span>,pageSize);<br>LOGD(<span class="hljs-string">&quot;mprotect:%d&quot;</span>,mprotect(reinterpret_cast&lt;void *&gt;(start), pageSize, PROT_NONE)); //0表示成功,-1表示失败<br></code></pre></td></tr></table></figure>效果如下:<br><img src="/.com//../../img/0.png" alt="header"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android内存读写检测</title>
      <link href="/2022/11/14/Android%E5%86%85%E5%AD%98%E8%AF%BB%E5%86%99%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/11/14/Android%E5%86%85%E5%AD%98%E8%AF%BB%E5%86%99%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="mincore检测原理"><a href="#mincore检测原理" class="headerlink" title="mincore检测原理"></a>mincore检测原理</h1><p>缺页异常比如我们调用 mmap 来映射内存，为了防止内存无效分配，该内存空间在未访问时是不会创建物理内存页的。当程序需要使用这块内存区域时，会触发缺页中断，然后系统才会创建物理内存页，就是先用 mmap 申请一段内存，如果 ce, 或 GG 读取这段内存后，那么这段内存就会由缺页变成非缺页，而内存的缺页与否可以通过调用 mincore 判断.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.mmap 申请内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">char * memory= nullptr;<br>memory= (char*)mmap(nullptr,0x4000, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_ANONYMOUS | MAP_PRIVATE, 0, 0);<br></code></pre></td></tr></table></figure><p>如果不对 memory 进行读写，那么 memory 默认为缺页状态</p><p>2.mincore 判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">int pageSize = getpagesize();<br>unsigned char vec = 0;<br>//memory[0]=1; 这个操作会把memory改为非缺页状态<br>unsigned long addr= reinterpret_cast&lt;unsigned long&gt;(memory);<br>unsigned long start = addr &amp; (~(pageSize - 1));<br>mincore((void *)start, pageSize, &amp;vec);<br><span class="hljs-keyword">if</span> (vec == 1)<br>&#123;<br>    LOGD(<span class="hljs-string">&quot;内存页：%p 存在于物理内存空间&quot;</span>,addr);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    LOGD(<span class="hljs-string">&quot;内存页：%p 不存在于物理内存空间&quot;</span>,addr);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>当 ce 指定读取该内存时，会发现该内存已经处于非缺页状态.</p><p>但是使用 ce 全局搜索内存时，并没有检测到这段内存.<br><img src="/.com//../../img/1.png" alt="header"></p><h1 id="inotify检测原理"><a href="#inotify检测原理" class="headerlink" title="inotify检测原理"></a>inotify检测原理</h1><p>app 里使用 inotify 机制监控对内存的读写操作，引用百度百科的一句话.</p><p>Inotify 是一个 Linux 内核特性，它监控文件系统，并且及时向专门的应用程序发出相关的事件警告，比如删除、读、写和卸载操作等。您还可以跟踪活动的源头和目标等细节。</p><p>使用</p><ol><li>新建一个监控线程.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pthread_t ptMem, t, ptPageMap;<br>int iRet = 0;<br>iRet = pthread_create(&amp;ptPageMap, NULL, thread_watchInotifyDump, NULL);<br></code></pre></td></tr></table></figure></li><li>初始化监控<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">char dirName[NAME_MAX] = &#123;0&#125;;<br>//snprintf(dirName, NAME_MAX, <span class="hljs-string">&quot;/proc/%d&quot;</span>, getpid());<br><br>//用于监控/proc/pid/mem的数据<br>snprintf(dirName, NAME_MAX, <span class="hljs-string">&quot;/proc/%d/mem&quot;</span>, getpid());<br><br>LOGD(<span class="hljs-string">&quot;监控位置 : %s\n&quot;</span>, dirName);<br><br>int fd = inotify_init();<br><span class="hljs-keyword">if</span> (fd &lt; 0)<br>&#123;<br>    LOGE(<span class="hljs-string">&quot;inotify_init err.\n&quot;</span>);<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br>int wd = inotify_add_watch(fd, dirName, IN_ALL_EVENTS);<br><span class="hljs-keyword">if</span> (wd &lt; 0)<br>&#123;<br><br>    LOGE(<span class="hljs-string">&quot;inotify_add_watch err.\n&quot;</span>);<br>    close(fd);<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>3.select 读取监控消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">const int buflen = sizeof(struct inotify_event) * 0x100;<br>char buf[buflen] = &#123;0&#125;;<br>fd_set readfds;<br>int count[5] = &#123;0&#125;;<br><span class="hljs-keyword">while</span> (1)<br>&#123;<br>    FD_ZERO(&amp;readfds);<br>    FD_SET(fd, &amp;readfds);<br>    int iRet = select(fd + 1, &amp;readfds, 0, 0, 0); // 此处阻塞<br>    LOGD(<span class="hljs-string">&quot;iRet的返回值:%d\n&quot;</span>, iRet);<br>    <span class="hljs-keyword">if</span> (-1 == iRet)<br>        <span class="hljs-built_in">break</span>;<br>    <span class="hljs-keyword">if</span> (iRet)<br>    &#123;<br>        memset(buf, 0, buflen);<br>        int len = <span class="hljs-built_in">read</span>(fd, buf, buflen);<br>        int i = 0;<br>        <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>            struct inotify_event *event = (struct inotify_event *)&amp;buf[i];<br>            LOGD(<span class="hljs-string">&quot;event mask:%d\n&quot;</span>, event-&gt;mask);<br>            <span class="hljs-keyword">if</span> ((event-&gt;mask &amp; IN_ACCESS)) &#123;<br>                ++count[0];<br>                LOGD(<span class="hljs-string">&quot;1.IN_ACCESS,第%d次.\n\n&quot;</span>, count[0]);<br>                //__asm __volatile(<span class="hljs-string">&quot;.int 0x8c89fa98&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((event-&gt;mask &amp; IN_OPEN))&#123;<br>                ++count[1];<br>                LOGD(<span class="hljs-string">&quot;2.IN_OPEN,第%d次.\n\n&quot;</span>,  count[1]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((event-&gt;mask &amp; IN_CLOSE))&#123;<br>                ++count[2];<br>                LOGD(<span class="hljs-string">&quot;3.IN_CLOSE,第%d次.\n\n&quot;</span>, count[2]);<br>            &#125;<br>            i += sizeof(struct inotify_event) + event-&gt;len;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果<br>当用 ceserver 读取内存时。<br><img src="/.com//../../img/2.png" alt="header"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 内存 </tag>
            
            <tag> 检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Magisk注入app并嵌入imgui</title>
      <link href="/2022/11/14/Magisk%E6%B3%A8%E5%85%A5app%E5%B9%B6%E5%B5%8C%E5%85%A5imgui/"/>
      <url>/2022/11/14/Magisk%E6%B3%A8%E5%85%A5app%E5%B9%B6%E5%B5%8C%E5%85%A5imgui/</url>
      
        <content type="html"><![CDATA[<p>Android特殊绘制方框的方法</p><h2 id="Android特殊绘制方框的方法"><a href="#Android特殊绘制方框的方法" class="headerlink" title="Android特殊绘制方框的方法"></a>Android特殊绘制方框的方法</h2><p>需要关闭 selinux 并且要把 linker 和 libc 的路径分别改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/apex/com.android.runtime/bin/linker64<br>/apex/com.android.runtime/lib64/bionic/libc.so<br></code></pre></td></tr></table></figure><p>具体可以看这篇 github <a href="https://github.com/SsageParuders/AndroidPtraceInject">github</a></p><p>说回正题，既然 Surfaceflinger 进程没有 eglSwapBuffers 函数，那么 eglSwapBuffers 肯定是在 app 内部调用的，直接 hook 了 app 内部 eglSwapBuffers 函数就行.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">static void <span class="hljs-function"><span class="hljs-title">init_dobby</span></span>()<br>&#123;<br>    void *sym_eglSwapBuffers = DobbySymbolResolver(NULL, <span class="hljs-string">&quot;eglSwapBuffers&quot;</span>);<br>    <span class="hljs-keyword">if</span> (NULL != sym_eglSwapBuffers)<br>    &#123;<br>        LOGD(<span class="hljs-string">&quot;sym_eglSwapBuffers:%llx&quot;</span>, (unsigned long long)sym_eglSwapBuffers);<br>        DobbyHook(sym_eglSwapBuffers, (void *)new_eglSwapBuffers, (void **)&amp;ori_eglSwapBuffers);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我这里选用 Dobby 的 hook 框架，参考了使用<a href="https://www.cnblogs.com/luoyesiqiu/p/magisk_riru.html#at?hmsr=toutiao.io&utm_campaign=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io">Magisk+riru 实现全局改机的用法.</a><br>在 hook 后的 new_eglSwapBuffers 里完成 imgui 的初始化，显示即可。基本上不需要怎么改动 imgui 的代码.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">IMGUI_CHECKVERSION();<br>ImGui::CreateContext();<br>ImGuiIO&amp; io = ImGui::GetIO();<br><br>// Disable loading/saving of .ini file from disk.<br>// FIXME: Consider using LoadIniSettingsFromMemory() / SaveIniSettingsToMemory() to save <span class="hljs-keyword">in</span> appropriate location <span class="hljs-keyword">for</span> Android.<br>io.IniFilename = NULL;<br><br>// Setup Dear ImGui style<br>ImGui::StyleColorsDark();<br>//ImGui::StyleColorsClassic();<br><br>// Setup Platform/Renderer backends<br>ImGui_ImplAndroid_Init(nullptr);<br>ImGui_ImplOpenGL3_Init(<span class="hljs-string">&quot;#version 300 es&quot;</span>);<br>g_Initialized = <span class="hljs-literal">true</span>;<br>.......<br></code></pre></td></tr></table></figure><p>之后用 Zygisk-ModuleTemplate 模板编译，magisk 安装就行.</p><p>不足之处:</p><ol><li>由于和游戏共用 surface, 如果绘制异常游戏直接闪退.</li><li>进行复杂绘制的时候会卡游戏画面，降低帧率.</li><li>兼容性差，不支持大部分的 ue4 引擎的游戏.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ptrace的各种操作</title>
      <link href="/2022/06/27/ptrace%E7%9A%84%E5%90%84%E7%A7%8D%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/06/27/ptrace%E7%9A%84%E5%90%84%E7%A7%8D%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="ptrace注入读取进程内存数据"><a href="#ptrace注入读取进程内存数据" class="headerlink" title="ptrace注入读取进程内存数据"></a>ptrace注入读取进程内存数据</h1><h2 id="一、读取进程内存数据"><a href="#一、读取进程内存数据" class="headerlink" title="一、读取进程内存数据"></a>一、读取进程内存数据</h2><p>使用 ptrace 函数读取内存数据 :​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//传入的第一个参数可以是 PTRACE_PEEKTEXT / PTRACE_PEEKDATA / PTRACE_PEEKUSER , 这三个参数效果相同 ;<br>//传入的第二个参数是 进程号 PID , ptrace 函数可以同时调试多个进程 ;<br>//传入的第三个参数是内存地址 , void* 指针类型的 ;<br>//传入的第四个参数默认为 0 ;<br>ptrace(PTRACE_PEEKTEXT, m_nPid, (void*)pRemoteAddr, 0);<br></code></pre></td></tr></table></figure><ol><li>上述读取进程内存数据的 ptrace 方法的返回值是一个 4 字节数据 , 32 位的设备上 , 最长只能读取 4 字节 ; 可以在 for 循环中读取内存中的数据 ;</li></ol><h2 id="二、读取流程"><a href="#二、读取流程" class="headerlink" title="二、读取流程"></a>二、读取流程</h2><p>读取进程内存数据时 , 每次最多只能读取 4 字节数据 , 先根据读取的大小 , 计算出读取次数 ,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 每次读取 4 字节 , 读取次数为 nSize / 4<br>  j = nSize / 4;<br></code></pre></td></tr></table></figure><p>然后再计算出最后不足 4 字节的部分 ,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 读取最后不满 4 个字节的数据 <br>  remain = nSize % 4;<br></code></pre></td></tr></table></figure><p>读取数据时 , 先循环 j 次 , 读取 j x 4 字节数据 ,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for (i = 0; i &lt; j; i++) &#123;<br>    // 32 位的设备上 , 最长只能读取 4 字节 <br>    d.val = ptrace(PTRACE_PEEKTEXT, m_nPid, (void*)pRemoteAddr, 0);<br>    // 将读取的数据拷贝到 laddr 地址中 <br>    memcpy(laddr, d.chars, 4);<br>    pRemoteAddr += 4;<br>    laddr += 4;<br>  &#125;<br></code></pre></td></tr></table></figure><p>最后再读取一次末尾不足 4 字节的数据 ;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 读取最后不足 4 字节的数据 <br>  <span class="hljs-keyword">if</span> (remain &gt; 0) &#123;<br>    d.val = ptrace(PTRACE_PEEKTEXT, m_nPid, (void*)pRemoteAddr, 0);<br>    memcpy(laddr, d.chars, remain);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h2><p>使用 ptrace 函数读取内存完整代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">int CPtrace::<span class="hljs-built_in">read</span>(char* pRemoteAddr, char* pBuf, size_t nSize)<br>&#123;<br>  uint32_t i = 0, j = 0, remain = 0;<br>  // 拷贝数据的目的地址 , 该指针需要不断累加计算 , 记录已经读取的数据<br>  char *laddr;<br>  // 联合体 , 在同一个内存地址上 , 既可以以 long 类型解析这块数据 , 也可以以 char 数组类型解析这块数据<br>  union u &#123;<br>    long val;<br>    char chars[sizeof(long)];<br>  &#125; d;<br>  // 每次读取 4 字节 , 读取次数为 nSize / 4<br>  j = nSize / 4;<br>  // 读取最后不满 4 个字节的数据 <br>  remain = nSize % 4;<br>  // 设置读取数据的最终存放地址 <br>  laddr = pBuf;<br><br>  <span class="hljs-keyword">for</span> (i = 0; i &lt; j; i++) &#123;<br>    // 32 位的设备上 , 最长只能读取 4 字节 <br>    d.val = ptrace(PTRACE_PEEKTEXT, m_nPid, (void*)pRemoteAddr, 0);<br>    // 将读取的数据拷贝到 laddr 地址中 <br>    memcpy(laddr, d.chars, 4);<br>    pRemoteAddr += 4;<br>    laddr += 4;<br>  &#125;<br>  // 读取最后不足 4 字节的数据 <br>  <span class="hljs-keyword">if</span> (remain &gt; 0) &#123;<br>    d.val = ptrace(PTRACE_PEEKTEXT, m_nPid, (void*)pRemoteAddr, 0);<br>    memcpy(laddr, d.chars, remain);<br>  &#125;<br>  <span class="hljs-built_in">return</span> PTERR_SUCCESS;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="ptrace注入So"><a href="#ptrace注入So" class="headerlink" title="ptrace注入So"></a>ptrace注入So</h1><p>so注入的主要思路是：<br>找到目标进程<br>使用ptrace跟踪目标进程，保存目标进程的状态<br>获得mmap、dlopen、dlsym等库函数在目标进程中的偏移地址<br>调用mmap在目标进程内部申请一段内存空间<br>将我们的ShellCode写入到刚才申请的内存空间中<br>dlopen打开Shellcode，dlsym调用Shellcode库的函数<br>恢复原so状态，detach</p><h2 id="核心点-ptrace"><a href="#核心点-ptrace" class="headerlink" title="核心点 ptrace"></a>核心点 ptrace</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;sys/ptrace.h&gt;</span><br><br>long ptrace（enum _ptrace_request request,pid_t pid,void * addr ,void *data）;<br><br>    1). enum __ptrace_request request：指示了ptrace要执行的命令。<br>    2). pid_t pid: 指示ptrace要跟踪的进程。<br>    3). void *addr: 指示要监控的内存地址。<br>    4). void *data: 存放读取出的或者要写入的数据。<br></code></pre></td></tr></table></figure><p>简单点，ptrace是个系统调用，功能是提供一个进程（父进程）监控和管理另一个进程（子进程）的能力，并允许父进程检查和替换子进程的内核镜像(包括寄存器)的值。</p><p>基本原理是: 当使用了ptrace跟踪后，所有发送给被跟踪的子进程的信号(除了SIGKILL)，都会被转发给父进程，而子进程则会被阻塞，这时子进程的状态就会被系统标注为TASK_TRACED。而父进程收到信号后，就可以对停止下来的子进程进行检查和修改，然后让子进程继续运行。</p><h2 id="ptrace命令"><a href="#ptrace命令" class="headerlink" title="ptrace命令"></a>ptrace命令</h2><p>1). 用PTRACE_ATTACH或者PTRACE_TRACEME 建立进程间的跟踪关系。<br>2). PTRACE_PEEKTEXT, PTRACE_PEEKDATA, PTRACE_PEEKUSR等读取子进程内存&#x2F;寄存器中保留的值。<br>3). PTRACE_POKETEXT, PTRACE_POKEDATA, PTRACE_POKEUSR等把值写入到被跟踪进程的内存&#x2F;寄存器中<br>4). 用PTRACE_CONT，PTRACE_SYSCALL, PTRACE_SINGLESTEP控制被跟踪进程以何种方式继续运行。<br>5). PTRACE_DETACH, PTRACE_KILL 脱离进程间的跟踪关系。</p><p>TIPS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 进程状态TASK_TRACED用以表示当前进程因为被父进程跟踪而被系统停止。<br>2. 如在子进程结束前，父进程结束，则trace关系解除。<br>3. 利用attach建立起来的跟踪关系，虽然ps看到双方为父子关系，但在<span class="hljs-string">&quot;子进程&quot;</span>中调用getppid()仍会返回原来的父进程<span class="hljs-built_in">id</span>。<br>4. 不能attach到自己不能跟踪的进程，如non-root进程跟踪root进程。<br>5. 已经被trace的进程，不能再次被attach。<br>6. 即使是用PTRACE_TRACEME建立起来的跟踪关系，也可以用DETACH的方式予以解除。<br>7. 因为进入/退出系统调用都会触发一次SIGTRAP，所以通常的做法是在第一次(进入)的时候读取系统调用的参数，在第二次(退出)的时候读取系统调用的返回值。但注意execve是个例外。<br>8. 程序调试时的断点由int 3设置完成，而单步跟踪则可由ptrace(PTRACE_SINGLESTEP)实现。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">switch(pid = fork())  <br>   &#123;  <br>   <span class="hljs-keyword">case</span> -1:  <br>       <span class="hljs-built_in">return</span> -1;  <br>   <span class="hljs-keyword">case</span> 0: //子进程  <br>       ptrace(PTRACE_TRACEME,0,NULL,NULL);  <br>       execl(<span class="hljs-string">&quot;./HelloWorld&quot;</span>, <span class="hljs-string">&quot;HelloWorld&quot;</span>, NULL);  <br>   default: //父进程  <br>       <span class="hljs-built_in">wait</span>(&amp;val); //等待并记录execve  <br>       <span class="hljs-keyword">if</span>(WIFEXITED(val))  <br>           <span class="hljs-built_in">return</span> 0;  <br>       syscallID=ptrace(PTRACE_PEEKUSER, pid, ORIG_EAX*4, NULL);  <br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Process executed system call ID = %ld/n&quot;</span>,syscallID);  <br>       ptrace(PTRACE_SYSCALL,pid,NULL,NULL);  <br>   &#125;<br></code></pre></td></tr></table></figure><p>在上面的程序中，fork出的子进程先调用了ptrace(PTRACE_TRACEME)表示子进程让父进程跟踪自己。然后子进程调用execl加载执行了HelloWorld。</p><p>而在父进程中则使用wait系统调用等待子进程的中断或结束。子进程因为设置了PTRACE_TRACEME而在执行系统调用被系统停止(设置为TASK_TRACED)，这时父进程被唤醒，使用ptrace(PTRACE_PEEKUSER,pid,…)分别去读取子进程执行的系统调用ID(放在ORIG_EAX中)以及系统调用返回时的值(放在EAX中)。然后使用ptrace(PTRACE_SYSCALL,pid,…)指示子进程运行到下一次执行系统调用的时候(进入或者退出)，直到子进程退出为止。</p><p>wait指令会让父进程挂起，等待子进程的中断或结束</p><h2 id="断点原理"><a href="#断点原理" class="headerlink" title="断点原理"></a>断点原理</h2><p>断点是大家在调试程序时常用的一个功能,如break linenumber，当执行到linenumber那一行的时候被调试程序会停止，等待debugger的进一步操作。<br>断点的实现原理，就是在指定的位置插入断点指令，当被调试的程序运行到断点的时候，产生SIGTRAP信号。该信号被gdb捕获并进行断点命中判定，当gdb判断出这次SIGTRAP是断点命中之后就会转入等待用户输入进行下一步处理，否则继续。</p><p>断点的设置原理: 在程序中设置断点，就是先将该位置的原来的指令保存，然后向该位置写入int 3。当执行到int 3的时候，发生软中断，内核会给子进程发出SIGTRAP信号，当然这个信号会被转发给父进程。然后用保存的指令替换int3,等待恢复运行。<br>断点命中判定:gdb把所有的断点位置都存放在一个链表中，命中判定即把被调试程序当前停止的位置和链表中的断点位置进行比较，看是断点产生的信号，还是无关信号。</p><h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>单步跟踪就是指在调试程序的时候，让程序运行一条指令&#x2F;语句后就停下。GDB中常用的命令有next, step, nexti, stepi。单步跟踪又常分为语句单步(next, step)和指令单步(如nexti, stepi)。</p><p>在linux上，指令单步可以通过ptrace来实现。调用ptrace(PTRACE_SINGLESTEP,pid,…)可以使被调试的进程在每执行完一条指令后就触发一个SIGTRAP信号，让GDB运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">child = fork();  <br>   <span class="hljs-keyword">if</span>(child == 0) &#123;  <br>        execl(<span class="hljs-string">&quot;./HelloWorld&quot;</span>, <span class="hljs-string">&quot;HelloWorld&quot;</span>, NULL);  <br>   &#125;  <br>   <span class="hljs-keyword">else</span> &#123;  <br>       ptrace(PTRACE_ATTACH,child,NULL,NULL);  <br>       <span class="hljs-keyword">while</span>(1)&#123;  <br>       <span class="hljs-built_in">wait</span>(&amp;val);  <br>       <span class="hljs-keyword">if</span>(WIFEXITED(val))  <br>           <span class="hljs-built_in">break</span>;  <br>       count++;  <br>       ptrace(PTRACE_SINGLESTEP,child,NULL,NULL);  <br>       &#125;  <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Total Instruction number= %d/n&quot;</span>,count);  <br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="1、找到目标进程"><a href="#1、找到目标进程" class="headerlink" title="1、找到目标进程"></a>1、找到目标进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">pid_t target_pid;<br><br>// PS命令能找到的进程<br>target_pid = find_pid_of(<span class="hljs-string">&quot;/system/bin/logwrapper&quot;</span>);<br><span class="hljs-keyword">if</span> (-1 == target_pid) &#123;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can&#x27;t find the process\n&quot;</span>);  <br>    <span class="hljs-built_in">return</span> -1;  <br>&#125;<br></code></pre></td></tr></table></figure><p>找到目标进程的实现方式为：通过proc文件系统来一一比较。</p><p>在Linux上，proc是一个伪文件系统，提供了访问内核数据的方法，一般挂载在“&#x2F;proc”目录</p><p>每个正在运行着的进程都proc下都会有个目录，目录名为pid。</p><p>例如init进程，它的pid为1，所以对应&#x2F;proc&#x2F;1&#x2F;，这个目录下保存的就是Init进程相关的数据。</p><p>找到目标进程的逻辑：</p><p>打开proc目录<br>读取该目录，并转为dirent<br>读取dirent-&gt;d_name值，并转为int号，也就是pid号<br>在循环遍历每一个读取到的pid目录下的cmdline，用\0’分割其中的字符串得到进程的args[]，拿到args[0]，也就是进程的绝对路径<br>匹配进程名是否一致</p><h3 id="dirent：是一个结构体，"><a href="#dirent：是一个结构体，" class="headerlink" title="dirent：是一个结构体，"></a>dirent：是一个结构体，</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">struct dirent<br>&#123;<br>  long d_ino; /* inode number 索引节点号 */<br>  off_t d_off; /* offset to this dirent 在目录文件中的偏移 */<br>  unsigned short d_reclen; /* length of this d_name 文件名长 */<br>  unsigned char d_type; /* the <span class="hljs-built_in">type</span> of d_name 文件类型 */<br>  char d_name [NAME_MAX+1]; /* file name (null-terminated) 文件名，最长256字符 */<br>&#125;<br></code></pre></td></tr></table></figure><p>cmdline：存储的是main方法用的参数，也就是args，args[0]就是进程的绝对路径</p><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">int find_pid_of(const char *process_name)    <br>&#123;    <br>    int <span class="hljs-built_in">id</span>;    <br>    pid_t pid = -1;    <br>    DIR* <span class="hljs-built_in">dir</span>;    <br>    FILE *fp;    <br>    char filename[32];    <br>    char cmdline[256];    <br>    <br>    struct dirent * entry;    <br>    <br>    <span class="hljs-keyword">if</span> (process_name == NULL)    <br>        <span class="hljs-built_in">return</span> -1;    <br>    <br>    <span class="hljs-built_in">dir</span> = opendir(<span class="hljs-string">&quot;/proc&quot;</span>);    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dir</span> == NULL)    <br>        <span class="hljs-built_in">return</span> -1;    <br>    <br>    <span class="hljs-keyword">while</span>((entry = readdir(<span class="hljs-built_in">dir</span>)) != NULL) &#123;    <br>        <span class="hljs-built_in">id</span> = atoi(entry-&gt;d_name);    <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">id</span> != 0) &#123;    <br>            sprintf(filename, <span class="hljs-string">&quot;/proc/%d/cmdline&quot;</span>, <span class="hljs-built_in">id</span>);    <br>            fp = fopen(filename, <span class="hljs-string">&quot;r&quot;</span>);    <br>            <span class="hljs-keyword">if</span> (fp) &#123;    <br>                fgets(cmdline, sizeof(cmdline), fp);    <br>                fclose(fp);    <br>    <br>                <span class="hljs-keyword">if</span> (strcmp(process_name, cmdline) == 0) &#123;    <br>                    /* process found */    <br>                    pid = <span class="hljs-built_in">id</span>;    <br>                    <span class="hljs-built_in">break</span>;    <br>                &#125;    <br>            &#125;    <br>        &#125;    <br>    &#125;    <br>    <br>    closedir(<span class="hljs-built_in">dir</span>);    <br>    <span class="hljs-built_in">return</span> pid;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、ptrace跟踪目标进程"><a href="#2、ptrace跟踪目标进程" class="headerlink" title="2、ptrace跟踪目标进程"></a>2、ptrace跟踪目标进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (ptrace_attach(target_pid) == -1)   <br>&#123; <br>    goto <span class="hljs-built_in">exit</span>;    <br>&#125;<br><br>int ptrace_attach(pid_t pid)    <br>&#123;    <br>    <span class="hljs-keyword">if</span> (ptrace(PTRACE_ATTACH, pid, NULL, 0) &lt; 0) &#123;    <br>        perror(<span class="hljs-string">&quot;ptrace_attach&quot;</span>);    <br>        <span class="hljs-built_in">return</span> -1;    <br>    &#125;    <br>    <br>    int status = 0;    <br>    // 挂起父进程，等待子进程中断或结束<br>    waitpid(pid, &amp;status , WUNTRACED);    <br>    <br>    <span class="hljs-built_in">return</span> 0;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、保存目标进程寄存器的值"><a href="#3、保存目标进程寄存器的值" class="headerlink" title="3、保存目标进程寄存器的值"></a>3、保存目标进程寄存器的值</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (ptrace_getregs(target_pid, &amp;regs) == -1) <br>&#123;   <br>    goto <span class="hljs-built_in">exit</span>;    <br>&#125;<br><br>// 将读取到的寄存器值存放在regs中<br>int ptrace_getregs(pid_t pid, struct pt_regs * regs)    <br>&#123;    <br>    <span class="hljs-keyword">if</span> (ptrace(PTRACE_GETREGS, pid, NULL, regs) &lt; 0) &#123;    <br>        perror(<span class="hljs-string">&quot;ptrace_getregs: Can not get register values&quot;</span>);    <br>        <span class="hljs-built_in">return</span> -1;    <br>    &#125;    <br>    <br>    <span class="hljs-built_in">return</span> 0;    <br>&#125; <br><br>/* save original registers */    <br>memcpy(&amp;original_regs, &amp;regs, sizeof(regs));<br><br></code></pre></td></tr></table></figure><h2 id="4、获得mmap、dlopen等库函数在目标进程中的偏移地址"><a href="#4、获得mmap、dlopen等库函数在目标进程中的偏移地址" class="headerlink" title="4、获得mmap、dlopen等库函数在目标进程中的偏移地址"></a>4、获得mmap、dlopen等库函数在目标进程中的偏移地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">const char *linker_path = <span class="hljs-string">&quot;/system/bin/linker&quot;</span>;   <br><br>mmap_addr = get_remote_addr(target_pid, libc_path, (void *)mmap);<br>dlopen_addr = get_remote_addr( target_pid, linker_path, (void *)dlopen );    <br>dlsym_addr = get_remote_addr( target_pid, linker_path, (void *)dlsym );    <br>dlclose_addr = get_remote_addr( target_pid, linker_path, (void *)dlclose );    <br>dlerror_addr = get_remote_addr( target_pid, linker_path, (void *)dlerror );<br></code></pre></td></tr></table></figure><p>在计算偏移地址时，有个小TIPS，一个相同的库对于不同的进程来说，它的偏移量是恒定的。</p><p>也就是说，A进程载入了mmap，B进程也载入了mmap，那么mmap在A进程中的偏移等于相对于B进程的偏移。</p><h2 id="B-mmap地址-x3D-B-lib库地址-（A-mmap地址-A-lib库地址）"><a href="#B-mmap地址-x3D-B-lib库地址-（A-mmap地址-A-lib库地址）" class="headerlink" title="B.mmap地址 &#x3D; B_lib库地址 + （A.mmap地址 -A_lib库地址）"></a>B.mmap地址 &#x3D; B_lib库地址 + （A.mmap地址 -A_lib库地址）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">void* get_remote_addr(pid_t target_pid, const char* module_name, void* local_addr)    <br>&#123;    <br>    void* local_handle, *remote_handle;    <br>    <br>    local_handle = get_module_base(-1, module_name);    <br>    remote_handle = get_module_base(target_pid, module_name);    <br>    <br>    DEBUG_PRINT(<span class="hljs-string">&quot;[+] get_remote_addr: local[%x], remote[%x]\n&quot;</span>, local_handle, remote_handle);    <br>    <br>    void * ret_addr = (void *)((uint32_t)local_addr + (uint32_t)remote_handle - (uint32_t)local_handle);    <br>    <br><span class="hljs-comment">#if defined(__i386__)    </span><br>    <span class="hljs-keyword">if</span> (!strcmp(module_name, libc_path)) &#123;    <br>        ret_addr += 2;    <br>    &#125;    <br><span class="hljs-comment">#endif    </span><br>    <span class="hljs-built_in">return</span> ret_addr;    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">void* get_module_base(pid_t pid, const char* module_name)    <br>&#123;    <br>    FILE *fp;    <br>    long addr = 0;    <br>    char *pch;    <br>    char filename[32];    <br>    char line[1024];    <br>    <br>    <span class="hljs-keyword">if</span> (pid &lt; 0) &#123;    <br>        /* self process */    <br>        snprintf(filename, sizeof(filename), <span class="hljs-string">&quot;/proc/self/maps&quot;</span>, pid);    <br>    &#125; <span class="hljs-keyword">else</span> &#123;    <br>        snprintf(filename, sizeof(filename), <span class="hljs-string">&quot;/proc/%d/maps&quot;</span>, pid);    <br>    &#125;    <br>    <br>    fp = fopen(filename, <span class="hljs-string">&quot;r&quot;</span>);    <br>    <br>    <span class="hljs-keyword">if</span> (fp != NULL) &#123;    <br>        <span class="hljs-keyword">while</span> (fgets(line, sizeof(line), fp)) &#123;    <br>            <span class="hljs-keyword">if</span> (strstr(line, module_name)) &#123;    <br>                pch = strtok( line, <span class="hljs-string">&quot;-&quot;</span> );    <br>                addr = strtoul( pch, NULL, 16 );    <br>    <br>                <span class="hljs-keyword">if</span> (addr == 0x8000)    <br>                    addr = 0;    <br>    <br>                <span class="hljs-built_in">break</span>;    <br>            &#125;    <br>        &#125;    <br>    <br>        fclose(fp) ;    <br>    &#125;    <br>    <br>    <span class="hljs-built_in">return</span> (void *)addr;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、调用mmap在目标进程申请内存空间"><a href="#5、调用mmap在目标进程申请内存空间" class="headerlink" title="5、调用mmap在目标进程申请内存空间"></a>5、调用mmap在目标进程申请内存空间</h2><p>构建mmap调用需要的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">/* call mmap */    <br>parameters[0] = 0;  // addr    <br>parameters[1] = 0x4000; // size    <br>parameters[2] = PROT_READ | PROT_WRITE | PROT_EXEC;  // prot    <br>parameters[3] =  MAP_ANONYMOUS | MAP_PRIVATE; // flags    <br>parameters[4] = 0; //fd    <br>parameters[5] = 0; //offset    <br><br><span class="hljs-keyword">if</span> (ptrace_call_wrapper(target_pid, <span class="hljs-string">&quot;mmap&quot;</span>, mmap_addr, parameters, 6, &amp;regs) == -1)  <br>&#123;<br>    goto <span class="hljs-built_in">exit</span>;    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">int ptrace_call_wrapper(pid_t target_pid, const char * func_name, void * func_addr, long * parameters, int param_num, struct pt_regs * regs)     <br>&#123;    <br>  DEBUG_PRINT(<span class="hljs-string">&quot;[+] Calling %s in target process.\n&quot;</span>, func_name);    <br>  <span class="hljs-keyword">if</span> (ptrace_call(target_pid, (uint32_t)func_addr, parameters, param_num, regs) == -1)    <br>      <span class="hljs-built_in">return</span> -1;    <br><br>  <span class="hljs-keyword">if</span> (ptrace_getregs(target_pid, regs) == -1)    <br>      <span class="hljs-built_in">return</span> -1;    <br>  DEBUG_PRINT(<span class="hljs-string">&quot;[+] Target process returned from %s, return value=%x, pc=%x \n&quot;</span>,     <br>          func_name, ptrace_retval(regs), ptrace_ip(regs));    <br>  <span class="hljs-built_in">return</span> 0;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里做个平台判断，区分arm和x86，他们的实现方式不一样。下面只介绍arm</p><p>首先将前面构建的mmap参数放入寄存器当中，对于arm来说，R0~R3是存放参数的，对于超过4位的参数一律放在栈中<br>将目标进程的PC寄存器指向mmap的函数地址，重置CPSR状态寄存器，重置LR寄存器<br>将配置完的寄存器应用到进程中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#if defined(__arm__)    </span><br>int ptrace_call(pid_t pid, uint32_t addr, long *params, uint32_t num_params, struct pt_regs* regs)    <br>&#123;    <br>    uint32_t i;   <br>  // 参数先放寄存器中，R0~R3<br>    <span class="hljs-keyword">for</span> (i = 0; i &lt; num_params &amp;&amp; i &lt; 4; i ++) &#123;    <br>        regs-&gt;uregs[i] = params[i];    <br>    &#125;    <br>    <br>    // 多于4位的放在栈中   <br>    <span class="hljs-keyword">if</span> (i &lt; num_params) &#123;    <br>        regs-&gt;ARM_sp -= (num_params - i) * sizeof(long) ;    <br>        ptrace_writedata(pid, (void *)regs-&gt;ARM_sp, (uint8_t *)&amp;params[i], (num_params - i) * sizeof(long));    <br>    &#125;    <br>    <br>  // 将ARM的PC寄存器指向addr，也就是上面传来的需要调用的函数地址<br>    regs-&gt;ARM_pc = addr;    <br>  <br>    // 判断ARM当前所处的状态是thumb还是arm，它们的区别在于thumb是16位，arm是32位。属于arm的子集<br>    // 然后重置CPSR程序状态寄存器<br>    <span class="hljs-keyword">if</span> (regs-&gt;ARM_pc &amp; 1) &#123;    <br>        /* thumb */    <br>        regs-&gt;ARM_pc &amp;= (~1u);    <br>        regs-&gt;ARM_cpsr |= CPSR_T_MASK;    <br>    &#125; <span class="hljs-keyword">else</span> &#123;    <br>        /* arm */    <br>        regs-&gt;ARM_cpsr &amp;= ~CPSR_T_MASK;    <br>    &#125;    <br>    <br>    // 重置LR寄存器<br>    // LR寄存器存放的是子程序的返回地址<br>    regs-&gt;ARM_lr = 0;        <br>    <br>  // 设置寄存器的值<br>    <span class="hljs-keyword">if</span> (ptrace_setregs(pid, regs) == -1     <br>            || ptrace_continue(pid) == -1) &#123;    <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error\n&quot;</span>);    <br>        <span class="hljs-built_in">return</span> -1;    <br>    &#125;    <br>    <br>    int <span class="hljs-built_in">stat</span> = 0;  <br>    waitpid(pid, &amp;<span class="hljs-built_in">stat</span>, WUNTRACED);  <br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">stat</span> != 0xb7f) &#123;  <br>        <span class="hljs-keyword">if</span> (ptrace_continue(pid) == -1) &#123;  <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error\n&quot;</span>);  <br>            <span class="hljs-built_in">return</span> -1;  <br>        &#125;  <br>        waitpid(pid, &amp;<span class="hljs-built_in">stat</span>, WUNTRACED);  <br>    &#125;  <br>    <br>    <span class="hljs-built_in">return</span> 0;    <br>&#125;    <br>    <br><span class="hljs-comment">#elif defined(__i386__)    </span><br>long ptrace_call(pid_t pid, uint32_t addr, long *params, uint32_t num_params, struct user_regs_struct * regs)    <br>&#123;    <br>    regs-&gt;esp -= (num_params) * sizeof(long) ;    <br>    ptrace_writedata(pid, (void *)regs-&gt;esp, (uint8_t *)params, (num_params) * sizeof(long));    <br>    <br>    long tmp_addr = 0x00;    <br>    regs-&gt;esp -= sizeof(long);    <br>    ptrace_writedata(pid, regs-&gt;esp, (char *)&amp;tmp_addr, sizeof(tmp_addr));     <br>    <br>    regs-&gt;eip = addr;    <br>    <br>    <span class="hljs-keyword">if</span> (ptrace_setregs(pid, regs) == -1     <br>            || ptrace_continue( pid) == -1) &#123;    <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error\n&quot;</span>);    <br>        <span class="hljs-built_in">return</span> -1;    <br>    &#125;    <br>    <br>    int <span class="hljs-built_in">stat</span> = 0;  <br>    waitpid(pid, &amp;<span class="hljs-built_in">stat</span>, WUNTRACED);  <br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">stat</span> != 0xb7f) &#123;  <br>        <span class="hljs-keyword">if</span> (ptrace_continue(pid) == -1) &#123;  <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error\n&quot;</span>);  <br>            <span class="hljs-built_in">return</span> -1;  <br>        &#125;  <br>        waitpid(pid, &amp;<span class="hljs-built_in">stat</span>, WUNTRACED);  <br>    &#125;  <br>    <br>    <span class="hljs-built_in">return</span> 0;    <br>&#125;    <br><span class="hljs-comment">#else     </span><br><span class="hljs-comment">#error &quot;Not supported&quot;</span><br><span class="hljs-comment">#endif</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">int ptrace_writedata(pid_t pid, uint8_t *dest, uint8_t *data, size_t size)    <br>&#123;    <br>    uint32_t i, j, remain;    <br>    uint8_t *laddr;    <br>    <br>    union u &#123;    <br>        long val;    <br>        char chars[sizeof(long)];    <br>    &#125; d;    <br>    <br>    j = size / 4;    <br>    remain = size % 4;    <br>    <br>    laddr = data;    <br>    <br>    <span class="hljs-keyword">for</span> (i = 0; i &lt; j; i ++) &#123;    <br>        memcpy(d.chars, laddr, 4);    <br>        ptrace(PTRACE_POKETEXT, pid, dest, d.val);    <br>    <br>        dest  += 4;    <br>        laddr += 4;    <br>    &#125;    <br>    <br>    <span class="hljs-keyword">if</span> (remain &gt; 0) &#123;    <br>        d.val = ptrace(PTRACE_PEEKTEXT, pid, dest, 0);    <br>        <span class="hljs-keyword">for</span> (i = 0; i &lt; remain; i ++) &#123;    <br>            d.chars[i] = *laddr ++;    <br>        &#125;    <br>    <br>        ptrace(PTRACE_POKETEXT, pid, dest, d.val);    <br>    &#125;    <br>    <br>    <span class="hljs-built_in">return</span> 0;    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 设置寄存器<br>int ptrace_setregs(pid_t pid, struct pt_regs * regs)    <br>&#123;    <br>    <span class="hljs-keyword">if</span> (ptrace(PTRACE_SETREGS, pid, NULL, regs) &lt; 0) &#123;    <br>        perror(<span class="hljs-string">&quot;ptrace_setregs: Can not set register values&quot;</span>);    <br>        <span class="hljs-built_in">return</span> -1;    <br>    &#125;    <br>    <br>    <span class="hljs-built_in">return</span> 0;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="写入Shellcode"><a href="#写入Shellcode" class="headerlink" title="写入Shellcode"></a>写入Shellcode</h2><p>首先拿到mmap映射的基地址，方便后续操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">map_base = ptrace_retval(&amp;regs);   <br>long ptrace_retval(struct pt_regs * regs)    <br>&#123;    <br><span class="hljs-comment">#if defined(__arm__)    </span><br>    <span class="hljs-built_in">return</span> regs-&gt;ARM_r0;    <br><span class="hljs-comment">#elif defined(__i386__)    </span><br>    <span class="hljs-built_in">return</span> regs-&gt;eax;    <br><span class="hljs-comment">#else    </span><br><span class="hljs-comment">#error &quot;Not supported&quot;    </span><br><span class="hljs-comment">#endif    </span><br>&#125;<br></code></pre></td></tr></table></figure><p>将我们的Shellcode写入到目标进程中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ptrace_writedata(target_pid, map_base, library_path, strlen(library_path) + 1);<br></code></pre></td></tr></table></figure><h2 id="6、执行Shellcode"><a href="#6、执行Shellcode" class="headerlink" title="6、执行Shellcode"></a>6、执行Shellcode</h2><p>构建dlopen的执行参数，打开shellcode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">parameters[0] = map_base;       <br>parameters[1] = RTLD_NOW| RTLD_GLOBAL;     <br><br><span class="hljs-keyword">if</span> (ptrace_call_wrapper(target_pid, <span class="hljs-string">&quot;dlopen&quot;</span>, dlopen_addr, parameters, 2, &amp;regs) == -1)  <br>&#123;<br>goto <span class="hljs-built_in">exit</span>;     <br>&#125;<br></code></pre></td></tr></table></figure><p>拿到shellcode的句柄，找到shellcode中目标方法的偏移地址，执行dlsym加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">void * sohandle = ptrace_retval(&amp;regs); <br><br><span class="hljs-comment">#define FUNCTION_NAME_ADDR_OFFSET       0x100    </span><br>    ptrace_writedata(target_pid, map_base + FUNCTION_NAME_ADDR_OFFSET, function_name, strlen(function_name) + 1);    <br>    parameters[0] = sohandle;       <br>    parameters[1] = map_base + FUNCTION_NAME_ADDR_OFFSET;     <br>    <br>    <span class="hljs-keyword">if</span> (ptrace_call_wrapper(target_pid, <span class="hljs-string">&quot;dlsym&quot;</span>, dlsym_addr, parameters, 2, &amp;regs) == -1)    <br>        goto <span class="hljs-built_in">exit</span>;    <br>    <br>    void * hook_entry_addr = ptrace_retval(&amp;regs);    <br>    DEBUG_PRINT(<span class="hljs-string">&quot;hook_entry_addr = %p\n&quot;</span>, hook_entry_addr);    <br>    <br><span class="hljs-comment">#define FUNCTION_PARAM_ADDR_OFFSET      0x200    </span><br>    ptrace_writedata(target_pid, map_base + FUNCTION_PARAM_ADDR_OFFSET, param, strlen(param) + 1);    <br>    parameters[0] = map_base + FUNCTION_PARAM_ADDR_OFFSET;      <br>  <br>    <span class="hljs-keyword">if</span> (ptrace_call_wrapper(target_pid, <span class="hljs-string">&quot;hook_entry&quot;</span>, hook_entry_addr, parameters, 1, &amp;regs) == -1)    <br>        goto <span class="hljs-built_in">exit</span>;<br></code></pre></td></tr></table></figure><h2 id="7、恢复原so的状态，detach"><a href="#7、恢复原so的状态，detach" class="headerlink" title="7、恢复原so的状态，detach"></a>7、恢复原so的状态，detach</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Press enter to dlclose and detach\n&quot;</span>);    <br>getchar();    <br>parameters[0] = sohandle;       <br><br><span class="hljs-keyword">if</span> (ptrace_call_wrapper(target_pid, <span class="hljs-string">&quot;dlclose&quot;</span>, dlclose, parameters, 1, &amp;regs) == -1)    <br>    goto <span class="hljs-built_in">exit</span>;    <br><br>/* restore */    <br>ptrace_setregs(target_pid, &amp;original_regs);    <br>ptrace_detach(target_pid);    <br>ret = 0;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">int ptrace_detach(pid_t pid)    <br>&#123;    <br>    <span class="hljs-keyword">if</span> (ptrace(PTRACE_DETACH, pid, NULL, 0) &lt; 0) &#123;    <br>        perror(<span class="hljs-string">&quot;ptrace_detach&quot;</span>);    <br>        <span class="hljs-built_in">return</span> -1;    <br>    &#125;    <br>    <br>    <span class="hljs-built_in">return</span> 0;    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ptrace拦截系统调用"><a href="#ptrace拦截系统调用" class="headerlink" title="ptrace拦截系统调用"></a>ptrace拦截系统调用</h1><h2 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h2><p>spawn模式的原理是ptrace到zygote进程，然后跟踪zygote进程的fork系统调用，如果fork出来的新进程是指定包名的app，那么detach掉zygote进程，进而跟踪目标app进程的系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 附加到zygote进程</span><br>        <span class="hljs-type">int</span> res = ptrace(PTRACE_ATTACH,zygote_pid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;res: %d\n&quot;</span>,res);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hook zygote error\n&quot;</span>);<br>            show_helper();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 等待附加完成</span><br>        waitpid(zygote_pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 拦截 zygote 进程的 fork</span><br>        res = ptrace(PTRACE_SETOPTIONS, zygote_pid, (<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)(PTRACE_O_TRACEFORK));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ptrace zygote PTRACE_O_TRACEFORK res: %d\n&quot;</span>,res);<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FATAL ERROR: ptrace(PTRACE_SETOPTIONS, ...)\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 让zygote恢复运行</span><br>        ptrace(PTRACE_CONT, zygote_pid, (<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;zygote continue \n&quot;</span>);<br>        <br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// fork后子进程的pid</span><br>            wait_pid = waitpid(<span class="hljs-number">-1</span>, &amp;status, __WALL | WUNTRACED);<br>            <span class="hljs-keyword">if</span>(status&gt;&gt;<span class="hljs-number">8</span> == (SIGTRAP | (PTRACE_EVENT_FORK&lt;&lt;<span class="hljs-number">8</span>)))&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork出子进程 status&gt;&gt;8 == (SIGTRAP | (PTRACE_EVENT_FORK&lt;&lt;8)) %d\n&quot;</span>,wait_pid);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (wait_pid==zygote_pid)&#123; <span class="hljs-comment">//如果发出信号进程的进程号跟pid一致，则说明它是被跟踪程序的父进程，否则是被跟踪程序的子进程</span><br>                <span class="hljs-keyword">if</span>(WIFSTOPPED(status))&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;zygote continue \n&quot;</span>);<br>                    ptrace(PTRACE_CONT,wait_pid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 判断fork后的程序是不是我们指定的应用</span><br>            <span class="hljs-keyword">if</span> (wait_pid != <span class="hljs-number">0</span> &amp;&amp; wait_pid!=zygote_pid)&#123;<br>                <span class="hljs-type">char</span> name[<span class="hljs-number">256</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>                getNameByPid(wait_pid,name);<br>            <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wait_pid: %d,name: %s\n&quot;</span>,wait_pid,name);<br>            <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(appname, name) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;匹配到appname: %s\n&quot;</span>,appname);<br>                    <span class="hljs-comment">// detach from zygote</span><br>                    ptrace(PTRACE_DETACH, zygote_pid, <span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)SIGCONT);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detach from zygote\n&quot;</span>);<br>                    <span class="hljs-comment">// now perform on new process</span><br>                    target_pid = wait_pid;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;appname: %s pid: %d\n&quot;</span>,appname,target_pid);<br>                    success = <span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">// 拦截目标进程的clone和exit,clone重要 exit调试用</span><br>                    res = ptrace(PTRACE_SETOPTIONS, target_pid, (<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)(PTRACE_O_TRACECLONE|PTRACE_O_TRACEEXIT|PTRACE_O_TRACEVFORK));<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ptrace PTRACE_O_TRACECLONE|PTRACE_O_TRACEEXIT res: %d\n&quot;</span>,res);<br>                    <span class="hljs-keyword">if</span> (res == <span class="hljs-number">-1</span>) &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FATAL ERROR: ptrace(PTRACE_SETOPTIONS, ...)\n&quot;</span>);<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                    &#125;<br>                    target_tids.push_back(target_pid);<br>                    enter_or_leave[target_pid]=ENTER;tids_count++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 不是的话就continue</span><br>                    ptrace(PTRACE_SYSCALL, wait_pid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h2><p>attach模式的原理是直接ptrace目标app进程的所有线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 附加到目标进程的所有线程</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;target_tids.size();i++)&#123;<br>        <span class="hljs-type">int</span> res = ptrace(PTRACE_ATTACH,target_tids[i],<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ptrace thread error\n&quot;</span>);<br>            show_helper();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ptrace 到线程%d\n&quot;</span>,target_tids[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;附加模式启动完毕，进入success\n&quot;</span>);<br>    <span class="hljs-comment">// 等待附加完成，会收到一个SIGSTOP（19</span><br>    wait_pid = waitpid(target_pid, &amp;status, __WALL | WUNTRACED);<br>    print_status((<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;init&quot;</span>,wait_pid,status);<br><br>    <span class="hljs-comment">// 拦截目标进程的clone和exit,clone重要 exit调试用</span><br>    <span class="hljs-type">int</span> res = ptrace(PTRACE_SETOPTIONS, wait_pid, (<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>, (<span class="hljs-type">void</span> *)(PTRACE_O_TRACECLONE|PTRACE_O_TRACEEXIT|PTRACE_O_TRACEVFORK));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ptrace PTRACE_O_TRACECLONE|PTRACE_O_TRACEEXIT res: %d\n&quot;</span>,res);<br>    <span class="hljs-keyword">if</span> (res == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FATAL ERROR: ptrace(PTRACE_SETOPTIONS, ...)\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    success=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="hook-syscall"><a href="#hook-syscall" class="headerlink" title="hook syscall"></a>hook syscall</h2><h3 id="1-获取到pid后直接通过ptrace-PTRACE-SYSCALL-target-pid-0-0-就可以拦截所有的系统调用"><a href="#1-获取到pid后直接通过ptrace-PTRACE-SYSCALL-target-pid-0-0-就可以拦截所有的系统调用" class="headerlink" title="1.获取到pid后直接通过ptrace(PTRACE_SYSCALL, target_pid, 0, 0);就可以拦截所有的系统调用"></a>1.获取到pid后直接通过ptrace(PTRACE_SYSCALL, target_pid, 0, 0);就可以拦截所有的系统调用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"> // 获取到目标进程pid后，拦截它的system_call<br>ptrace(PTRACE_SYSCALL, target_pid, 0, 0);<br></code></pre></td></tr></table></figure><h3 id="2-取寄存器的值"><a href="#2-取寄存器的值" class="headerlink" title="2.取寄存器的值"></a>2.取寄存器的值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">struct user_pt_regs regs;<br>    struct iovec io;<br>    io.iov_base = &amp;regs;<br>    io.iov_len = sizeof(regs);<br><br>    ptrace(PTRACE_GETREGSET, pid, (void*)NT_PRSTATUS, &amp;io);<br></code></pre></td></tr></table></figure><h3 id="3-获取系统调用号进行分段处理"><a href="#3-获取系统调用号进行分段处理" class="headerlink" title="3.获取系统调用号进行分段处理"></a>3.获取系统调用号进行分段处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">switch (regs.ARM_x8)<br>    &#123;<br>    case __NR_openat:<br>      <br>        break;<br>    case __NR_read:<br>       <br>        break;<br>    case __NR_readlinkat:<br>        break;<br>    default:<br>        break;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="4-修改参数"><a href="#4-修改参数" class="headerlink" title="4.修改参数"></a>4.修改参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">void setdata(pid_t pid, uint64_t addr, char * str, long sz)<br>&#123;<br>    int i = 0, j = sz / long_size;<br>    char *s = str;<br>    while (i &lt; j) &#123;<br>        ptrace(PTRACE_POKEDATA, pid, addr + i * 8, *(long *)(s + i * 8));<br>        ++ i;<br>    &#125;<br>    j = sz % long_size;<br>    if (j != 0) &#123;<br>        ptrace(PTRACE_POKEDATA, pid, addr + i * 8, *(long *)(s + i * 8));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 注入 </tag>
            
            <tag> ptrace </tag>
            
            <tag> syscall </tag>
            
            <tag> svc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida工作原理学习</title>
      <link href="/2022/06/26/Frida%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/06/26/Frida%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="frida介绍"><a href="#frida介绍" class="headerlink" title="frida介绍"></a>frida介绍</h1><p>frida是一款便携的,自由的,支持全平台的,hook框架，可以通过编写JavaScript,Python代码来和frida_server端进行交互,还记得当年用xposed时那种写了一大堆代码每次修改都要重新打包安装重启手机,那种调试调到头皮发麻的痛苦百分之30的时间都是在那里安装重启安装重启直到有一天遇到了小甜甜。</p><h1 id="frida的代码结构"><a href="#frida的代码结构" class="headerlink" title="frida的代码结构"></a>frida的代码结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">frida-core: Frida 核心库<br>frida-gum: inline-hook 框架<br>bindings: <br>frida-python: python<br>frida-node: Node.js<br>frida-qml: Qml<br>frida-swift: Swift<br>frida-tools: CLI tools<br>capstone: instruction disammbler<br></code></pre></td></tr></table></figure><p>Frida的核心是c编写的有多种语言绑定例如 Node.js、 Python、 Swift、 .NET、 Qml<br>一般我们都使用js去编写frida脚本因为js的异常处理机制非常棒相比于其他语言更高效好用。</p><h2 id="frida-core"><a href="#frida-core" class="headerlink" title="frida-core"></a>frida-core</h2><p>frida-core的功能有进程注入、进程间通信、会话管理、脚本生命周期管理等功能，屏蔽部分底层的实现细节并给最终用户提供开箱即用的操作接口。而这一切的实现都在 frida-core 之中，正如名字所言，这其中包含了 frida 相关的大部分关键模块和组件，比如 frida-server、frida-gadget、frida-agent、frida-helper、frida-inject 以及之间的互相通信底座。</p><h2 id="frida-gum"><a href="#frida-gum" class="headerlink" title="frida-gum"></a>frida-gum</h2><p>frida-gum是基于inline-hook实现的他还有很多丰富的功能比如用于代码跟踪 Stalker、用于内存访问监控的MemoryAccessMonitor，以及符号查找、栈回溯实现、内存扫描、动态代码生成和重定位等。</p><h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><p>Interceptor 是 inline-hook 的封装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GumInterceptor * interceptor;<br>GumInvocationListener * listener;<br>gum_init ();<br>interceptor = gum_interceptor_obtain ();<br>//GumInvocationListener*的接口<br>listener = g_object_new (EXAMPLE_TYPE_LISTENER, NULL);<br><br>// 开始 hook `open` 函数<br>gum_interceptor_begin_transaction (interceptor);<br>gum_interceptor_attach_listener (interceptor,<br>      GSIZE_TO_POINTER (gum_module_find_export_by_name (NULL, &quot;open&quot;)),<br>      listener,<br>      GSIZE_TO_POINTER (EXAMPLE_HOOK_OPEN));<br>gum_interceptor_end_transaction (interceptor);<br><br>// 测试 hook 效果<br>close (open (&quot;/etc/hosts&quot;, O_RDONLY));<br><br>// 结束 hook<br>gum_interceptor_detach_listener (interceptor, listener);<br>g_object_unref (listener);<br>g_object_unref (interceptor);<br></code></pre></td></tr></table></figure><h3 id="Stalker"><a href="#Stalker" class="headerlink" title="Stalker"></a>Stalker</h3><p>潜行者又称为尾行痴汉，可以实现指定线程中所有函数、所有基本块、甚至所有指令的跟踪但是有很大的缺点比如在32位或者thumb下问题很大,一般想使用指令跟踪都是使用内存断点或者unidbg模拟执行so但是有很多问题，内存断点的反调试倒是很容易解决但是性能是一个很大的缺陷代码触发断点后会先中断到内核态，然后再返回到用户态(调试器)执行跟踪回调，处理完后再返回内核态，然后再回到用户态继续执行，这来来回回的黄花菜都凉了。但Unidbg的使用门槛动不动就补环境，龙哥说样本和Unidbg之间摩擦出的火花才是最迷人的。或者说人话——“他妈的Unidbg怎么又报错了，我该怎么办？”</p><p>Stalker的简单使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Interceptor.attach(addr, &#123;<br>       onEnter: function (args) &#123;<br>           this.args0 = args[0];<br>           this.tid = Process.getCurrentThreadId();<br>           //跟随<br>           Stalker.follow(this.tid, &#123;<br>               events: &#123;//事件<br>                   call: true,//呼叫<br>                   ret: false,//返回<br>                   exec: true,//执行<br>                   block: false,//块<br>                   compile: false//编译<br>               &#125;,<br>               //接收<br>               onReceive(events)&#123;<br>                   for (const [index,value] of Stalker.parse(events)) &#123;<br>                       console.log(index,value);<br>                       //findModuleByAddress    &#123;&quot;name&quot;:&quot;libc.so&quot;,&quot;base&quot;:&quot;0x7d1f0af000&quot;,&quot;size&quot;:3178496,&quot;path&quot;:&quot;/apex/com.android.runtime/lib64/bionic/libc.so&quot;&#125;<br>                       //console.log(&quot;tuzi&quot;,Process.findModuleByAddress(0x7d1f13adb8));<br><br>                   &#125;<br>               &#125;<br>               // onCallSummary(summay)&#123;<br>               //console.log(&quot;onCallSummary&quot;+JSON.stringify(summay));<br>               // &#125;,<br>           &#125;);<br>       &#125;, onLeave: function (retval) &#123;<br>           Stalker.unfollow(this.tid);<br>       &#125;<br>   &#125;);<br></code></pre></td></tr></table></figure><p>Stalker也可以用来还原ollvm混淆 记录函数的真实执行地址结合ida反汇编没执行的代码都nop掉可以很大程度上帮助辅助混淆算法分析当然可能不太准确但也是一种非常棒的思路。<br>Stalker的功能实现，在线程即将执行下一条指令前，先将目标指令拷贝一份到新建的内存中，然后在新的内存中对代码进行插桩，如下图所示:<br> <img src="/.com//attach/202206/928079_YEHQKX7ZAKAH3UQ.png"><br>这其中使用到了代码动态重编译的方法，好处是原本的代码没有被修改，因此即便代码有完整性校验也不影响，另外由于执行过程都在用户态，省去了多次中断内核切换，性能损耗也达到了可以接受的水平。由于代码的位置发生了改变，如前文 Interceptor 一样，同样要对代码进行重定位的修复</p><h3 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h3><p>MemoryAccessMonitor可以实现对指定内存区间的访问监控，在目标内存区间发生读写行为时可以触发用户指定的回调函数。</p><p>通过阅读源码发现这个功能的实现方法非常简洁，本质上是将目标内存页设置为不可读写，这样在发生读写行为时会触发事先注册好的中断处理函数，其中会调用到用户使用 gum_memory_access_monitor_new 注册的回调方法中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//C 代码<br>gboolean<br>gum_memory_access_monitor_enable (GumMemoryAccessMonitor * self,<br>                                  GError ** error)<br>&#123;<br>  if (self-&gt;enabled)<br>    return TRUE;<br>  // ...<br>  self-&gt;exceptor = gum_exceptor_obtain ();<br>  gum_exceptor_add (self-&gt;exceptor, gum_memory_access_monitor_on_exception,<br>      self);<br>  // ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//js代码<br>function read_write_break()&#123;<br>    function hook_dlopen(addr, soName, callback) &#123;<br>        Interceptor.attach(addr, &#123;<br>            onEnter: function (args) &#123;<br>                var soPath = args[0].readCString();<br>                if(soPath.indexOf(soName) != -1) hook_call_constructors();<br>            &#125;, onLeave: function (retval) &#123;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    var dlopen = Module.findExportByName(&quot;libdl.so&quot;, &quot;dlopen&quot;);<br>    var android_dlopen_ext = Module.findExportByName(&quot;libdl.so&quot;, &quot;android_dlopen_ext&quot;);<br>    hook_dlopen(dlopen, &quot;libaes.so&quot;, set_read_write_break);<br>    hook_dlopen(android_dlopen_ext, &quot;libaes.so&quot;, set_read_write_break);<br><br>    function set_read_write_break()&#123;<br>        //实现一个异常回调   处理好这个异常就可以正常返回<br>        Process.setExceptionHandler(function(details) &#123;<br>            console.log(JSON.stringify(details, null, 2));<br>            console.log(&quot;lr&quot;, DebugSymbol.fromAddress(details.context.lr));<br>            console.log(&quot;pc&quot;, DebugSymbol.fromAddress(details.context.pc));<br>            Memory.protect(details.memory.address, Process.pointerSize, &#x27;rwx&#x27;);<br>            console.log(Thread.backtrace(details.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(&#x27;\n&#x27;) + &#x27;\n&#x27;);<br>            return true;<br>        &#125;);<br>        var addr = Module.findBaseAddress(&quot;libaes.so&quot;).add(0x6666);<br>        Memory.protect(addr, 8, &#x27;---&#x27;); //修改内存页的权限<br>        /**<br>         * 比如有一个地址是0x12345678  我想看一下是那个代码去访问了这个地址<br>         * 我只需要把这个内存地址置空 有函数去访问这个地址时 就会触发非法访问异常<br>         * 比较鸡肋这种方法 这种方法会一次修改一个内存页  并且触发一次就无效了<br>         */<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="hook原理"><a href="#hook原理" class="headerlink" title="hook原理"></a>hook原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1.注入进程<br>ptrace<br>dlopen<br>2.hook 目标函数<br>2.1 Java Hook<br>Static Field Hook：静态成员hook<br>Method Hook：函数hook<br>2.2 Native So Hook<br>GOT Hook：全局偏移表hook<br>SYM Hook：符号表hook<br>Inline Hook：函数内联hook<br>执行自身代码<br>获取敏感信息<br>修改返回值<br>etc.<br></code></pre></td></tr></table></figure><p>frida注入的主要思路就是找到目标进程,使用ptrace跟踪目标进程获取mmap，dlpoen，dlsym等函数库的便宜获取mmap在目标进程申请一段内存空间将在目标进程中找到存放[frida-agent-32&#x2F;64.so]的空间启动执行各种操作由agent去实现。<br>补充：frida注入之后会在远端进程分配一段内存将agent拷贝过去并在目标进程中执行代码，执行完成后会 detach 目标进程，这也是为什么在 frida 先连接上目标进程后还可以用gdb&#x2F;ida等调试器连接，而先gdb连接进程后 frida 就无法再次连上的原因(frida在注入时只会ptrace一下下注入完毕后就会结束ptrace所以ptrace占坑这种反调试使用spawn方式启动即可)。</p><p>frida-agent 注入到目标进程并启动后会启动一个新进程与 host 进行通信，从而 host 可以给目标进行发送命令，比如执行代码，激活&#x2F;关闭 hook，同时也能接收到目标进程的执行返回以及异步事件信息等。</p><h3 id="hook-java层"><a href="#hook-java层" class="headerlink" title="hook java层"></a>hook java层</h3><p>frida 的 hook 区分了 art 模式和 dalvik 模式。</p><h4 id="dalvik-模式"><a href="#dalvik-模式" class="headerlink" title="dalvik 模式"></a>dalvik 模式</h4><p>把 java 函数变成 native 函数，然后修改入口信息为自定义函数信息。<br><img src="/.com//../../img/13.png" alt="header"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">struct Method &#123;   <br>    ClassObject*    clazz;   /* method所属的类 public、native等*/<br>    u4              accessFlags; /* 访问标记 */<br>    u2             methodIndex; //method索引<br>    //三个size为边界值，对于native函数，这3个size均等于参数列表的size<br>    u2              registersSize;  /* ins + locals */<br>    u2              outsSize;<br>    u2              insSize;<br>    const char*     name;//函数名称<br>    /*<br>     * Method prototype descriptor string (return and argument types)<br>     */<br>    DexProto        prototype;<br>    /* short-form method descriptor string */<br>    const char*     shorty;<br>    /*<br>     * The remaining items are not used for abstract or native methods.<br>     * (JNI is currently hijacking &quot;insns&quot; as a function pointer, set<br>     * after the first call.  For internal-native this stays null.)<br>     */<br>    /* the actual code */<br>    const u2*       insns;          /* instructions, in memory-mapped .dex */<br>    /* cached JNI argument and return-type hints */<br>    int             jniArgInfo;<br>    /*<br>     * Native method ptr; could be actual function or a JNI bridge.  We<br>     * don&#x27;t currently discriminate between DalvikBridgeFunc and<br>     * DalvikNativeFunc; the former takes an argument superset (i.e. two<br>     * extra args) which will be ignored.  If necessary we can use<br>     * insns==NULL to detect JNI bridge vs. internal native.<br>     */<br>    DalvikBridgeFunc nativeFunc;<br>    /*<br>     * Register map data, if available.  This will point into the DEX file<br>     * if the data was computed during pre-verification, or into the<br>     * linear alloc area if not.<br>     */<br>    const RegisterMap* registerMap;<br><br>&#125;;<br><br>…<br>…<br>…<br><br>function replaceDalvikImplementation (fn) &#123;<br>  if (fn === null &amp;&amp; dalvikOriginalMethod === null) &#123;<br>    return;<br>  &#125;<br>//备份原来的method,<br>  if (dalvikOriginalMethod === null) &#123;<br>    dalvikOriginalMethod = Memory.dup(methodId, DVM_METHOD_SIZE);<br>    dalvikTargetMethodId = Memory.dup(methodId, DVM_METHOD_SIZE);<br>  &#125;<br><br>  if (fn !== null) &#123;<br>   //自定的代码<br>    implementation = implement(f, fn);<br><br>    let argsSize = argTypes.reduce((acc, t) =&gt; (acc + t.size), 0);<br>    if (type === INSTANCE_METHOD) &#123;<br>      argsSize++;<br>    &#125;<br>    // 把method变成native函数<br>    /*<br>     * make method native (with kAccNative)<br>     * insSize and registersSize are set to arguments size<br>     */<br>    const accessFlags = (Memory.readU32(methodId.add(DVM_METHOD_OFFSET_ACCESS_FLAGS)) | kAccNative) &gt;&gt;&gt; 0;<br>    const registersSize = argsSize;<br>    const outsSize = 0;<br>    const insSize = argsSize;<br><br>    Memory.writeU32(methodId.add(DVM_METHOD_OFFSET_ACCESS_FLAGS), accessFlags);<br>    Memory.writeU16(methodId.add(DVM_METHOD_OFFSET_REGISTERS_SIZE), registersSize);<br>    Memory.writeU16(methodId.add(DVM_METHOD_OFFSET_OUTS_SIZE), outsSize);<br>    Memory.writeU16(methodId.add(DVM_METHOD_OFFSET_INS_SIZE), insSize);<br>    Memory.writeU32(methodId.add(DVM_METHOD_OFFSET_JNI_ARG_INFO), computeDalvikJniArgInfo(methodId));<br>    //调用dvmUseJNIBridge为这个Method设置一个Bridge,本质上是修改结构体中的nativeFunc为自定义的implementation函数<br>    api.dvmUseJNIBridge(methodId, implementation);<br><br>    patchedMethods.add(f);<br>  &#125; else &#123;<br>    patchedMethods.delete(f);<br><br>    Memory.copy(methodId, dalvikOriginalMethod, DVM_METHOD_SIZE);<br>    implementation = null;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="art-模式"><a href="#art-模式" class="headerlink" title="art 模式"></a>art 模式</h4><p>art模式也是需要将java 函数变成 native 函数但是不同于dalvik，art下有两种解释器一种汇编解释器一种smali解释器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">quick code 模式：执行 arm 汇编指令<br>Interpreter 模式：由解释器解释执行 Dalvik 字节码<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;2022.7.17 寒冰大佬指出问题  安卓7.0 有三种解释器switch结构，goto跳转表，汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">enum InterpreterImplKind &#123;<br>   kSwitchImplKind,        // Switch-based interpreter implementation.<br>   kComputedGotoImplKind,  // Computed-goto-based interpreter implementation.<br>   kMterpImplKind          // Assembly interpreter<br> &#125;;<br></code></pre></td></tr></table></figure><p><img src="/.com//../../img/14.png" alt="header"><br>1.如果函数已经存在quick code, 则指向这个函数对应的 quick code的起始地址，而当quick code不存在时，它的值则会代表其他的意义。</p><p>2.当一个 java 函数不存在 quick code时，它的值是函数artQuickToInterpreterBridge 的地址，用以从 quick 模式切换到 Interpreter 模式来解释执行 java 函数代码。</p><p>3.当一个 java native（JNI）函数不存在 quick code时，它的值是函数 art_quick_generic_jni_trampoline 的地址，用以执行没有quick code的 jni 函数。</p><p>所以 frida 要将 java method 转为 native method，需要将ARTMethod 结构进行如下修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">patchMethod(methodId, &#123;<br>  //jnicode入口entry_point_from_jni_改为自定义的代码<br>  &#x27;jniCode&#x27;: implementation,<br>  //修改为access_flags_为native<br>  &#x27;accessFlags&#x27;: (Memory.readU32(methodId.add(artMethodOffset.accessFlags)) | kAccNative | kAccFastNative) &gt;&gt;&gt; 0,<br>  //art_quick_generic_jni_trampoline函数的地址<br>  &#x27;quickCode&#x27;: api.artQuickGenericJniTrampoline,<br>  //artInterpreterToCompiledCodeBridge函数地址<br>  &#x27;interpreterCode&#x27;: api.artInterpreterToCompiledCodeBridge<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://evilpan.com/2022/04/05/frida-internal/<br>https://blog.drov.com.cn/2021/04/hook.html<br>https://bbs.pediy.com/thread-229215.htm<br>https://frida.re/docs/home/<br>https://www.youtube.com/watch?v=uc1mbN9EJKQ<br><br></code></pre></td></tr></table></figure><h1 id="添加补充"><a href="#添加补充" class="headerlink" title="添加补充"></a>添加补充</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 2022.7.17<br>一个非常不错的项目 纯frida实现的smali追踪<br>trace smali代码一般都是通过修改art源码去强制解析执行然后记录执行的指令和寄存器的值 <br>https://github.com/SeeFlowerX/frida-smali-trace<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次编译内核，修改内核源码监控系统调用</title>
      <link href="/2022/06/10/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
      <url>/2022/06/10/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次编译内核修改内核源码监控系统调用"><a href="#记录一次编译内核修改内核源码监控系统调用" class="headerlink" title="记录一次编译内核修改内核源码监控系统调用"></a>记录一次编译内核修改内核源码监控系统调用</h1><p>最近看了很多很好的贴子啊<br>SVC的TraceHook沙箱的实现&amp;无痕Hook实现思路<a href="https://bbs.pediy.com/thread-273160.htm">https://bbs.pediy.com/thread-273160.htm</a><br>Android通用svc跟踪以及hook方案——Frida-Seccomp<br><a href="https://bbs.pediy.com/thread-271815.htm">https://bbs.pediy.com/thread-271815.htm</a><br>又菜又想搞svc，就只能做最简单无脑的了  </p><h2 id="一，-给小白介绍一下什么是系统调用-syscall"><a href="#一，-给小白介绍一下什么是系统调用-syscall" class="headerlink" title="一，  给小白介绍一下什么是系统调用(syscall)"></a>一，  给小白介绍一下什么是系统调用(syscall)</h2><p>简单的来说呢就是libc.so里面的一些系统函数比如read(),write()最简单的读写函数，这些函数实际上底层都是由syscall()交给linux内核去实现的<br><img src="/.com//../../img/3.png" alt="header"><br><img src="/.com//../../img/4.png" alt="header"><br>他的第一个参数是系统调用号，后面的参数是根据调用的函数来写的<br>现在用android studio开发的话使用系统调用和使用正常的函数一样也不需要去<br>记这些系统调用号都有一个常量表可以很方便的去实现功能<br><img src="/.com//../../img/5.png" alt="header"><br><img src="/.com//../../img/6.png" alt="header"><br>在调用syscall时通过会从用户态切换到内核态<br><img src="/.com//../../img/7.png" alt="header"><br>正常使用hook框架很难去hook到内核态下的代码 常规手段可以通过找到svc指令地址 在他调用svc之前去inlinehook他效率以及一些别的问题 导致局限性非常大 </p><h2 id="二，-编译内核步骤"><a href="#二，-编译内核步骤" class="headerlink" title="二，  编译内核步骤"></a>二，  编译内核步骤</h2><p>1.去谷歌的官方文档查看自己机型的内核源码的目录<br><a href="https://source.android.com/setup/building-kernels">https://source.android.com/setup/building-kernels</a><br>我的是Pixel 3a XL (bonito)  也就是 bonito-kernel<br>这里在谷歌官方下载的话太慢了我选择去中科大下载<br>命令 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clone http://mirrors.ustc.edu.cn/aosp/kernel/msm.git<br>//下载完成后cd 到sms 目录 在链接手机在终端输入<br>cat /proc/version<br>Linux version 4.9.165-g583404d31612-ab5723792<br>//这一串583404d31612 这个是我们需要的<br>git branch -r --contains 583404d31612 <br>//获取到我们需要的版本号<br></code></pre></td></tr></table></figure><p><img src="/.com//../../img/8.png" alt="header"><br>检出了那么一大堆 随意挑选一个中意的去检出即可<br><img src="/.com//../../img/9.png" alt="header"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git checkout -b android-msm-bonito-4.9-android10  origin/android-msm-bonito-4.9-android10<br><br></code></pre></td></tr></table></figure><p>下载完毕<br><img src="/.com//../../img/10.png" alt="header"><br>接下来就是编译一下内核看看有没有问题了<br>因为编译内核有一大堆命令就搞个sh脚本来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#吧之前编译的内核清理掉 在msm下面操作啊 别再aosp 要不然直接清空了<br>make clean<br># 设置编译平台为64位arm<br>export ARCH=arm64<br>export SUBARCH=arm64<br># 配置arm64的交叉编译工具路径<br>export PATH=/home/用户名/bin/aosp1000r2/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin:$PATH<br># 配置arm32的交叉编译工具路径<br>export PATH=/home/用户名/bin/aosp1000r2/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin:$PATH<br># 设置64位交叉编译工具前缀，上述64位工具路径中的公共前缀，以CROSS_COMPILEgcc为准<br>export CROSS_COMPILE=aarch64-linux-android-<br># 设置32位交叉编译工具前缀，上述32位工具路径中的公共前缀，以CROSS_COMPILEgcc为准<br>export CROSS_COMPILE_ARM32=arm-linux-androideabi-<br># 生成编译配置文件，O=out指定输出目录<br>make O=out marlin_defconfig<br># 执行内核编译  根据自己设置的cup核心<br>make -j18 O=out ARCH=arm64<br># 复制内核到marlin-kernel目录<br>cp -f out/arch/arm64/boot/Image.lz4-dtb ../device/google/marlin-kernel/;<br></code></pre></td></tr></table></figure><p>写好sh脚本后 改一下给个777权限 运行就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod 777 tutu.sh<br>./tutu.sh<br>//然后直接在aops目录 编译完成后刷机即可<br>make -j16<br></code></pre></td></tr></table></figure><p>接下来就是修改内核源码了<br><img src="/.com//../../img/11.png" alt="header"><br>可以看到这些函数实际上真正底层是在内核实现的<br><img src="/.com//../../img/12.png" alt="header"><br>这里只搞一个做演示哈 这里是oepn内核的源码 我们可以在这里动一些手脚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)<br>&#123;<br>    struct open_flags op;<br>    int fd = build_open_flags(flags, mode, &amp;op);<br>    struct filename *tmp;<br><br>    //add<br>    const struct cred *cred = current_cred();<br>    kuid_t isuid = cred-&gt;uid;<br>    int pid = current-&gt;pid;<br>    int isuid = uid.val;<br>    //过滤系统app<br>    if(isuid &gt; 10000) &#123;<br>        char bufname[256]=&#123;0&#125;;<br>        strncpy_from_user(bufname, filename, 255);<br>/*bufname 就是监控到的一些调用syscall的一些读文件操作当然也可以做io重定向去判断某些特定的值写一个系统app去监听这里过滤替换的一些操作这里为了简单学习实现先这样了*/<br>        printk(&quot;do_sys_open : %s  uid:%d pid:%d\n&quot;, <br>        bufname, isuid, pid);<br>    &#125;<br>    //add end<br><br><br>    if (fd)<br>        return fd;<br><br>    tmp = getname(filename);<br>    if (IS_ERR(tmp))<br>        return PTR_ERR(tmp);<br>    //得到一个文件描述符<br>    fd = get_unused_fd_flags(flags);<br>    if (fd &gt;= 0) &#123;<br>        //得到一个struct file结构<br>        struct file *f = do_filp_open(dfd, tmp, &amp;op);<br>        if (IS_ERR(f)) &#123;<br>            put_unused_fd(fd);<br>            fd = PTR_ERR(f);<br>        &#125; else &#123;<br>            fsnotify_open(f);<br>            //把文件描述符和struct file结构关联起来<br>            fd_install(fd, f);<br>        &#125;<br>    &#125;<br>    putname(tmp);<br>    return fd;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改完毕后直接使用之前写的sh脚本在msm编译内核即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">./tutu.sh<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> syscall </tag>
            
            <tag> 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录编译aosp+修改源码</title>
      <link href="/2022/02/15/%E7%BC%96%E8%AF%91aosp-%E4%BF%AE%E6%94%B9%E6%BA%90%E7%A0%81%E5%AE%9A%E5%88%B6%E5%90%84%E7%A7%8D%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/02/15/%E7%BC%96%E8%AF%91aosp-%E4%BF%AE%E6%94%B9%E6%BA%90%E7%A0%81%E5%AE%9A%E5%88%B6%E5%90%84%E7%A7%8D%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓系统编译前置知识"><a href="#安卓系统编译前置知识" class="headerlink" title="安卓系统编译前置知识"></a>安卓系统编译前置知识</h1><p>aosp源码、对应的Linux内核、对应的手机驱动<br>这里的对应指的是要跟aosp系统版本对应，要与手机型号对应<br>推荐电脑配置 硬盘1t以上 内存 32g以上</p><h1 id="android10-源码编译的下载"><a href="#android10-源码编译的下载" class="headerlink" title="android10 源码编译的下载"></a>android10 源码编译的下载</h1><h2 id="1-源码下载"><a href="#1-源码下载" class="headerlink" title="1. 源码下载"></a>1. 源码下载</h2><p>北方用清华镜像源<br>    <a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/</a><br>南方用中科大镜像源<br>    <a href="http://mirrors.ustc.edu.cn/help/aosp.html">http://mirrors.ustc.edu.cn/help/aosp.html</a></p><h2 id="3-下载初始化包并解压"><a href="#3-下载初始化包并解压" class="headerlink" title="3. 下载初始化包并解压"></a>3. 下载初始化包并解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/bin<br><span class="hljs-built_in">cd</span> ~/bin<br>wget https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-20220222.tar<br></code></pre></td></tr></table></figure><p>wget可以使用-c选项，来支持断点下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">md5sum aosp-latest.tar<br>tar xvf aosp-latest.tar<br></code></pre></td></tr></table></figure><h2 id="4-配置git"><a href="#4-配置git" class="headerlink" title="4. 配置git"></a>4. 配置git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt-get install git<br>git config --global user.email 24358757@qq.com<br>git config --global user.name &quot;tuzi&quot;<br></code></pre></td></tr></table></figure><h2 id="5-下载repo"><a href="#5-下载repo" class="headerlink" title="5. 下载repo"></a>5. 下载repo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;PATH=~/bin:\$PATH&quot; &gt;&gt; ~/.bashrc<br>source ~/.bashrc<br>sudo apt-get install curl<br>curl -sSL  &#x27;https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?format=TEXT&#x27; |base64 -d &gt; ~/bin/repo<br>chmod a+x ~/bin/repo<br>export REPO_URL=&#x27;https://gerrit-googlesource.proxy.ustclug.org/git-repo&#x27;<br>cd aosp<br></code></pre></td></tr></table></figure><h2 id="6-修改默认Python"><a href="#6-修改默认Python" class="headerlink" title="6. 修改默认Python"></a>6. 修改默认Python</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo unlink /usr/bin/python<br>sudo ln -s /usr/bin/python3.8 /usr/bin/python<br></code></pre></td></tr></table></figure><h2 id="7-同步指定版本源码"><a href="#7-同步指定版本源码" class="headerlink" title="7. 同步指定版本源码"></a>7. 同步指定版本源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-10.0.0_r11<br>repo sync<br></code></pre></td></tr></table></figure><p>（a) 代号和细分版本号可查看以下链接<br>    <a href="https://source.android.com/setup/start/build-numbers?hl=zh_cn">https://source.android.com/setup/start/build-numbers?hl=zh_cn</a></p><p>（b) 选个有驱动的，支持机型多的分支</p><p>（c) 谷歌手机设备驱动下载地址<br><a href="https://developers.google.com/android/drivers">https://developers.google.com/android/drivers</a></p><p>（d)同步之前先打个虚拟机快照</p><p>repo sync的时候有可能会遇到的问题<br>info: A new version of repo is available<br>repo: Updating release signing keys to keyset ver 2.3<br>warning: repo is not tracking a remote branch, so it will not receive updates<br>repo reset: error: Entry ‘.github&#x2F;workflows&#x2F;test-ci.yml’ not uptodate. Cannot merge.<br>fatal: 不能重置索引文件至版本 ‘v2.16^0’。</p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd ~/bin/aosp/.repo/repo<br>git pull<br>cd ~/bin/aosp<br>再次repo init 和 repo sync<br></code></pre></td></tr></table></figure><h1 id="android10源码的编译"><a href="#android10源码的编译" class="headerlink" title="android10源码的编译"></a>android10源码的编译</h1><h2 id="1、安装JDK8"><a href="#1、安装JDK8" class="headerlink" title="1、安装JDK8"></a>1、安装JDK8</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo add-apt-repository ppa:openjdk-r/ppa<br>sudo apt-get update<br>sudo apt-get install openjdk-8-jdk<br></code></pre></td></tr></table></figure><h2 id="2、安装所需依赖-Ubuntu-20-04"><a href="#2、安装所需依赖-Ubuntu-20-04" class="headerlink" title="2、安装所需依赖 (Ubuntu 20.04)"></a>2、安装所需依赖 (Ubuntu 20.04)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig libncurses5<br></code></pre></td></tr></table></figure><p>参考以下地址<br>    <a href="https://source.android.com/setup/build/initializing?hl=zh-cn">https://source.android.com/setup/build/initializing?hl=zh-cn</a></p><h2 id="3、设备驱动的准备"><a href="#3、设备驱动的准备" class="headerlink" title="3、设备驱动的准备"></a>3、设备驱动的准备</h2><p>谷歌手机设备驱动下载地址<br><a href="https://developers.google.com/android/drivers">https://developers.google.com/android/drivers</a></p><h2 id="4、查看内核是否存在"><a href="#4、查看内核是否存在" class="headerlink" title="4、查看内核是否存在"></a>4、查看内核是否存在</h2><p>源码下载完后最好看下里面有没有你手机对应的设备内核<br>如果没有，需要另外下载或者编译<br><a href="https://source.android.google.cn/setup/build/building-kernels#id-version">https://source.android.google.cn/setup/build/building-kernels#id-version</a></p><h2 id="5、编译源码"><a href="#5、编译源码" class="headerlink" title="5、编译源码"></a>5、编译源码</h2><p>编译参考以下链接<br><a href="https://source.android.com/setup/build/building">https://source.android.com/setup/build/building</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">make clobber<br>source build/envsetup.sh<br>lunch# 选择设备内核和编译版本<br># 增加编译产品选项 修改aosp/device/google/marlin/AndroidProducts.mk<br>        -j 是cpu 选择适合自己的<br>make -j24<br></code></pre></td></tr></table></figure><p>bonito 为手机代号<br>编译成功后编译生成的文件在home&#x2F;tuzi&#x2F;bin&#x2F;aosp&#x2F;out&#x2F;target&#x2F;product&#x2F;bonito<br>对应管方刷机包里的img文件 都拖进去即可</p><h2 id="编译补充"><a href="#编译补充" class="headerlink" title="编译补充"></a>编译补充</h2><ol><li><p>编译报错或者修改系统文件以后，都可以直接make，已经编译的部分会跳过</p></li><li><p>make clean 会清除已经编译的，全部重来，在编译不同lunch选项时使用</p></li><li><p>单独编译system.img，在根目录下</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">source build/envsetup.sh<br>lunch xxx<br>make systemimage -j4<br></code></pre></td></tr></table></figure><ol><li>单独编译某个模块 mmm packages&#x2F;apps&#x2F;tuzi<br>将单独编译的模块打包到img镜像中 make snod</li></ol><h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb reboot bootloader<br>fastboot  flash  boot  boot.img<br>fastboot  flash  recovery  recovery.img<br>fastboot  flash  system  system.img<br>fastboot  flash  bootloader  bootloader.img<br>fastboot boot &lt;recovery_filename&gt;.img<br></code></pre></td></tr></table></figure><h1 id="AOSP源码导入到AndroidStudio"><a href="#AOSP源码导入到AndroidStudio" class="headerlink" title="AOSP源码导入到AndroidStudio"></a>AOSP源码导入到AndroidStudio</h1><ol><li><p>先成功编译一次，再使用以下方法导入</p></li><li><p>在ubuntu系统下，进入源码根目录，运行如下命令, 会在源码目录下的out&#x2F;host&#x2F;linux-x86&#x2F;framework目录下生成了idegen.jar文件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">source build/envsetup.sh<br>mmm development/tools/idegen/<br></code></pre></td></tr></table></figure><ol><li>在源码根目录下继续执行如下命令，会在根目录下生成android.iml和android.ipr两个文件，这两个文件是AndroidStudio的工程配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">development/tools/idegen/idegen.sh<br></code></pre></td></tr></table></figure><ol><li>安装并打开AndroidStudio，选择Open an existing Android Studio project，找到源码根目录，点击Android.ipr</li></ol><h1 id="Frida持久化介绍"><a href="#Frida持久化介绍" class="headerlink" title="Frida持久化介绍"></a>Frida持久化介绍</h1><ol><li><p>Hook的前提<br>需要将代码或者能够完成Hook功能的东西，注入到目标进程中<br>安卓中注入的方式：zygote注入、ptrace注入、文件感染等</p></li><li><p>frida-server<br>利用ptrace注入，需要root权限<br>为了方便Hook代码修改，还设计成了需要与PC端连接</p></li><li><p>frida-gadget<br>当Hook代码修改测试完毕，可以通过它来实现免root、脱离PC<br>但是它本身没有注入功能，需要将其打包到app中</p></li><li><p>魔改系统<br>在app启动过程中，自动加载frida-gadget，就可以不用修改app了，更通用</p></li></ol><h2 id="frida持久化的几种方案"><a href="#frida持久化的几种方案" class="headerlink" title="frida持久化的几种方案"></a>frida持久化的几种方案</h2><p>1.Android平台感染ELF文件实现模块注入 </p><p>2.修改smali，调用System.loadLibrary来加载so</p><p>上面两种方法都有成品<a href="https://github.com/nszdhd1/UtilScript">https://github.com/nszdhd1/UtilScript</a><br>使用方式见<a href="https://bbs.pediy.com/thread-268175.htm">https://bbs.pediy.com/thread-268175.htm</a><br>3.修改rom 在app启动过程中加载frida-gadget</p><h2 id="修改app启动流程"><a href="#修改app启动流程" class="headerlink" title="修改app启动流程"></a>修改app启动流程</h2><h3 id="1-打开app时判断是否启用持久化"><a href="#1-打开app时判断是否启用持久化" class="headerlink" title="1. 打开app时判断是否启用持久化"></a>1. 打开app时判断是否启用持久化</h3><p>&#x2F;frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;ActivityThread.java<br>在以上文件中，添加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">// add<br>        String curPkgName = data.appInfo.packageName;<br>        int curUid = Process.myUid();<br>        <span class="hljs-keyword">if</span> (curUid &gt; 10000) &#123;<br>            Persist.LOGD(<span class="hljs-string">&quot;curPkgName: &quot;</span> + curPkgName + <span class="hljs-string">&quot; curUid: &quot;</span> + curUid);<br>            Boolean isPersist = Persist.isEnablePersist(curPkgName);<br>            Persist.LOGD(<span class="hljs-string">&quot;isPersist: &quot;</span> + isPersist);<br>            <span class="hljs-keyword">if</span> (isPersist) &#123;<br>                <span class="hljs-keyword">if</span>(Persist.dotuzi(appContext, curPkgName))&#123;<br>                    Persist.LOGD(<span class="hljs-string">&quot;dotuzi is ok&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    Persist.LOGD(<span class="hljs-string">&quot;dotuzi failed&quot;</span>);<br>                &#125;;<br>            &#125;<br>        &#125;<br>// add<br></code></pre></td></tr></table></figure><h3 id="2-增加自定义包和类"><a href="#2-增加自定义包和类" class="headerlink" title="2. 增加自定义包和类"></a>2. 增加自定义包和类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs bash">package com.tuzi;<br><br>import android.content.Context;<br>import android.util.Log;<br>import android.os.Process;<br><br>import java.io.File;<br>import java.io.FileInputStream;<br>import java.io.FileOutputStream;<br><br>import org.json.JSONObject;<br><br><br>public class Persist &#123;<br><br>    public static final String SO_NAME = <span class="hljs-string">&quot;libtuzi.so&quot;</span>;<br>    public static final String SO_CONFIG_NAME = <span class="hljs-string">&quot;libtuzi.config.so&quot;</span>;<br>    public static final String LIB32_DIR = <span class="hljs-string">&quot;/system/lib&quot;</span>;<br>    public static final String LIB64_DIR = <span class="hljs-string">&quot;/system/lib64&quot;</span>;<br><br>    public static final String SETTINGS_DIR = <span class="hljs-string">&quot;/data/system/xsettings/tuzi/persist&quot;</span>;<br>    public static final String ENABLE_PERSIST_FILE_NAME = <span class="hljs-string">&quot;tuzi_persist&quot;</span>;<br><br>    public static final String CONFIG_JS_DIR = <span class="hljs-string">&quot;/data/system/xsettings/tuzi/jscfg&quot;</span>;<br>    public static final String CONFIG_JS_FILE_NAME = <span class="hljs-string">&quot;config.js&quot;</span>;<br><br>    public static final String TAG_NAME = <span class="hljs-string">&quot;tuzi_persist&quot;</span>;<br><br><br>    public static void LOGD(String msg) &#123;<br>        Log.d(TAG_NAME, msg);<br>    &#125;<br><br>    private static boolean saveFile(String filePath, String textMsg) &#123;<br>        try&#123;<br>            FileOutputStream fileOutputStream = new FileOutputStream(filePath);<br>            fileOutputStream.write(textMsg.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>));<br>            fileOutputStream.flush();<br>            fileOutputStream.close();<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    private static boolean copyFile(File srcFile, File dstFile) &#123;<br>        try&#123;<br>            FileInputStream fileInputStream = new FileInputStream(srcFile);<br>            FileOutputStream fileOutputStream = new FileOutputStream(dstFile);<br>            byte[] data = new byte[16 * 1024];<br>            int len = -1;<br>            <span class="hljs-keyword">while</span>((len = fileInputStream.<span class="hljs-built_in">read</span>(data)) != -1) &#123;<br>                fileOutputStream.write(data,0, len);<br>                fileOutputStream.flush();<br>            &#125;<br>            fileInputStream.close();<br>            fileOutputStream.close();<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    // 判断app是否打开自动注入脚本功能<br>    public static boolean isEnablePersist(String pkgName) &#123;<br>        // 判断文件是否存在 /data/system/xsettings/tuzi/persist/com.tuzi.app/tuzi_persist<br>        File enableFile = new File(SETTINGS_DIR, pkgName + File.separator + ENABLE_PERSIST_FILE_NAME);<br>        <span class="hljs-built_in">return</span> enableFile.exists();<br>    &#125;<br>    // 获取源JS文件路径<br>    private static File getConfigJSPath(String pkgName) &#123;<br>        // /data/system/xsettings/tuzi/jscfg/com.tuzi.app/config.js<br>        <span class="hljs-built_in">return</span> new File(CONFIG_JS_DIR, pkgName + File.separator + CONFIG_JS_FILE_NAME);<br>    &#125;<br>    // 拷贝源JS文件到app私有目录<br>    private static File copyJSFile(Context context, String pkgName) &#123;<br>        // 判断源JS文件是否存在<br>        File srcJSFile = getConfigJSPath(pkgName);<br>        <span class="hljs-keyword">if</span>(!srcJSFile.exists()) &#123;<br>            LOGD(<span class="hljs-string">&quot;srcJSFile not exists&quot;</span>);<br>            <span class="hljs-built_in">return</span> null;<br>        &#125;<br>        // 拷贝源JS文件到app私有目录<br>        // /data/data/com.tuzi.app/files/config.js<br>        File dstJSFile = new File(context.getFilesDir(), CONFIG_JS_FILE_NAME);<br>        boolean isCopyJSOk = copyFile(srcJSFile, dstJSFile);<br>        <span class="hljs-keyword">if</span>(!isCopyJSOk)&#123;<br>            LOGD(<span class="hljs-string">&quot;copyJSFile fail: &quot;</span> + srcJSFile + <span class="hljs-string">&quot; -&gt; &quot;</span> + dstJSFile);<br>            <span class="hljs-built_in">return</span> null;<br>        &#125;<br>        <span class="hljs-built_in">return</span> dstJSFile;<br>    &#125;<br>    // 生成Gadget配置文件<br>    private static boolean genGadgetConfig(Context context, File dstJSFile) &#123;<br>        JSONObject jsonObject = new JSONObject();<br>        JSONObject childObj = new JSONObject();<br>        try &#123;<br>            childObj.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>);<br>            childObj.put(<span class="hljs-string">&quot;path&quot;</span>, dstJSFile.toString());<br>            jsonObject.put(<span class="hljs-string">&quot;interaction&quot;</span>, childObj);<br>        &#125;catch (Exception e)&#123;<br>            e.printStackTrace();<br><span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        String configFilePath = context.getFilesDir() + File.separator + SO_CONFIG_NAME;<br>        boolean isSaveOk = saveFile(configFilePath, jsonObject.toString());<br>        <span class="hljs-keyword">if</span>(!isSaveOk)&#123;<br>            LOGD(<span class="hljs-string">&quot;saveFile fail: &quot;</span> + configFilePath);<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    // 拷贝源so文件到app私有目录<br>    private static File copySoFile(Context context) &#123;<br>        // 判断源so文件是否存在<br>        // /system/lib/libtuzi.so<br>        // /system/lib64/libtuzi.so<br>        File srcSoFile = new File(LIB32_DIR, SO_NAME);<br>        <span class="hljs-keyword">if</span>(Process.is64Bit()) &#123;<br>            srcSoFile = new File(LIB64_DIR, SO_NAME);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!srcSoFile.exists()) &#123;<br>            LOGD(<span class="hljs-string">&quot;srcSoFile not exists&quot;</span>);<br>            <span class="hljs-built_in">return</span> null;<br>        &#125;<br>        // 拷贝源so文件到app私有目录<br>        // /data/data/com.tuzi.app/files/libtuzi.so<br>        File dstSoFile = new File(context.getFilesDir(), SO_NAME);<br>        <span class="hljs-keyword">if</span>(srcSoFile.length() != dstSoFile.length()) &#123;<br>            boolean isCopyFileOk = copyFile(srcSoFile, dstSoFile);<br>            <span class="hljs-keyword">if</span>(!isCopyFileOk)&#123;<br>                LOGD(<span class="hljs-string">&quot;copySoFile fail: &quot;</span> + srcSoFile + <span class="hljs-string">&quot; -&gt; &quot;</span> + dstSoFile);<br>                <span class="hljs-built_in">return</span> null;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">return</span> dstSoFile;<br>    &#125;<br>    // 进行Frida Gadget持久化<br>    public static boolean dotuziPersist(Context context, String pkgName) &#123;<br>        File dstJSFile = copyJSFile(context, pkgName);<br>        <span class="hljs-keyword">if</span>(null == dstJSFile) <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(!genGadgetConfig(context, dstJSFile)) <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>        File dstSoFile = copySoFile(context);<br>        <span class="hljs-keyword">if</span>(null == dstSoFile) <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>        System.load(dstSoFile.toString());<br>        <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-将自定义包加入白名单"><a href="#3-将自定义包加入白名单" class="headerlink" title="3. 将自定义包加入白名单"></a>3. 将自定义包加入白名单</h3><p>&#x2F;build&#x2F;make&#x2F;core&#x2F;tasks&#x2F;check_boot_jars&#x2F;package_whitelist.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br>com\.tuzi<br><span class="hljs-comment"># // add</span><br></code></pre></td></tr></table></figure><h3 id="4-frida-gadget集成到系统"><a href="#4-frida-gadget集成到系统" class="headerlink" title="4. frida-gadget集成到系统"></a>4. frida-gadget集成到系统</h3><p>将 frida-gadget 放到源码目录，比如如下文件夹中<br>&#x2F;frameworks&#x2F;base&#x2F;cmds&#x2F;libtuzi</p><p>修改源码以下文件，将 frida-gadget 拷贝到编译以后的系统中<br>&#x2F;build&#x2F;make&#x2F;target&#x2F;product&#x2F;handheld_system.mk</p><p>添加以下数据，自动拷贝文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br>PRODUCT_COPY_FILES += \<br>    frameworks/base/cmds/tuzi/frida-gadget-14.2.18-android-arm.so:$(TARGET_COPY_OUT_SYSTEM)/lib/libtuzi.so \<br>    frameworks/base/cmds/tuzi/frida-gadget-14.2.18-android-arm64.so:$(TARGET_COPY_OUT_SYSTEM)/lib64/libtuzi.so<br><span class="hljs-comment"># // add</span><br></code></pre></td></tr></table></figure><h3 id="5-自定义目录设计"><a href="#5-自定义目录设计" class="headerlink" title="5. 自定义目录设计"></a>5. 自定义目录设计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/data/system/xsettings/tuzi/persist/pkgName/tuzi_persist<br>/data/system/xsettings/tuzi/jscfg/pkgName/config.js<br>persist_tuzi文件存在，则表示开启持久化<br>config.js表示用于注入的hook代码<br></code></pre></td></tr></table></figure><h3 id="6-开机创建自定义目录"><a href="#6-开机创建自定义目录" class="headerlink" title="6. 开机创建自定义目录"></a>6. 开机创建自定义目录</h3><p>&#x2F;system&#x2F;core&#x2F;rootdir&#x2F;init.rc 文件中添加以下数据 625</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br><span class="hljs-comment"># /data/system/xsettings/tuzi/persist</span><br><span class="hljs-built_in">mkdir</span> /data/system/xsettings 0775 system system<br><span class="hljs-built_in">mkdir</span> /data/system/xsettings/tuzi 0775 system system<br><span class="hljs-built_in">mkdir</span> /data/system/xsettings/tuzi/persist 0775 system system<br><span class="hljs-built_in">mkdir</span> /data/system/xsettings/tuzi/jscfg 0775 system system<br><span class="hljs-comment"># // add</span><br></code></pre></td></tr></table></figure><h3 id="7-创建文件类型SeLinux标签：tuzi-file"><a href="#7-创建文件类型SeLinux标签：tuzi-file" class="headerlink" title="7. 创建文件类型SeLinux标签：tuzi_file"></a>7. 创建文件类型SeLinux标签：tuzi_file</h3><p>7.1 在如下文件中添加数据<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/system/sepolicy/public/file.te<br>/system/sepolicy/prebuilts/api/29.0/public/file.te<br></code></pre></td></tr></table></figure><br>7.2 在以上文件中添加如下数据，两个文件添加的内容需要一致 405</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br><span class="hljs-comment"># /data/system/xsettings/tuzi/persist</span><br><span class="hljs-built_in">type</span> tuzi_file, file_type, data_file_type, core_data_file_type, mlstrustedobject;<br><span class="hljs-comment"># // add</span><br><br></code></pre></td></tr></table></figure><p>7.3 注意文件不要以注释结尾，每行结束加分号</p><h3 id="8-为自定义目录关联文件类型标签-tuzi-file"><a href="#8-为自定义目录关联文件类型标签-tuzi-file" class="headerlink" title="8. 为自定义目录关联文件类型标签: tuzi_file"></a>8. 为自定义目录关联文件类型标签: tuzi_file</h3><p>8.1 在如下文件中添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/system/sepolicy/private/file_contexts<br>/system/sepolicy/prebuilts/api/29.0/private/file_contexts<br></code></pre></td></tr></table></figure><p>8.2 在以上文件中添加如下数据，两个文件添加的内容需要一致 122<br>  注意文件不要以注释结尾<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br><span class="hljs-comment"># /data/system/xsettings/tuzi/persist</span><br>/data/system/xsettings(/.*)?u:object_r:tuzi_file:s0<br><span class="hljs-comment"># // add</span><br></code></pre></td></tr></table></figure></p><h3 id="9-配置system-app访问-tuzi-file-标签文件的权限"><a href="#9-配置system-app访问-tuzi-file-标签文件的权限" class="headerlink" title="9. 配置system app访问 tuzi_file 标签文件的权限"></a>9. 配置system app访问 tuzi_file 标签文件的权限</h3><p>9.1 在如下文件中添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/system/sepolicy/private/system_app.te<br>/system/sepolicy/prebuilts/api/29.0/private/system_app.te<br></code></pre></td></tr></table></figure><p>9.2 在以上文件中添加如下数据，两个文件添加的内容需要一致 末尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br><span class="hljs-comment"># add for accessing tuzi_file</span><br>allow system_app tuzi_file:<span class="hljs-built_in">dir</span>  &#123; getattr setattr open <span class="hljs-built_in">read</span> write remove_name create add_name search <span class="hljs-built_in">rmdir</span> &#125;;<br>allow system_app tuzi_file:file &#123; getattr setattr open <span class="hljs-built_in">read</span> write create <span class="hljs-built_in">unlink</span> &#125;;<br></code></pre></td></tr></table></figure><h3 id="10-配置第三方app访问-tuzi-file-标签文件的权限"><a href="#10-配置第三方app访问-tuzi-file-标签文件的权限" class="headerlink" title="10. 配置第三方app访问 tuzi_file 标签文件的权限"></a>10. 配置第三方app访问 tuzi_file 标签文件的权限</h3><p>10.1 在如下文件中添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/system/sepolicy/private/untrusted_app.te<br>/system/sepolicy/private/untrusted_app_25.te<br>/system/sepolicy/private/untrusted_app_27.te<br>/system/sepolicy/private/untrusted_app_all.te<br><br>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app.te<br>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app_25.te<br>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app_27.te<br>/system/sepolicy/prebuilts/api/29.0/private/untrusted_app_all.te<br></code></pre></td></tr></table></figure><p>10.2 在以上文件中添加如下数据，两个文件添加的内容需要一致 末尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br><span class="hljs-comment"># add for accessing tuzi_file</span><br>allow untrusted_app tuzi_file:<span class="hljs-built_in">dir</span>  &#123; getattr open <span class="hljs-built_in">read</span> write search <span class="hljs-built_in">rmdir</span> &#125;;<br>allow untrusted_app tuzi_file:file &#123; getattr open <span class="hljs-built_in">read</span> write &#125;;<br></code></pre></td></tr></table></figure><h2 id="安卓编译常见错误"><a href="#安卓编译常见错误" class="headerlink" title="安卓编译常见错误"></a>安卓编译常见错误</h2><h3 id="11-文件-system-x2F-sepolicy-x2F-prebuilts-x2F-api-x2F-29-0-x2F-private-x2F-untrusted-app-all-te-和-system-x2F-sepolicy-x2F-private-x2F-untrusted-app-all-te-不同"><a href="#11-文件-system-x2F-sepolicy-x2F-prebuilts-x2F-api-x2F-29-0-x2F-private-x2F-untrusted-app-all-te-和-system-x2F-sepolicy-x2F-private-x2F-untrusted-app-all-te-不同" class="headerlink" title="11. 文件 system&#x2F;sepolicy&#x2F;prebuilts&#x2F;api&#x2F;29.0&#x2F;private&#x2F;untrusted_app_all.te 和 system&#x2F;sepolicy&#x2F;private&#x2F;untrusted_app_all.te 不同"></a>11. 文件 system&#x2F;sepolicy&#x2F;prebuilts&#x2F;api&#x2F;29.0&#x2F;private&#x2F;untrusted_app_all.te 和 system&#x2F;sepolicy&#x2F;private&#x2F;untrusted_app_all.te 不同</h3><h3 id="12-修改以下文件，防止报错：tuzi-file-未定义"><a href="#12-修改以下文件，防止报错：tuzi-file-未定义" class="headerlink" title="12. 修改以下文件，防止报错：tuzi_file 未定义"></a>12. 修改以下文件，防止报错：tuzi_file 未定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/system/sepolicy/private/compat/26.0/26.0.ignore.cil 17<br>/system/sepolicy/private/compat/27.0/27.0.ignore.cil 16<br>/system/sepolicy/private/compat/28.0/28.0.ignore.cil 15<br><br>/system/sepolicy/prebuilts/api/29.0/private/compat/26.0/26.0.ignore.cil 17<br>/system/sepolicy/prebuilts/api/29.0/private/compat/27.0/27.0.ignore.cil 16<br>/system/sepolicy/prebuilts/api/29.0/private/compat/28.0/28.0.ignore.cil 15<br></code></pre></td></tr></table></figure><p>在以上文件中加入数据 tuzi_file<br>两个文件添加的内容需要一致</p><h3 id="13-You-have-tried-to-change-the-API-from-what-has-been-previously-released-inan-SDK-Please-fix-the-errors-listed-above"><a href="#13-You-have-tried-to-change-the-API-from-what-has-been-previously-released-inan-SDK-Please-fix-the-errors-listed-above" class="headerlink" title="13. You have tried to change the API from what has been previously released inan SDK. Please fix the errors listed above"></a>13. You have tried to change the API from what has been previously released inan SDK. Please fix the errors listed above</h3><p>修改了代码以后，有些时候需要先 make update-api，再编译</p><h2 id="Frida持久化管理app的开发"><a href="#Frida持久化管理app的开发" class="headerlink" title="Frida持久化管理app的开发"></a>Frida持久化管理app的开发</h2><h3 id="1-管理app的功能"><a href="#1-管理app的功能" class="headerlink" title="1. 管理app的功能"></a>1. 管理app的功能</h3><pre><code>显示已安装app列表可以对每个app指定需要注入的JS可以设置是否启用持久化</code></pre><h3 id="2-相应功能实现原理"><a href="#2-相应功能实现原理" class="headerlink" title="2. 相应功能实现原理"></a>2. 相应功能实现原理</h3><pre><code>3.1 创建表示启用的文件/data/system/xsettings/tuzi/persist/pkgName/tuzi_persist3.2 指定的JS文件复制到以下目录/data/system/xsettings/tuzi/jscfg/pkgName/config.js3.3 剩下的复制so、JS文件和加载so的操作，由魔改的dotuziPersist函数完成</code></pre><h2 id="system权限的app开发"><a href="#system权限的app开发" class="headerlink" title="system权限的app开发"></a>system权限的app开发</h2><h3 id="1-system权限app的开发"><a href="#1-system权限app的开发" class="headerlink" title="1. system权限app的开发"></a>1. system权限app的开发</h3><p>1.1 在 manifest 中加入 android:sharedUserId&#x3D;”android.uid.system”<br>1.2 将编译出来的app放入 &#x2F;packages&#x2F;apps&#x2F;tuziPersist<br>1.3 编写Android.mk，也放入该文件夹<br>1.4 单独编译指定模块 mmm packages&#x2F;apps&#x2F;tuziPersist<br>1.5 编译后的模块在 &#x2F;out&#x2F;target&#x2F;product&#x2F;sailfish&#x2F;system&#x2F;app&#x2F;ControlAPP<br>1.6 使用 make snod 将编译出来的文件打包成镜像，刷入system.img即可</p><h3 id="2-如果要在编译整个系统时，一起编译这个模块，需要将模块-ControlAPP-加入源码编译链"><a href="#2-如果要在编译整个系统时，一起编译这个模块，需要将模块-ControlAPP-加入源码编译链" class="headerlink" title="2. 如果要在编译整个系统时，一起编译这个模块，需要将模块 ControlAPP 加入源码编译链"></a>2. 如果要在编译整个系统时，一起编译这个模块，需要将模块 ControlAPP 加入源码编译链</h3><p>2.1 增加的内置模块，如果为APP，加入到如下文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/build/make/target/product/handheld_product.mk<br></code></pre></td></tr></table></figure><p>2.2 增加的内置模块，如果为可执行程序，加入到如下文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/build/make/target/product/base_system.mk<br></code></pre></td></tr></table></figure><h2 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># // add</span><br><span class="hljs-comment"># 设置当前工作路径</span><br>LOCAL_PATH:= $(call my-dir)<br><br><br><span class="hljs-comment"># 清除变量值</span><br>include $(CLEAR_VARS)<br><span class="hljs-comment"># 生成的模块名称</span><br>LOCAL_MODULE := ControlAPP<br><br><br><span class="hljs-comment"># 生成的模块类型</span><br>LOCAL_MODULE_CLASS := APPS<br><span class="hljs-comment"># 生成的模块后缀名,此处为apk</span><br>LOCAL_MODULE_SUFFIX := $(COMMON_ANDROID_PACKAGE_SUFFIX)<br><span class="hljs-comment"># 设置模块tag，tags取值可以为:user debug eng tests optional</span><br><span class="hljs-comment"># optional表示全平台编译</span><br>LOCAL_MODULE_TAGS := optional<br><br><span class="hljs-comment"># LOCAL_PRIVILEGED_MODULE := true</span><br><br>LOCAL_BUILT_MODULE_STEM := package.apk<br><br>LOCAL_DEX_PREOPT := <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 设置源文件</span><br>LOCAL_SRC_FILES := $(LOCAL_MODULE).apk<br><br>LOCAL_CERTIFICATE := platform<br><br><span class="hljs-comment"># 设置签名，此处表示保持apk原有签名</span><br><span class="hljs-comment"># LOCAL_CERTIFICATE := PRESIGNED</span><br><span class="hljs-comment"># 此处表示预编译方式</span><br>include $(BUILD_PREBUILT)<br><br></code></pre></td></tr></table></figure><h1 id="加固与脱壳介绍"><a href="#加固与脱壳介绍" class="headerlink" title="加固与脱壳介绍"></a>加固与脱壳介绍</h1><h3 id="1-什么是加固"><a href="#1-什么是加固" class="headerlink" title="1. 什么是加固"></a>1. 什么是加固</h3><p>演示加固前后的反编译结果<br>其实就是将原先app的dex文件加密，app运行过程中，解密后再加载<br>反编译时看到的就是壳的代码，或者被抽空的代码</p><h3 id="2-什么是脱壳"><a href="#2-什么是脱壳" class="headerlink" title="2. 什么是脱壳"></a>2. 什么是脱壳</h3><pre><code>演示脱壳前后的反编译结果本质上就是将加固app运行过程中，解密后加载的dex文件保存下来与加密算法差不多，一个加密的是字符/字节数据，一个加密的是文件(也是字节数据)</code></pre><p>逆向加密算法主要要的是过程，做算法还原，而脱壳要的是解密后的dex文件</p><h3 id="3-为什么要脱壳"><a href="#3-为什么要脱壳" class="headerlink" title="3. 为什么要脱壳"></a>3. 为什么要脱壳</h3><p>不脱壳反编译时，通常只能看到壳的代码，或者被抽取后的代码<br>360：整体加固以及被vmp化的onCreate<br>ijiami：函数体指令被抽取，用nop填充原有数据，或者干脆就变成空函数</p><h3 id="4-分析加固的app是不是必须脱壳？"><a href="#4-分析加固的app是不是必须脱壳？" class="headerlink" title="4. 分析加固的app是不是必须脱壳？"></a>4. 分析加固的app是不是必须脱壳？</h3><p>比如可以直接trace指令 但是静态分析配合动态分析才是优选</p><h3 id="5-怎么判断app是否加固"><a href="#5-怎么判断app是否加固" class="headerlink" title="5. 怎么判断app是否加固"></a>5. 怎么判断app是否加固</h3><p>反编译查看类数量、类中的方法特征<br>反编译查看类名特征、so特征 libjiagu.so、qihoo<br>查壳工具<br>没有加固的，也可以脱壳</p><h3 id="6-加固的分类"><a href="#6-加固的分类" class="headerlink" title="6. 加固的分类"></a>6. 加固的分类</h3><p>dex加固：整体加固、抽取加固、VMP、dex2c等<br>so加固：对so结构进行处理、对so数据进行加密、自定义linker<br>一般处理方式就是so dump，然后so修复</p><h2 id="整体加固介绍"><a href="#整体加固介绍" class="headerlink" title="整体加固介绍"></a>整体加固介绍</h2><h3 id="1-整体加固"><a href="#1-整体加固" class="headerlink" title="1. 整体加固"></a>1. 整体加固</h3><p>1.1 可分为落地加载、内存加载<br>1.2 本质上都是将app自身的dex整体加密，app运行过程中解密后加载<br>1.3 有些壳还会抹掉dex文件头、dex的文件大小filesize等<br>1.4 一般会有字符串加密、资源加密、反调试、签名验证</p><h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h3><p>2.1 脱壳工具fdex2<br>通过Class类的getDex方法得到DexFile，再通过DexFile的getBytes方法得到dex文件<br>2.2 脱壳工具blackdex<br>通过mCookie来脱壳<br>2.3 脱壳工具FRIDA-DEXDump<br>从内存中搜索dex文件，保存下来<br>2.4 脱壳系统FART、youpk<br>在dex加载、解析、解释执行过程中，找一个合适的时机，得到DexFile内存地址和大小，将解密状态的dex保存下来<br>还可以通过artMethod来得到DexFile</p><h2 id="ART下的脱壳原理"><a href="#ART下的脱壳原理" class="headerlink" title="ART下的脱壳原理"></a>ART下的脱壳原理</h2><h3 id="1-在线源码查看"><a href="#1-在线源码查看" class="headerlink" title="1. 在线源码查看"></a>1. 在线源码查看</h3><p><a href="http://androidxref.com/">http://androidxref.com/</a><br><a href="http://aospxref.com/">http://aospxref.com/</a><br><a href="https://android-opengrok.bangnimang.net/">https://android-opengrok.bangnimang.net/</a><br><a href="https://cs.android.com/">https://cs.android.com/</a> 需要科学上网</p><h3 id="2-ART下的脱壳点"><a href="#2-ART下的脱壳点" class="headerlink" title="2. ART下的脱壳点"></a>2. ART下的脱壳点</h3><p>2.1 dex的加载流程</p><p>通过mCookie脱壳的</p><p>通过openCommen函数脱壳的</p><p>通过DexFile构造函数脱壳的</p><p>youpk：通过ClassLinker的DexCacheData进一步得到DexFile</p><p>2.2 dex2oat的编译流程</p><p>通过修改dex2oat脱壳的</p><p>2.3 类的加载、链接、校验、初始化流程</p><p>DexHunter在defineClass进行类解析</p><p>LoadMethod、LinkCode</p><p>2.4 函数执行过程中的脱壳点</p><p>FART: Execute整体脱壳</p><p>FART：ArtMethod::invoke函数中进行dump CodeItem</p><p>youpk：直接到了解释执行的函数中进行dump CodeItem</p><h3 id="3-InMemoryDexClassLoader源码分析"><a href="#3-InMemoryDexClassLoader源码分析" class="headerlink" title="3. InMemoryDexClassLoader源码分析"></a>3. InMemoryDexClassLoader源码分析</h3><p>早期脱壳点：openCommen、DexFile</p><p>整体脱壳的本质：就是找到DexFile对象</p><h3 id="4-mCookie脱壳原理"><a href="#4-mCookie脱壳原理" class="headerlink" title="4. mCookie脱壳原理"></a>4. mCookie脱壳原理</h3><p>ConvertJavaArrayToDexFiles<br>ConvertDexFilesToJavaArray</p><h3 id="5-DexClassLoader源码分析"><a href="#5-DexClassLoader源码分析" class="headerlink" title="5. DexClassLoader源码分析"></a>5. DexClassLoader源码分析</h3><p>Android 10 不再从应用进程调用dex2oat<br><a href="https://developer.android.com/about/versions/10/behavior-changes-10?hl=zh-cn#system-only-oat">https://developer.android.com/about/versions/10/behavior-changes-10?hl=zh-cn#system-only-oat</a><br><a href="https://blog.csdn.net/YZcoder/article/details/120648821">https://blog.csdn.net/YZcoder/article/details/120648821</a><br>早期脱壳点：OpenAndReadMagic、openCommen、DexFile</p><h3 id="6-youpk脱壳原理"><a href="#6-youpk脱壳原理" class="headerlink" title="6. youpk脱壳原理"></a>6. youpk脱壳原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">std::list&lt;const DexFile*&gt; Unpacker::<span class="hljs-function"><span class="hljs-title">getDexFiles</span></span>() &#123;<br>  std::list&lt;const DexFile*&gt; dex_files;<br>  Thread* const self = Thread::Current();<br>  ClassLinker* class_linker = Runtime::Current()-&gt;GetClassLinker();<br>  ReaderMutexLock mu(self, *class_linker-&gt;DexLock());<br>  const std::list&lt;ClassLinker::DexCacheData&gt;&amp; dex_caches = class_linker-&gt;GetDexCachesData();<br>  <span class="hljs-keyword">for</span> (auto it = dex_caches.begin(); it != dex_caches.end(); ++it) &#123;<br>    ClassLinker::DexCacheData data = *it;<br>    const DexFile* dex_file = data.dex_file;<br>    const std::string&amp; dex_location = dex_file-&gt;GetLocation();<br>    <span class="hljs-keyword">if</span> (dex_location.rfind(<span class="hljs-string">&quot;/system/&quot;</span>, 0) == 0) &#123;<br>      <span class="hljs-built_in">continue</span>;<br>    &#125;<br>    dex_files.push_back(dex_file);<br>  &#125;<br>  <span class="hljs-built_in">return</span> dex_files;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fartExt"><a href="#fartExt" class="headerlink" title="fartExt"></a>fartExt</h3><h4 id="解决抽取壳在脱壳完成后还需要手动修复"><a href="#解决抽取壳在脱壳完成后还需要手动修复" class="headerlink" title="解决抽取壳在脱壳完成后还需要手动修复"></a>解决抽取壳在脱壳完成后还需要手动修复</h4><p>​ 在优化这个问题前，首先要意识到为什么会需要手动修复，当我们理解了大佬的处理之后，就发现hanbingle大佬为了避免每个函数主动调用都将dex给保存，所以只有文件不存在的时候才保存。也就意味着我们保存的dex是第一个主动调用执行时的dex。如果这个抽取壳是必须函数执行后才会恢复的，那么后面的函数在这个保存dex中都依然是被抽取的。FART的做法是将codeitem保存出来后，然后再修复。所以我将这里优化了一下。</p><p>​ 知道问题所在后，优化的思路就清晰了，我采用了比较简单的一种优化方式，就是每个dex文件保存时，将这个dex的地址以及长度给保存下来。最后在所有主动调用完成时，重新将所有dex文件再保存一次。下面看看优化后的相关代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>//存放dex的指针和长度<br>static std::map&lt;void*,size_t&gt; dex_map;<br> <br>//主动调用函数的dump处理<br>extern <span class="hljs-string">&quot;C&quot;</span> void dumpArtMethod(ArtMethod* artmethod)  REQUIRES_SHARED(Locks::mutator_lock_) &#123;<br>                ...<br>                int dexfilefp=open(dexfilepath,O_RDONLY,0666);<br>                ///dex文件存在则不处理,避免主动调用每次都要重新保存dex<br>                <span class="hljs-keyword">if</span>(dexfilefp&gt;0)&#123;<br>                    close(dexfilefp);<br>                    dexfilefp=0;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;mikrom ArtMethod::dumpdexfilebyArtMethod save dex_map&quot;</span>;<br>                    //将这个地址给保存下来<br>                    dex_map.insert(std::pair&lt;void*,size_t&gt;((void*)begin_,size_));<br>                    int fp=open(dexfilepath,O_CREAT|O_APPEND|O_RDWR,0666);<br>                    ...<br>                &#125;<br>&#125;<br>//主动调用完成时,重新保存到文件名&lt;dexSize&gt;_dexfile_repair.dex中<br>extern <span class="hljs-string">&quot;C&quot;</span> void dumpDexOver()  REQUIRES_SHARED(Locks::mutator_lock_) &#123;<br>    <span class="hljs-keyword">if</span>(dex_map.size()&lt;=0)&#123;<br>            LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;mikrom dumpDexOver dex_map.size()&lt;=0&quot;</span>;<br>        <span class="hljs-built_in">return</span>;<br>    &#125;<br>    char *dexfilepath=(char*)malloc(sizeof(char)*1000);<br>    LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;mikrom ArtMethod::dumpDexOver&quot;</span>;<br>    int result=0;<br>    char* packageName=ArtMethod::GetPackageName();<br>    std::map&lt;void*, size_t&gt;::iterator iter;<br>    <span class="hljs-keyword">for</span>(iter = dex_map.begin(); iter != dex_map.end(); iter++) &#123;<br>        void* begin_=iter-&gt;first;<br>        size_t size_=iter-&gt;second;<br>        int size_int_=(int)size_;<br>        memset(dexfilepath,0,1000);<br>        sprintf(dexfilepath,<span class="hljs-string">&quot;/sdcard/Android/data/%s/files/dump&quot;</span>,packageName);<br>        <span class="hljs-built_in">mkdir</span>(dexfilepath,0777);<br>        memset(dexfilepath,0,1000);<br>        sprintf(dexfilepath,<span class="hljs-string">&quot;/sdcard/Android/data/%s/files/dump/%d_dexfile_repair.dex&quot;</span>,packageName,size_int_);<br>        int dexfilefp=open(dexfilepath,O_RDONLY,0666);<br>        <span class="hljs-keyword">if</span>(dexfilefp&gt;0)&#123;<br>          close(dexfilefp);<br>          dexfilefp=0;<br> <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          int fp=open(dexfilepath,O_CREAT|O_APPEND|O_RDWR,0666);<br>          <span class="hljs-keyword">if</span>(fp&gt;0)<br>          &#123;<br>              result=write(fp,(void*)begin_,size_);<br>              <span class="hljs-keyword">if</span>(result&lt;0)<br>              &#123;<br>                  LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;mikrom ArtMethod::dumpDexOver,open dexfilepath error&quot;</span>;<br>              &#125;<br>              fsync(fp);<br>              close(fp);<br>              memset(dexfilepath,0,1000);<br>          &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dexfilepath!=nullptr)<br>    &#123;<br>        free(dexfilepath);<br>        dexfilepath=nullptr;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-dex2oat的脱壳原理"><a href="#7-dex2oat的脱壳原理" class="headerlink" title="7. dex2oat的脱壳原理"></a>7. dex2oat的脱壳原理</h3><p><a href="https://www.jianshu.com/p/7af31cc5130e">https://www.jianshu.com/p/7af31cc5130e</a></p><h3 id="8-fdex2脱壳原理-classObj-getDex-getBytes"><a href="#8-fdex2脱壳原理-classObj-getDex-getBytes" class="headerlink" title="8. fdex2脱壳原理 classObj.getDex().getBytes()"></a>8. fdex2脱壳原理 classObj.getDex().getBytes()</h3><h3 id="9-FART：Execute"><a href="#9-FART：Execute" class="headerlink" title="9. FART：Execute"></a>9. FART：Execute</h3><h3 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h3><p>只要能够获取到DexFile的地方，都可以尝试脱壳<br>也可以是间接得到DexFile的地方，比如ArtMathod-&gt;getDexFile()</p><h3 id="11-常见脱壳点"><a href="#11-常见脱壳点" class="headerlink" title="11. 常见脱壳点"></a>11. 常见脱壳点</h3><p>函数解释执行Execute<br>通过ClassLinker的DexCacheData进一步得到DexFile<br>内存搜索dex文件来dump<br>通过mCookie脱壳的</p><p>通过DexFile构造函数脱壳的<br>LoadMethod传入的DexFile<br>LinkCode传入的ArtMethod进一步得到DexFile, ArtMethod-&gt;getDexFile() </p><h2 id="AOSP源码导入到Clion"><a href="#AOSP源码导入到Clion" class="headerlink" title="AOSP源码导入到Clion"></a>AOSP源码导入到Clion</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. Clion的安装<br><br>2. 生成用于将源码导入Clion的CMakeLists.txt<br>// 打开开关，编译时生成CMakeLists.txt<br><span class="hljs-built_in">export</span> SOONG_GEN_CMAKEFILES=1<br><span class="hljs-built_in">export</span> SOONG_GEN_CMAKEFILES_DEBUG=1<br><br>// 全编译<br>make -j24<br><br>// CMakeLists.txt会生成在<br>out/development/ide/clion/art/runtime/libart-arm64-android/CMakeLists.txt<br><br>3. 用Clion打开该CMakeLists.txt<br><br>4. tools --&gt; cmake --&gt; Change Project Root<br>选择aosp源码根路径，等解析完毕即可<br></code></pre></td></tr></table></figure><h1 id="打造自己的脱壳系统"><a href="#打造自己的脱壳系统" class="headerlink" title="打造自己的脱壳系统"></a>打造自己的脱壳系统</h1><h3 id="1-FART源码分析"><a href="#1-FART源码分析" class="headerlink" title="1. FART源码分析"></a>1. FART源码分析</h3><h3 id="2-FART迁移至安卓10"><a href="#2-FART迁移至安卓10" class="headerlink" title="2. FART迁移至安卓10"></a>2. FART迁移至安卓10</h3><h3 id="3-Linux-C语言中的open函数"><a href="#3-Linux-C语言中的open函数" class="headerlink" title="3. Linux C语言中的open函数"></a>3. Linux C语言中的open函数</h3><p><a href="https://blog.csdn.net/weixin_39296438/article/details/79422068">https://blog.csdn.net/weixin_39296438/article/details/79422068</a></p><h3 id="4-Linux-C语言判断文件是否存在"><a href="#4-Linux-C语言判断文件是否存在" class="headerlink" title="4. Linux C语言判断文件是否存在"></a>4. Linux C语言判断文件是否存在</h3><p><a href="https://blog.csdn.net/kunkliu/article/details/108294089">https://blog.csdn.net/kunkliu/article/details/108294089</a></p><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h3><p>5.1 改源码时，多加输出和快照，方便排错和快速还原到上一个状态<br>5.2 移植代码时，关注一些安卓特有的类、对象、方法是否改变，比如fdex2的脱壳函数在8.0之后就没有了</p><h2 id="抽取加固介绍"><a href="#抽取加固介绍" class="headerlink" title="抽取加固介绍"></a>抽取加固介绍</h2><h3 id="1-抽取加固本质：提取出dex中方法体的字节码，并在方法运行时还原"><a href="#1-抽取加固本质：提取出dex中方法体的字节码，并在方法运行时还原" class="headerlink" title="1. 抽取加固本质：提取出dex中方法体的字节码，并在方法运行时还原"></a>1. 抽取加固本质：提取出dex中方法体的字节码，并在方法运行时还原</h3><h3 id="2-抽取加固的实现形式"><a href="#2-抽取加固的实现形式" class="headerlink" title="2. 抽取加固的实现形式"></a>2. 抽取加固的实现形式</h3><p>抽空方法体代码，运行方法后回填，运行完后不再抽取 –&gt; 延时保存<br>抽空方法体代码，运行方法后回填，运行完后又抽取 –&gt; FART、youpk主动调用<br>抽空方法体代码，将原有函数体替换为解密代码，运行时解密执行</p><h3 id="3-抽取加固对原有dex的处理形式"><a href="#3-抽取加固对原有dex的处理形式" class="headerlink" title="3. 抽取加固对原有dex的处理形式"></a>3. 抽取加固对原有dex的处理形式</h3><p>原有函数体数据空间置0，保留原有空间<br>对dex文件进行重构，不保留原有空间，在还原数据时，修改CodeItemOffest</p><h2 id="抽取加固解决方案"><a href="#抽取加固解决方案" class="headerlink" title="抽取加固解决方案"></a>抽取加固解决方案</h2><h3 id="1-解决思路：在函数运行时，保存被抽取的数据"><a href="#1-解决思路：在函数运行时，保存被抽取的数据" class="headerlink" title="1. 解决思路：在函数运行时，保存被抽取的数据"></a>1. 解决思路：在函数运行时，保存被抽取的数据</h3><h4 id="fart"><a href="#fart" class="headerlink" title="fart"></a>fart</h4><p>FART的主动调用的深度是在函数的主动执行过程中  这样的深度肯定是不够的 有些壳必须在函数执行了之后，才会还原出真实的函数。FART的主动调用深度。函数真正执行前就已经被直接结束掉了。所以需要更深的主动调用才能够解决这种抽取壳。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">void ArtMethod::Invoke(Thread* self, uint32_t* args, uint32_t args_size, JValue* result,<br>                       const char* shorty) &#123;<br>    //判断传入是self是否为空为空就是fart主动调用组件<br>    <span class="hljs-keyword">if</span> (self== nullptr) &#123;<br>        dumpArtMethod(this);<br>        <span class="hljs-built_in">return</span>;<br>    &#125;<br>      ...<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="youpk"><a href="#youpk" class="headerlink" title="youpk"></a>youpk</h4><p>Youpk更深的主动调用判断如果这个函数的第一个指令是goto，就正常执行，然后执行到invoke-static的指令。这个指令完成之后就直接结束掉函数调用。避免真实函数调用会出现异常。</p><p>参考Youpk的看看他是如何实现更深的主动调用来解决这个问题的。下面是第一步，先修改默认的解释器为Switch的解释器。这是因为Switch解释器的可读性更加高，方便我们直接修改源码来达到目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">static constexpr InterpreterImplKind kInterpreterImplKind = kSwitchImplKind;<br></code></pre></td></tr></table></figure><p>看看主动调用时Youpk是怎么模拟参数的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">void Unpacker::<span class="hljs-function"><span class="hljs-title">invokeAllMethods</span></span>() &#123;<br>          ...<br>      auto methods = klass-&gt;GetDeclaredMethods(pointer_size);<br>      Unpacker::enableFakeInvoke();<br>      <span class="hljs-keyword">for</span> (auto&amp; m : methods) &#123;<br>        ArtMethod* method = &amp;m;<br>        <span class="hljs-keyword">if</span> (!method-&gt;IsProxyMethod() &amp;&amp; method-&gt;IsInvokable()) &#123;<br>          //获取参数个数<br>          uint32_t args_size = (uint32_t)ArtMethod::NumArgRegisters(method-&gt;GetShorty());<br>          <span class="hljs-keyword">if</span> (!method-&gt;IsStatic()) &#123;<br>            args_size += 1;<br>          &#125;<br>          //模拟参数<br>          JValue result;<br>          std::vector&lt;uint32_t&gt; args(args_size, 0);<br>          <span class="hljs-keyword">if</span> (!method-&gt;IsStatic()) &#123;<br>            mirror::Object* thiz = klass-&gt;AllocObject(self);<br>            args[0] = StackReference&lt;mirror::Object&gt;::FromMirrorPtr(thiz).AsVRegValue(); <br>          &#125;<br>          method-&gt;Invoke(self, args.data(), args_size, &amp;result, method-&gt;GetShorty());<br>        &#125;<br>      &#125;<br>      Unpacker::disableFakeInvoke();<br>      cJSON_ReplaceItemInObject(current, <span class="hljs-string">&quot;status&quot;</span>, cJSON_CreateString(<span class="hljs-string">&quot;Dumped&quot;</span>));<br>      writeJson();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到Youpk的参数是模拟赋值进去的。而寒冰大佬的做法不大一样。看看FART的函数调用模拟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">extern <span class="hljs-string">&quot;C&quot;</span> void myfartInvoke(ArtMethod* artmethod)  REQUIRES_SHARED(Locks::mutator_lock_) &#123;<br>    JValue *result=nullptr;<br>    Thread *self=nullptr;<br>    uint32_t temp=6;<br>    uint32_t* args=&amp;temp;<br>    uint32_t args_size=6;<br>    artmethod-&gt;Invoke(self, args, args_size, result, <span class="hljs-string">&quot;fart&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样肯定没法顺利往后执行。我们先继续参考Youpk的后续。<br>然后看看Youpk的ArtMethod::Invoke的处理，如果是主动调用并且非Native函数就正常执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">void ArtMethod::Invoke(Thread* self, uint32_t* args, uint32_t args_size, JValue* result,<br>                       const char* shorty) &#123;<br>  ...<br>  //patch by Youlor<br>  //++++++++++++++++++++++++++++<br>  //如果是主动调用fake invoke并且不是native方法则强制走解释器<br>  <span class="hljs-keyword">if</span> (UNLIKELY(!runtime-&gt;IsStarted() || Dbg::IsForcedInterpreterNeededForCalling(self, this)<br>      || (Unpacker::isFakeInvoke(self, this) &amp;&amp; !this-&gt;IsNative()))) &#123;<br>  //++++++++++++++++++++++++++++<br>    <span class="hljs-keyword">if</span> (IsStatic()) &#123;<br>      art::interpreter::EnterInterpreterFromInvoke(<br>          self, this, nullptr, args, result, /*stay_in_interpreter*/ <span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      mirror::Object* receiver =<br>          reinterpret_cast&lt;StackReference&lt;mirror::Object&gt;*&gt;(&amp;args[0])-&gt;AsMirrorPtr();<br>      art::interpreter::EnterInterpreterFromInvoke(<br>          self, this, receiver, args + 1, result, /*stay_in_interpreter*/ <span class="hljs-literal">true</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    //patch by Youlor<br>    //++++++++++++++++++++++++++++<br>    //如果是主动调用fake invoke并且是native方法则不执行<br>    <span class="hljs-keyword">if</span> (Unpacker::isFakeInvoke(self, this) &amp;&amp; this-&gt;IsNative()) &#123;<br>      // Pop transition.<br>      self-&gt;PopManagedStackFragment(fragment);<br>      <span class="hljs-built_in">return</span>;<br>    &#125;<br>    //++++++++++++++++++++++++++++<br>    ...<br>  &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来看解释器的EnterInterpreterFromInvoke函数处理。这里Youpk没有什么处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">void EnterInterpreterFromInvoke(Thread* self, ArtMethod* method, Object* receiver,<br>                                uint32_t* args, JValue* result,<br>                                bool stay_in_interpreter) &#123;<br>         ...<br>    JValue r = Execute(self, code_item, *shadow_frame, JValue(), stay_in_interpreter);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>看看函数Execute。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bahs">static inline JValue Execute(<br>    Thread* self,<br>    const DexFile::CodeItem* code_item,<br>    ShadowFrame&amp; shadow_frame,<br>    JValue result_register,<br>    bool stay_in_interpreter = false) SHARED_REQUIRES(Locks::mutator_lock_) &#123;<br>      ...<br>    &#125; else if (kInterpreterImplKind == kSwitchImplKind) &#123;<br>      if (transaction_active) &#123;<br>        return ExecuteSwitchImpl&lt;false, true&gt;(self, code_item, shadow_frame, result_register,<br>                                              false);<br>      &#125; else &#123;<br>        return ExecuteSwitchImpl&lt;false, false&gt;(self, code_item, shadow_frame, result_register,<br>                                               false);<br>      &#125;<br>    &#125;<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure><p>然后这ExecuteSwitchImpl就是关键的解释指令的函数了。到这里有Youpk修改的部分了。先看看修改的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">//++++++++++++++++++++++++++++<br><span class="hljs-comment">#define PREAMBLE()                                                                              \</span><br>  <span class="hljs-keyword">do</span> &#123;                                                                                          \<br>    inst_count++;                                                                               \<br>    bool dumped = Unpacker::beforeInstructionExecute(self, shadow_frame.GetMethod(),            \<br>                                                     dex_pc, inst_count);                       \<br>    <span class="hljs-keyword">if</span> (dumped) &#123;                                                                               \<br>      <span class="hljs-built_in">return</span> JValue();                                                                          \<br>    &#125;                                                                                           \<br>    <span class="hljs-keyword">if</span> (UNLIKELY(instrumentation-&gt;HasDexPcListeners())) &#123;                                       \<br>      instrumentation-&gt;DexPcMovedEvent(self, shadow_frame.GetThisObject(code_item-&gt;ins_size_),  \<br>                                       shadow_frame.GetMethod(), dex_pc);                       \<br>    &#125;                                                                                           \<br>  &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">false</span>)<br>//++++++++++++++++++++++++++++<br>//patch by Youlor<br></code></pre></td></tr></table></figure><p>PREAMBLE这个函数基本每个指令执行前都会调用beforeInstructionExecute来判断下。如果这里dump脱壳了，就直接结束掉，这个函数不再往下执行了。如果是上面那种特殊壳，这里就可以暂时先不要dump。让他正常执行先。下面看看里面的逻辑处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">//继续解释执行返回<span class="hljs-literal">false</span>, dump完成返回<span class="hljs-literal">true</span><br>bool Unpacker::beforeInstructionExecute(Thread *self, ArtMethod *method, uint32_t dex_pc, int inst_count) &#123;<br>  <span class="hljs-keyword">if</span> (Unpacker::isFakeInvoke(self, method)) &#123;<br>    const uint16_t* const insns = method-&gt;GetCodeItem()-&gt;insns_;<br>    const Instruction* inst = Instruction::At(insns + dex_pc);<br>    uint16_t inst_data = inst-&gt;Fetch16(0);<br>    Instruction::Code opcode = inst-&gt;Opcode(inst_data);<br> <br>    //对于一般的方法抽取(非ijiami, najia), 直接在第一条指令处dump即可<br>    <span class="hljs-keyword">if</span> (inst_count == 0 &amp;&amp; opcode != Instruction::GOTO &amp;&amp; opcode != Instruction::GOTO_16 &amp;&amp; opcode != Instruction::GOTO_32) &#123;<br>      Unpacker::dumpMethod(method);<br>      <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    //ijiami, najia的特征为: goto: goto_decrypt; nop; ... ; <span class="hljs-built_in">return</span>; const vx, n; invoke-static xxx; goto: goto_origin;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inst_count == 0 &amp;&amp; opcode &gt;= Instruction::GOTO &amp;&amp; opcode &lt;= Instruction::GOTO_32) &#123;<br>      <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inst_count == 1 &amp;&amp; opcode &gt;= Instruction::CONST_4 &amp;&amp; opcode &lt;= Instruction::CONST_WIDE_HIGH16) &#123;<br>      <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inst_count == 2 &amp;&amp; (opcode == Instruction::INVOKE_STATIC || opcode == Instruction::INVOKE_STATIC_RANGE)) &#123;<br>      //让这条指令真正的执行<br>      Unpacker::disableFakeInvoke();<br>      Unpacker::enableRealInvoke();<br>      <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inst_count == 3) &#123;<br>      <span class="hljs-keyword">if</span> (opcode &gt;= Instruction::GOTO &amp;&amp; opcode &lt;= Instruction::GOTO_32) &#123;<br>        //写入时将第一条GOTO用nop填充<br>        const Instruction* inst_first = Instruction::At(insns);<br>        Instruction::Code first_opcode = inst_first-&gt;Opcode(inst-&gt;Fetch16(0));<br>        CHECK(first_opcode &gt;= Instruction::GOTO &amp;&amp; first_opcode &lt;= Instruction::GOTO_32);<br>        ULOGD(<span class="hljs-string">&quot;found najia/ijiami %s&quot;</span>, PrettyMethod(method).c_str());<br>        switch (first_opcode)<br>        &#123;<br>        <span class="hljs-keyword">case</span> Instruction::GOTO:<br>          Unpacker::dumpMethod(method, 2);<br>          <span class="hljs-built_in">break</span>;<br>        <span class="hljs-keyword">case</span> Instruction::GOTO_16:<br>          Unpacker::dumpMethod(method, 4);<br>          <span class="hljs-built_in">break</span>;<br>        <span class="hljs-keyword">case</span> Instruction::GOTO_32:<br>          Unpacker::dumpMethod(method, 8);<br>          <span class="hljs-built_in">break</span>;<br>        default:<br>          <span class="hljs-built_in">break</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        Unpacker::dumpMethod(method);<br>      &#125;<br>      <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    Unpacker::dumpMethod(method);<br>    <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到。如果是INVOKE_STATIC就让指令正常执行。其他正常的抽取壳的深度就是在这里。这相当于就是指令执行前进行dump了。但是这里依然没解决特殊壳的深度问题。必须执行完INVOKE_STATIC之后。再进行脱壳并结束掉函数。继续看Youpk下面的处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash">template&lt;bool do_access_check, bool transaction_active&gt;<br>JValue ExecuteSwitchImpl(Thread* self, const DexFile::CodeItem* code_item,<br>                         ShadowFrame&amp; shadow_frame, JValue result_register,<br>                         bool interpret_one_instruction) &#123;<br>  ...<br>  //patch by Youlor<br>  //++++++++++++++++++++++++++++<br>  int inst_count = -1;<br>  //++++++++++++++++++++++++++++<br>  <span class="hljs-keyword">do</span> &#123;<br>    dex_pc = inst-&gt;GetDexPc(insns);<br>    shadow_frame.SetDexPC(dex_pc);<br>    TraceExecution(shadow_frame, inst, dex_pc);<br>    inst_data = inst-&gt;Fetch16(0);<br>    switch (inst-&gt;Opcode(inst_data)) &#123;<br>      ...<br>      <span class="hljs-keyword">case</span> Instruction::GOTO: &#123;<br>        PREAMBLE();<br>        int8_t offset = inst-&gt;VRegA_10t(inst_data);<br>        BRANCH_INSTRUMENTATION(offset);<br>        <span class="hljs-keyword">if</span> (IsBackwardBranch(offset)) &#123;<br>          HOTNESS_UPDATE();<br>          self-&gt;AllowThreadSuspension();<br>        &#125;<br>        inst = inst-&gt;RelativeAt(offset);<br>        <span class="hljs-built_in">break</span>;<br>      &#125;<br>      ...<br>      <span class="hljs-keyword">case</span> Instruction::INVOKE_STATIC: &#123;<br>        PREAMBLE();<br>        bool success = DoInvoke&lt;kStatic, <span class="hljs-literal">false</span>, do_access_check&gt;(<br>            self, shadow_frame, inst, inst_data, &amp;result_register);<br>        POSSIBLY_HANDLE_PENDING_EXCEPTION(!success, Next_3xx);<br>        <span class="hljs-built_in">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">case</span> Instruction::INVOKE_STATIC_RANGE: &#123;<br>        PREAMBLE();<br>        bool success = DoInvoke&lt;kStatic, <span class="hljs-literal">true</span>, do_access_check&gt;(<br>            self, shadow_frame, inst, inst_data, &amp;result_register);<br>        POSSIBLY_HANDLE_PENDING_EXCEPTION(!success, Next_3xx);<br>        <span class="hljs-built_in">break</span>;<br>      &#125;<br>      ...<br>    &#125;<br>    //patch by Youlor<br>    //++++++++++++++++++++++++++++<br>    bool dumped = Unpacker::afterInstructionExecute(self, shadow_frame.GetMethod(), dex_pc, inst_count);<br>    <span class="hljs-keyword">if</span> (dumped) &#123;<br>      <span class="hljs-built_in">return</span> JValue();<br>    &#125;<br>    //++++++++++++++++++++++++++++<br>  &#125; <span class="hljs-keyword">while</span> (!interpret_one_instruction);<br>  // Record <span class="hljs-built_in">where</span> we stopped.<br>  shadow_frame.SetDexPC(inst-&gt;GetDexPc(insns));<br>  <span class="hljs-built_in">return</span> result_register;<br>&#125;  // NOLINT(readability/fn_size)<br></code></pre></td></tr></table></figure><p>这里就看到每个指令都执行了PREAMBLE函数。然后每个指令执行完都执行了afterInstructionExecute这个函数。在这里就可以判断，如果执行完的指令是INVOKE_STATIC。就可以直接return结束掉函数执行了。看看Youpk的处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">bool Unpacker::afterInstructionExecute(Thread *self, ArtMethod *method, uint32_t dex_pc, int inst_count) &#123;<br>  const uint16_t* const insns = method-&gt;GetCodeItem()-&gt;insns_;<br>  const Instruction* inst = Instruction::At(insns + dex_pc);<br>  uint16_t inst_data = inst-&gt;Fetch16(0);<br>  Instruction::Code opcode = inst-&gt;Opcode(inst_data);<br>  <span class="hljs-keyword">if</span> (inst_count == 2 &amp;&amp; (opcode == Instruction::INVOKE_STATIC || opcode == Instruction::INVOKE_STATIC_RANGE)<br>      &amp;&amp; Unpacker::isRealInvoke(self, method)) &#123;<br>    Unpacker::enableFakeInvoke();<br>    Unpacker::disableRealInvoke();<br>  &#125;<br>  <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里留意了一下。这个函数固定返回的false。但是通过设置enableFakeInvoke和disableRealInvoke来控制下一个指令执行的时候来进行退出函数到这里基本就走完大致的流程了。</p><h4 id="FartExt更深的主动调用"><a href="#FartExt更深的主动调用" class="headerlink" title="FartExt更深的主动调用"></a>FartExt更深的主动调用</h4><p>和Youpk一样。第一步就是先把解释器给改成使用Switch解释器。但是由于我使用的是AOSP10。所以发现修改部分果然不大一样了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#if ART_USE_CXX_INTERPRETER</span><br>static constexpr InterpreterImplKind kInterpreterImplKind = kSwitchImplKind;<br><span class="hljs-comment">#else</span><br>static constexpr InterpreterImplKind kInterpreterImplKind = kMterpImplKind;<br><span class="hljs-comment">#endif</span><br>发现这里变成可以通过编译参数来控制的了。搜索一下ART_USE_CXX_INTERPRETER的使用<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> envTrue(ctx, <span class="hljs-string">&quot;ART_USE_CXX_INTERPRETER&quot;</span>) &#123;<br>        cflags = append(cflags, <span class="hljs-string">&quot;-DART_USE_CXX_INTERPRETER=1&quot;</span>)<br>    &#125;<br></code></pre></td></tr></table></figure><p>发现这个好像可以通过cflags来配置了。所以我修改了下runtime下的Android.pb。如果不想改全局的。也可以在源码里面直接判断是主动调用就强制走switch解释器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">cflags: [<br>    // ART is allowed to <span class="hljs-built_in">link</span> to libicuuc directly<br>    // since they are <span class="hljs-keyword">in</span> the same module<br>    <span class="hljs-string">&quot;-DANDROID_LINK_SHARED_ICU4C&quot;</span>,<br>    <span class="hljs-string">&quot;-Wno-error&quot;</span>,<br>    <span class="hljs-string">&quot;-DART_USE_CXX_INTERPRETER=1&quot;</span><br>],<br></code></pre></td></tr></table></figure><p>接着就是ArtMethod::Invoke的时候不要直接结束了。但是这里我们需要留意的是。第一个参数的Thread是fart用来判断是否为主动调用的。为了让后面能正常执行，我就直接把第一个参数给赋值了。而后面的调用流程也是需要判断当前执行函数是否为主动调用。Youpk是用线程和一个变量来控制判断是否为主动调用的。这里使用result&#x3D;111111在后续判断是否为主动调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">extern <span class="hljs-string">&quot;C&quot;</span> void fartextInvoke(ArtMethod* artmethod)  REQUIRES_SHARED(Locks::mutator_lock_) &#123;<br>    <span class="hljs-keyword">if</span>(artmethod-&gt;IsNative()||artmethod-&gt;IsAbstract())&#123;<br>        <span class="hljs-built_in">return</span>;<br>    &#125;<br>    JValue result;<br>  //模拟参数<br>    Thread *self=Thread::Current();<br>    uint32_t temp[100]=&#123;0&#125;;<br>    uint32_t* args=temp;<br>    uint32_t args_size = (uint32_t)ArtMethod::NumArgRegisters(artmethod-&gt;GetShorty());<br>    <span class="hljs-keyword">if</span> (!artmethod-&gt;IsStatic()) &#123;<br>      args_size += 1;<br>    &#125;<br>  //靠这个值，在后续来判断当前函数是否为主动调用。<br>    result.SetI(111111);<br>    LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;fartext fartextInvoke&quot;</span>;<br>    Unpacker_self_=self;<br>    artmethod-&gt;Invoke(self, args, args_size, &amp;result,artmethod-&gt;GetShorty());<br>&#125;<br> <br>void ArtMethod::Invoke(Thread* self, uint32_t* args, uint32_t args_size, JValue* result,<br>                       const char* shorty) &#123;<br>  ...<br>  //add<br>  <span class="hljs-keyword">if</span> (result!=nullptr &amp;&amp; result-&gt;GetI()==111111)&#123;<br>      LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;fartext artMethod::Invoke Method &quot;</span>&lt;&lt;<span class="hljs-string">this-&gt;PrettyMethod().c_str();</span><br><span class="hljs-string">      if (IsStatic()) &#123;</span><br><span class="hljs-string">        art::interpreter::EnterInterpreterFromInvoke(</span><br><span class="hljs-string">                        self, this</span>, nullptr, args, result, /*stay_in_interpreter=*/ <span class="hljs-literal">true</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        //注意这里是把非静态的也当静态的方式处理的。避免使用引用类型参数。<br>        art::interpreter::EnterInterpreterFromInvoke(<br>                  self, this, nullptr, args + 1, result, /*stay_in_interpreter=*/ <span class="hljs-literal">true</span>);<br>      &#125;<br>        LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;fartext artMethod::Invoke Method Over &quot;</span>&lt;&lt;<span class="hljs-string">this-&gt;PrettyMethod().c_str();</span><br><span class="hljs-string">      self-&gt;PopManagedStackFragment(fragment);</span><br><span class="hljs-string">      return;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  //add end</span><br><span class="hljs-string">  ...</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>这里有个问题是上面这种模拟参数的方式，碰到引用类型的参数会报错。所以在处理参数入栈的时候，也要进行判断处理一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs bash">void EnterInterpreterFromInvoke(Thread* self,<br>                                ArtMethod* method,<br>                                ObjPtr&lt;mirror::Object&gt; receiver,<br>                                uint32_t* args,<br>                                JValue* result,<br>                                bool stay_in_interpreter) &#123;<br>  ...<br>  <span class="hljs-keyword">if</span> (!method-&gt;IsStatic()) &#123;<br>    //add  避免使用引用类型的参数<br>    <span class="hljs-keyword">if</span>(result!=nullptr&amp;&amp;result-&gt;GetI()==111111)&#123;<br>        shadow_frame-&gt;SetVReg(cur_reg, args[0]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        CHECK(receiver != nullptr);<br>        shadow_frame-&gt;SetVRegReference(cur_reg, receiver);<br>    &#125;<br>    //add end<br>    //shadow_frame-&gt;SetVRegReference(cur_reg, receiver);<br>    ++cur_reg;<br>  &#125;<br>  uint32_t shorty_len = 0;<br>  const char* shorty = method-&gt;GetShorty(&amp;shorty_len);<br>  <span class="hljs-keyword">for</span> (size_t shorty_pos = 0, arg_pos = 0; cur_reg &lt; num_regs; ++shorty_pos, ++arg_pos, cur_reg++) &#123;<br>    DCHECK_LT(shorty_pos + 1, shorty_len);<br>    switch (shorty[shorty_pos + 1]) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>: &#123;<br>        //add  避免使用引用类型的参数<br>        <span class="hljs-keyword">if</span>(result!=nullptr&amp;&amp;result-&gt;GetI()==111111)&#123;<br>            shadow_frame-&gt;SetVReg(cur_reg, args[0]);<br>            <span class="hljs-built_in">break</span>;<br>        &#125;<br>        //add end<br>        ObjPtr&lt;mirror::Object&gt; o =<br>            reinterpret_cast&lt;StackReference&lt;mirror::Object&gt;*&gt;(&amp;args[arg_pos])-&gt;AsMirrorPtr();<br>        shadow_frame-&gt;SetVRegReference(cur_reg, o);<br>        <span class="hljs-built_in">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>: &#123;<br>        uint64_t wide_value = (static_cast&lt;uint64_t&gt;(args[arg_pos + 1]) &lt;&lt; <span class="hljs-string">32) | args[arg_pos];</span><br><span class="hljs-string">        shadow_frame-&gt;SetVRegLong(cur_reg, wide_value);</span><br><span class="hljs-string">        cur_reg++;</span><br><span class="hljs-string">        arg_pos++;</span><br><span class="hljs-string">        break;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      default:</span><br><span class="hljs-string">        shadow_frame-&gt;SetVReg(cur_reg, args[arg_pos]);</span><br><span class="hljs-string">        break;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  ...</span><br><span class="hljs-string">  if (LIKELY(!method-&gt;IsNative())) &#123;</span><br><span class="hljs-string">    //这里把我们主动调用函数的标志继续往后面传递</span><br><span class="hljs-string">    if(result!=nullptr&amp;&amp;result-&gt;GetI()==111111)&#123;</span><br><span class="hljs-string">        JValue r = Execute(self, accessor, *shadow_frame, *result, stay_in_interpreter);</span><br><span class="hljs-string">        if (result != nullptr) &#123;</span><br><span class="hljs-string">          *result = r;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">          return;</span><br><span class="hljs-string">    &#125;else&#123;</span><br><span class="hljs-string">        JValue r = Execute(self, accessor, *shadow_frame, JValue(), stay_in_interpreter);</span><br><span class="hljs-string">        if (result != nullptr) &#123;</span><br><span class="hljs-string">          *result = r;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  ...</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>接下来就开始修改解释器部分的逻辑了。我们只要做到几点处理。就可以搞定这种壳了。<br>1、如果是主动调用并且第一个指令如果不是GOTO的。就直接脱壳并结束<br>2、如果是主动调用并且第一个指令是GOTO的。让他继续执行<br>3、如果第三个指令是INVOKE-STATIC的执行完后直接结束掉</p><p>接下来准备改代码。然后碰到一个问题。同样也是AOSP10的版本导致的。Switch解释器的逻辑发生了较大的变动。先看看变成了啥样子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash">template&lt;bool do_access_check, bool transaction_active&gt;<br>ATTRIBUTE_NO_SANITIZE_ADDRESS void ExecuteSwitchImplCpp(SwitchImplContext* ctx) &#123;<br>  ...<br>  bool const interpret_one_instruction = ctx-&gt;interpret_one_instruction;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    dex_pc = inst-&gt;GetDexPc(insns);<br>    shadow_frame.SetDexPC(dex_pc);<br>    TraceExecution(shadow_frame, inst, dex_pc);<br>    inst_data = inst-&gt;Fetch16(0);<br>    &#123;<br>      bool exit_loop = <span class="hljs-literal">false</span>;<br>      InstructionHandler&lt;do_access_check, transaction_active&gt; handler(<br>          ctx, instrumentation, self, shadow_frame, dex_pc, inst, inst_data, exit_loop);<br>      //PREAMBLE变成这种方式调用了<br>      <span class="hljs-keyword">if</span> (!handler.Preamble()) &#123;<br>        <span class="hljs-keyword">if</span> (UNLIKELY(exit_loop)) &#123;<br>          <span class="hljs-built_in">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (UNLIKELY(interpret_one_instruction)) &#123;<br>          <span class="hljs-built_in">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">continue</span>;<br>      &#125;<br>    &#125;<br>    switch (inst-&gt;Opcode(inst_data)) &#123;<br><span class="hljs-comment">#define OPCODE_CASE(OPCODE, OPCODE_NAME, pname, f, i, a, e, v)                                    \</span><br>      <span class="hljs-keyword">case</span> OPCODE: &#123;                                                                              \<br>        bool exit_loop = <span class="hljs-literal">false</span>;                                                                   \<br>        InstructionHandler&lt;do_access_check, transaction_active&gt; handler(                          \<br>            ctx, instrumentation, self, shadow_frame, dex_pc, inst, inst_data, exit_loop);        \<br>        handler.OPCODE_NAME();                                                                    \<br>        /* TODO: Advance <span class="hljs-string">&#x27;inst&#x27;</span> here, instead of explicitly <span class="hljs-keyword">in</span> each handler */                    \<br>        <span class="hljs-keyword">if</span> (UNLIKELY(exit_loop)) &#123;                                                                \<br>          <span class="hljs-built_in">return</span>;                                                                                 \<br>        &#125;                                                                                         \<br>        <span class="hljs-built_in">break</span>;                                                                                    \<br>      &#125;<br>DEX_INSTRUCTION_LIST(OPCODE_CASE)<br><span class="hljs-comment">#undef OPCODE_CASE</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (UNLIKELY(interpret_one_instruction)) &#123;<br>      <span class="hljs-built_in">break</span>;<br>    &#125;<br>  &#125;<br>  // Record <span class="hljs-built_in">where</span> we stopped.<br>  shadow_frame.SetDexPC(inst-&gt;GetDexPc(insns));<br>  ctx-&gt;result = ctx-&gt;result_register;<br>  <span class="hljs-built_in">return</span>;<br>&#125;  // NOLINT(readability/fn_size)<br></code></pre></td></tr></table></figure><p>看到了这两个部分都发生了较大的变化。那个超大的case都不见了。不过也只是处理的方式发生变化。我们跟着调整下就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs bash">template&lt;bool do_access_check, bool transaction_active&gt;<br>ATTRIBUTE_NO_SANITIZE_ADDRESS void ExecuteSwitchImplCpp(SwitchImplContext* ctx) &#123;<br>  ...<br>  //add<br>  int32_t regvalue=ctx-&gt;result_register.GetI();<br>  //这里很重要。需要把我们用来作为主动调用的值给改了。不然调用另外一个函数也会当成fart的主动调用的。<br>  ctx-&gt;result_register=JValue();<br>  int inst_count = -1;            //当前第几个指令<br>  bool flag=<span class="hljs-literal">false</span>;                    //第一个指令是否为goto<br>  //add end<br>  bool const interpret_one_instruction = ctx-&gt;interpret_one_instruction;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    ...<br>    //add<br>    inst_count++;<br>    uint8_t opcode = inst-&gt;Opcode(inst_data)<br>    //如果是主动调用<br>    <span class="hljs-keyword">if</span>(regvalue==111111)&#123;<br>          //第一个指令是goto的处理<br>        <span class="hljs-keyword">if</span>(inst_count == 0 )&#123;<br>            <span class="hljs-keyword">if</span>(opcode == Instruction::GOTO || opcode == Instruction::GOTO_16 || opcode == Instruction::GOTO_32)&#123;<br>                LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;fartext ExecuteSwitchImplCpp Switch inst_count=0 opcode==GOTO &quot;</span>&lt;&lt;<span class="hljs-string">shadow_frame.GetMethod()-&gt;PrettyMethod().c_str();</span><br><span class="hljs-string">                flag=true;</span><br><span class="hljs-string">            &#125;else&#123;</span><br><span class="hljs-string">                LOG(ERROR) &lt;&lt; &quot;fartext ExecuteSwitchImplCpp Switch inst_count=0 opcode!=GOTO &quot;&lt;&lt;shadow_frame</span>.GetMethod()-&gt;PrettyMethod().c_str();<br>                dumpArtMethod(shadow_frame.GetMethod());<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br>        &#125;<br>          //第二个指令是const的处理<br>        <span class="hljs-keyword">if</span>(inst_count == 1)&#123;<br>            <span class="hljs-keyword">if</span>(opcode &gt;= Instruction::CONST_4 &amp;&amp; opcode &lt;= Instruction::CONST_WIDE_HIGH16)&#123;<br>                LOG(ERROR) &lt;&lt; <span class="hljs-string">&quot;fartext ExecuteSwitchImplCpp Switch inst_count=1 opcode==CONST &quot;</span>&lt;&lt;<span class="hljs-string">shadow_frame.GetMethod()-&gt;PrettyMethod().c_str();</span><br><span class="hljs-string">                flag=true;</span><br><span class="hljs-string">            &#125;else&#123;</span><br><span class="hljs-string">                LOG(ERROR) &lt;&lt; &quot;fartext ExecuteSwitchImplCpp Switch inst_count=1 opcode!=CONST &quot;&lt;&lt;shadow_frame</span>.GetMethod()-&gt;PrettyMethod().c_str();<br>                dumpArtMethod(shadow_frame.GetMethod());<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    //add end<br>    switch (opcode) &#123;<br><span class="hljs-comment">#define OPCODE_CASE(OPCODE, OPCODE_NAME, pname, f, i, a, e, v)                                    \</span><br>      <span class="hljs-keyword">case</span> OPCODE: &#123;                                                                              \<br>        bool exit_loop = <span class="hljs-literal">false</span>;                                                                   \<br>        InstructionHandler&lt;do_access_check, transaction_active&gt; handler(                          \<br>            ctx, instrumentation, self, shadow_frame, dex_pc, inst, inst_data, exit_loop);        \<br>        handler.OPCODE_NAME();                                                                    \<br>        /* TODO: Advance <span class="hljs-string">&#x27;inst&#x27;</span> here, instead of explicitly <span class="hljs-keyword">in</span> each handler */                    \<br>        <span class="hljs-keyword">if</span> (UNLIKELY(exit_loop)) &#123;                                                                \<br>          <span class="hljs-built_in">return</span>;                                                                                 \<br>        &#125;                                                                                         \<br>        <span class="hljs-built_in">break</span>;                                                                                    \<br>      &#125;<br>DEX_INSTRUCTION_LIST(OPCODE_CASE)<br><span class="hljs-comment">#undef OPCODE_CASE</span><br>    &#125;<br>    //add<br>      //指令执行结束后，再判断一下是不是主动调用的<br>    <span class="hljs-keyword">if</span>(regvalue==111111)&#123;<br>          //如果这是第3个指令<br>        <span class="hljs-keyword">if</span>(inst_count==2&amp;&amp;flag)&#123;<br>              //如果是下面两种操作码，就可以脱壳并结束了。<br>            <span class="hljs-keyword">if</span>(opcode == Instruction::INVOKE_STATIC || opcode == Instruction::INVOKE_STATIC_RANGE)&#123;<br>                dumpArtMethod(shadow_frame.GetMethod());<br>                  ArtMethod::disableFartextInvoke();<br>                <span class="hljs-built_in">break</span>;<br>            &#125;<br>        &#125;<br>          //如果主动调用的情况还能执行到第4个指令。那就直接脱壳并结束掉。<br>          <span class="hljs-keyword">if</span>(inst_count&gt;2)&#123;<br>            dumpArtMethod(shadow_frame.GetMethod());<br>              ArtMethod::disableFartextInvoke();<br>            <span class="hljs-built_in">break</span>;<br>        &#125;<br>    &#125;<br>    //add end<br>    <span class="hljs-keyword">if</span> (UNLIKELY(interpret_one_instruction)) &#123;<br>      <span class="hljs-built_in">break</span>;<br>    &#125;<br>  &#125;<br>  // Record <span class="hljs-built_in">where</span> we stopped.<br>  shadow_frame.SetDexPC(inst-&gt;GetDexPc(insns));<br>  ctx-&gt;result = ctx-&gt;result_register;<br>  <span class="hljs-built_in">return</span>;<br>&#125;  // NOLINT(readability/fn_size)<br><br></code></pre></td></tr></table></figure><h3 id="2-被动调用"><a href="#2-被动调用" class="headerlink" title="2. 被动调用"></a>2. 被动调用</h3><p>app正常运行过程中所发生的函数调用<br>只对dex中部分的类完成加载，只对dex中的部分函数完成调用<br>调用函数不全，导致能够恢复的函数有限</p><h3 id="3-主动调用"><a href="#3-主动调用" class="headerlink" title="3. 主动调用"></a>3. 主动调用</h3><p>构造虚拟调用，对app中所有函数完成调用<br>在这些函数执行时，保存函数体CodeItem数据<br>保存数据的时机越晚，效果越好</p><h3 id="4-常见的抽取加固脱壳系统"><a href="#4-常见的抽取加固脱壳系统" class="headerlink" title="4. 常见的抽取加固脱壳系统"></a>4. 常见的抽取加固脱壳系统</h3><p>DexHunter、Fupk3、FART、youpk . fartExt</p><h2 id="类加载器和双亲委派机制"><a href="#类加载器和双亲委派机制" class="headerlink" title="类加载器和双亲委派机制"></a>类加载器和双亲委派机制</h2><h3 id="双亲委派机制的工作原理是-："><a href="#双亲委派机制的工作原理是-：" class="headerlink" title="双亲委派机制的工作原理是 ："></a>双亲委派机制的工作原理是 ：</h3><p> 一个类加开始加载他会把这个请求委托给父类的加载器去执行 如果父类加载器还存在其他父类加载器就会进一步向上委托如果父类可以完成加载 就返回成功若是无法加载则会委托给子类子类再去加载 加载之后的类不会被重复加载 也就是说系统类加载只会交给最上层的类加载器会相对安全。</p><h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><p>分为隐式加载和显式加载 </p><h4 id="隐式-："><a href="#隐式-：" class="headerlink" title="隐式 ："></a>隐式 ：</h4><p> 创建类的实例 new  访问类的静态遍历 或者未静态变量赋值<br>调用类的静态方法<br>使用反射来强制创建某个类的接口对应的Java.lang.class对象<br>初始化某个类的子类 </p><h4 id="显示-："><a href="#显示-：" class="headerlink" title="显示 ："></a>显示 ：</h4><p>使用loadclass（）<br>使用Class.forname（）</p><h4 id="类加载的过程-："><a href="#类加载的过程-：" class="headerlink" title="类加载的过程 ："></a>类加载的过程 ：</h4><p>装载 ： 查找和导入class文件<br>链接 ： 其中解析不走是可以选择的<br>    检查 ： 检查载入的class文件数据的正确性<br>    准备 ： 给类的静态变量分内存空间<br>    解析 ： 江符号引用转成直接引用<br>初始化 ： 调用<clinit>函数 对静态变量静态代码块执行初始化工作</clinit></p><h3 id="Android系统中的ClassLoader"><a href="#Android系统中的ClassLoader" class="headerlink" title="Android系统中的ClassLoader:"></a>Android系统中的ClassLoader:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">ClassLoader为抽象类;<br>BootClassLoader预加载常用类，单例模式。与Java中的BootClassLoader不同，它并不是由C/C++代码实现，而是由Java实现的;<br>BaseDexClassLoader是PathClassLoader、DexClassLoader、 InMemoryDexClassLoader的父类， 类加载的主要逻辑都是在BaseDexClassLoader完成的。<br>SecureClassLoader继承了抽象类ClassLoader,拓展了ClassLoader类加入了权限方面的功能，加强了安全性，其子类URLClassLoader是用URL路径从jar文件中加载类和资源。<br>其中重点关注的是PathClassLoader和DexClassLoader.<br>PathClassLoader是Androi d默认使用的类加载器，- 个apk中 的Activity等类便是在其中加载。<br>DexClassLoader可以加载任意目录下的dex/ jar/apk/zip文件，比PathClassLoader更灵活， 是实现插件化、热修复以及dex加壳的重点。<br>Android8. 0新引入InMemoryDexClassLoader,从名字便可看出是用于直接从内存中加载dex。<br><br>basedexclassloader 可以拿到 子类的所有类 <br>拿到的是通过对dex解析拿到的所有类<br><br>双亲委派 <br>                             classloader <br>bootclassloader     basedexclassloader  secureclassloader<br>                     urlclassloader<br><br>inmemorydexclassloader  pathclassloader dexclassloader  <br><br>安卓四大组件一般是在pathclassloader中进行加载注册的 <br>如果在dexclassloader中去加载dex去进行调用startactivity会出现找不到类的情况如何在dexclassloader中加载的组件类有正常的生命周期<br><br>app运行中classloader的参与流程<br><br>bootclassloader加载系统核心库<br>pathclasslocader加载app自身dex<br>进入app自身组件开始执行<br>调用声明application的attachbasecontext<br>调用声明的application的oncreate<br><br><br>有多种解决发方案解决方案 <br>替换系统组件类加载器为我们的dexclassloadeer 设置dexclassloader的parent为系统组件类加载器<br><br>打破原有的双亲关系 在系统组件类加载器和bootclassloader的中间插入我们自己的dexclassloader即可<br><br>将自己的classloader和系统的elements数组进行合并把自己的类加载写入到pathclassloader<br></code></pre></td></tr></table></figure><h4 id="dex加固"><a href="#dex加固" class="headerlink" title="dex加固"></a>dex加固</h4><p>1.dex整体加固 文件加载和内存加载<br>2.函数抽取： 在函数粒度完成代码的保护<br>3.vmp 和 dex2c ： java函数nativie化  或者vmp和函数抽取相结合</p><h4 id="so加固的种类"><a href="#so加固的种类" class="headerlink" title="so加固的种类"></a>so加固的种类</h4><p>1.基于init，init——array以及jni_onload函数的加壳<br>2.基于自定义linker的加壳</p><h4 id="vmp虚拟化保护-虚拟机保护"><a href="#vmp虚拟化保护-虚拟机保护" class="headerlink" title="vmp虚拟化保护(虚拟机保护)"></a>vmp虚拟化保护(虚拟机保护)</h4><p>加固厂商完全可以参考aosp源码里解释器的源码进行修改学习 修改smali指令的操作码 或者还是使用原来的codeitem在自己实现的解释器里执行<br>对每一条指令进行映射</p><p>一般是所有被vmp保护的函数都使用一个解释器对于相同类型的函数变成相同类型的jni函数映射到相同的地址 他们有相同的修饰符相同的返回值 直接全部映射到相同的地址 对于不同的函数使用不同的 codeitem 开源的例子（ADVMP）<br>被vmp保护的oncreate函数共享一个解释器绑定在了一个相同的地址</p><p>dex2c将smali指令进行等价的jni代码进行转换 转换成jni代码在使用ollvm进行混淆 效果也满强的<br>获取到保护的dex后和vmp一样被保护的函数的属性由java转变为nativie如开源的dcc（dex-to-c cmopiler）</p><h4 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h4><p>那到dex_file 就可以拿到dex_bigen 和 dex_base 就可以完成dex的写出 也就是脱壳 </p><p>从加壳的角度来讲ClassLinker::LoadMethod函数执行之后进行hook就可以得到初始化完成以后art对象codeitem的一个偏移在结合dex_file的起始地址就可以得到现在正在初始化的函数的指令部分 这个时候进行一些修改就可以解决函数抽取壳</p><h3 id="dex2oat编译流程-：-函数粒度进行编译"><a href="#dex2oat编译流程-：-函数粒度进行编译" class="headerlink" title="dex2oat编译流程 ： 函数粒度进行编译"></a>dex2oat编译流程 ： 函数粒度进行编译</h3><p>并不是所有的函数都会被编译 比如类初始化函数<clinit> 因此对于当一个类被初始化时 该类的初始化函数始终运行在interpreter模式 </clinit></p><h4 id="art下函数执行模式"><a href="#art下函数执行模式" class="headerlink" title="art下函数执行模式"></a>art下函数执行模式</h4><p>interpreter 由 art下的解释器解释执行<br>quick模式 直接运行dex2oat编译生成的arm指令</p><p>interpreter模式流程<br>从artmethod类中的enterinterpreterforminvoke开始分析 execute-&gt;executemterplmpl或者executeswitchimpl可以看到对于任何一个运行在interpreter模式的java函数来说<br>最终都会进入到art下的解释器中进行解释执行</p><h3 id="fart实现的三个功能"><a href="#fart实现的三个功能" class="headerlink" title="fart实现的三个功能"></a>fart实现的三个功能</h3><h4 id="一，构造主动调用链让每一个函数都主动调用-但是不影响app的正常运行"><a href="#一，构造主动调用链让每一个函数都主动调用-但是不影响app的正常运行" class="headerlink" title="一，构造主动调用链让每一个函数都主动调用 但是不影响app的正常运行"></a>一，构造主动调用链让每一个函数都主动调用 但是不影响app的正常运行</h4><p>jni调用java函数标准流程<br>1.得到jclass                           findclass的原理是通过class_linker的findclass获取目标类<br>2.获取jmethodid<br>3.通过call函数调用                      jni中call系列函数最终都会进入到art_method中的invoke<br>解决方案把jmethod转成artmethod 通过自行构建的参数传入art_method中的invoke函数进行主动调用在对传入的参数进行判断 是自行传入的保存下来codeitem的起始地址 然后结束函数 </p><h4 id="二，-根据artmethod对象定位内存中codeitem的起始地址"><a href="#二，-根据artmethod对象定位内存中codeitem的起始地址" class="headerlink" title="二， 根据artmethod对象定位内存中codeitem的起始地址"></a>二， 根据artmethod对象定位内存中codeitem的起始地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash">const DexFile::CodeItem * code_item =<br>    artmethod-&gt;GetCodeItem();<br><span class="hljs-keyword">if</span> (LIKELY(code_item != nullptr)) &#123;<br>int code_item_len = 0;<br>uint8_t *item = (uint8_t *) code_item;<br>                //有try <br><span class="hljs-keyword">if</span> (code_item-&gt;tries_size_ &gt; 0) &#123;<br>const uint8_t *handler_data =<br>    (const uint8_t *) (DexFile::<br>       GetTryItems<br>       (*code_item,<br>code_item-&gt;<br>tries_size_));<br>uint8_t *<span class="hljs-built_in">tail</span> =<br>    codeitem_end(&amp;handler_data);<br>code_item_len =<br>    (int) (<span class="hljs-built_in">tail</span> - item);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>                    //没try<br>code_item_len =<br>    16 +<br>    code_item-&gt;<br>    insns_size_in_code_units_ * 2;<br>&#125;<br>memset(dexfilepath, 0, 2000);<br>int size_int = (int) dex_file-&gt;Size();// Length of data<br>uint32_t method_idx =<br>    artmethod-&gt;get_method_idx();<br>sprintf(dexfilepath,<br><span class="hljs-string">&quot;/sdcard/fart/%s/%d_%ld.bin&quot;</span>,<br>szProcName, size_int, gettidv1());<br>int fp2 =<br>    open(dexfilepath,<br> O_CREAT | O_APPEND | O_RDWR,<br> 0666);<br><span class="hljs-keyword">if</span> (fp2 &gt; 0) &#123;<br>lseek(fp2, 0, SEEK_END);<br>memset(dexfilepath, 0, 2000);<br>int offset = (int) (item - begin_);<br>sprintf(dexfilepath,<br><span class="hljs-string">&quot;&#123;name:%s,method_idx:%d,offset:%d,code_item_len:%d,ins:&quot;</span>,<br>methodname, method_idx,<br>offset, code_item_len);<br>int contentlength = 0;<br><span class="hljs-keyword">while</span> (dexfilepath[contentlength]<br>       != 0)<br>contentlength++;<br>write(fp2, (void *) dexfilepath,<br>      contentlength);<br>long outlen = 0;<br>char *base64result =<br>    base64_encode((char *) item,<br>  (long)<br>  code_item_len,<br>  &amp;outlen);<br>write(fp2, base64result, outlen);<br>write(fp2, <span class="hljs-string">&quot;&#125;;&quot;</span>, 2);<br>fsync(fp2);<br>close(fp2);<br><span class="hljs-keyword">if</span> (base64result != nullptr) &#123;<br>free(base64result);<br>base64result = nullptr;<br>&#125;<br>&#125;<br><br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三，遍历dex中的所有函数并完成主动调用"><a href="#三，遍历dex中的所有函数并完成主动调用" class="headerlink" title="三，遍历dex中的所有函数并完成主动调用"></a>三，遍历dex中的所有函数并完成主动调用</h4><p>1，手动解析dex文件<br>2.调用getclassnamelist获取所有类名(需要获取classloader当中的mcookie对象)</p><h2 id="打造自己的脱壳系统-1"><a href="#打造自己的脱壳系统-1" class="headerlink" title="打造自己的脱壳系统"></a>打造自己的脱壳系统</h2><h4 id="1-将FART迁移到安卓10"><a href="#1-将FART迁移到安卓10" class="headerlink" title="1. 将FART迁移到安卓10"></a>1. 将FART迁移到安卓10</h4><h4 id="2-dex重构"><a href="#2-dex重构" class="headerlink" title="2. dex重构"></a>2. dex重构</h4><h4 id="3-FART存在的问题"><a href="#3-FART存在的问题" class="headerlink" title="3. FART存在的问题"></a>3. FART存在的问题</h4><p>3.1 调用链深度不够，有些壳将原有函数体替换为解密代码，运行时才解密执行<br>3.2 有些壳设置一些垃圾类，当该类被初始化时自动退出<br>3.3 有些壳设置一些垃圾类，实时检测这些类是否加载<br>3.4 动态加载的dex文件，如果没有修正ClassLoader，不会出现在双亲委派关系中，也不会被FART遍历到<br>3.5 需要手动修复codeitem</p><h4 id="4-FART改进方案"><a href="#4-FART改进方案" class="headerlink" title="4. FART改进方案"></a>4. FART改进方案</h4><p>4.1 学习youpk的调用链深度<br>4.2 不进行类的初始化，或者不主动调用该类<br>4.3 设置配置文件，类似白名单，对指定类进行主动调用，或者避开指定类的调用<br>    利用Frida主动调用FART的函数，对指定类进行脱壳<br>4.4 利用Frida枚举所有ClassLoader，再主动调用FART的函数进行脱壳<br>Exexute脱壳点对于动态加载的dex也可以脱，除非这个dex没有类的初始化函数<br>4.5每个dex文件保存时，将这个dex的地址以及长度给保存下来。最后在所有主动调用完成时，重新将所有dex文件再保存一次</p><h1 id="代码追踪"><a href="#代码追踪" class="headerlink" title="代码追踪"></a>代码追踪</h1><h2 id="1-追踪Java函数调用关系"><a href="#1-追踪Java函数调用关系" class="headerlink" title="1. 追踪Java函数调用关系"></a>1. 追踪Java函数调用关系</h2><p>所在文件：art&#x2F;runtime&#x2F;common_dex_operations.h  PerformCall函数 的起始位置插入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">// add<br>// <span class="hljs-built_in">caller</span> -&gt; callee<br>ArtMethod* callee = callee_frame-&gt;GetMethod();<br>std::ostringstream oss;<br>oss &lt;&lt; <span class="hljs-string">&quot;[PerformCall] &quot;</span> &lt;&lt; <span class="hljs-string">caller_method-&gt;PrettyMethod() &lt;&lt; &quot; --&gt; &quot; &lt;&lt; callee-&gt;PrettyMethod();</span><br><span class="hljs-string">if(strstr(oss.str().c_str(),&quot;PerformCallBefore&quot;))&#123;</span><br><span class="hljs-string">    LOG(ERROR) &lt;&lt; oss.str();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">// add</span><br></code></pre></td></tr></table></figure><h2 id="2-追踪jni函数调用关系"><a href="#2-追踪jni函数调用关系" class="headerlink" title="2. 追踪jni函数调用关系"></a>2. 追踪jni函数调用关系</h2><p>所在文件：art&#x2F;runtime&#x2F;reflection.cc  InvokeWithArgArray函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">// add<br>//在函数的倒数第二行插入<br>ArtMethod* artMethod = nullptr;<br>Thread* self = Thread::Current();<br>const ManagedStack* managedStack = self-&gt;GetManagedStack();<br><span class="hljs-keyword">if</span>(managedStack != nullptr) &#123;<br>    ArtMethod** tmpArtMethod = managedStack-&gt;GetTopQuickFrame();<br>    <span class="hljs-keyword">if</span>(tmpArtMethod != nullptr) &#123;<br>        artMethod = *tmpArtMethod;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(artMethod != nullptr) &#123;<br>    std::ostringstream oss;<br>    oss &lt;&lt; <span class="hljs-string">&quot;[InvokeWithArgArray before] &quot;</span> &lt;&lt; <span class="hljs-string">artMethod-&gt;PrettyMethod() &lt;&lt; &quot; --&gt; &quot;&lt;&lt; method-&gt;PrettyMethod();</span><br><span class="hljs-string">    if(strstr(oss.str().c_str(),&quot;InvokeWithArgArrayBefore&quot;))&#123;</span><br><span class="hljs-string">        LOG(ERROR) &lt;&lt; oss.str();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">// add</span><br></code></pre></td></tr></table></figure><h2 id="3-强制运行在解释模式下"><a href="#3-强制运行在解释模式下" class="headerlink" title="3. 强制运行在解释模式下"></a>3. 强制运行在解释模式下</h2><p>3.1 所在文件：art&#x2F;runtime&#x2F;interpreter&#x2F;interpreter.cc  增加函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">// add<br>extern <span class="hljs-string">&quot;C&quot;</span> void <span class="hljs-function"><span class="hljs-title">forceInterpret</span></span>()&#123;<br>    Runtime* runtime = Runtime::Current();<br>    runtime-&gt;GetInstrumentation()-&gt;ForceInterpretOnly();<br>    LOG(WARNING) &lt;&lt; <span class="hljs-string">&quot;forceInterpret is called&quot;</span>;<br>&#125;<br>// add<br></code></pre></td></tr></table></figure><p>3.2 将解释器改为switch</p><h2 id="4-追踪每一条smali指令"><a href="#4-追踪每一条smali指令" class="headerlink" title="4. 追踪每一条smali指令"></a>4. 追踪每一条smali指令</h2><p>所在文件：art&#x2F;runtime&#x2F;interpreter&#x2F;interpreter_switch_impl-inl.h  增加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">// add<br>//插入在 ctx-&gt; interpret_one_instaruection;<br>bool shouldTrace = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(strstr(shadow_frame.GetMethod()-&gt;PrettyMethod().c_str(), <span class="hljs-string">&quot;ExecuteSwitchImplCppBefore&quot;</span>)) &#123;<br>    shouldTrace = <span class="hljs-literal">true</span>;<br>&#125;<br>// add<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">// add  插入在shadow_frame.setdexpc（dex_pc）<br>// TraceExecution(shadow_frame, inst, dex_pc);<br><br><span class="hljs-keyword">if</span> (shouldTrace) &#123;<br>    myTraceExecution(shadow_frame, inst, dex_pc);<br>&#125;<br>// add<br></code></pre></td></tr></table></figure><p>所在文件：art&#x2F;runtime&#x2F;interpreter&#x2F;interpreter_common.h  增加函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">// add  <br>static inline void myTraceExecution(const ShadowFrame&amp; shadow_frame, const Instruction* inst,<br>                                    const uint32_t dex_pc) REQUIRES_SHARED(Locks::mutator_lock_) &#123;<br><br>    std::ostringstream oss;<br>    oss &lt;&lt; <span class="hljs-string">&quot;[FuncName] &quot;</span> &lt;&lt; <span class="hljs-string">shadow_frame.GetMethod()-&gt;PrettyMethod() &lt;&lt; &quot;\t&quot;</span><br><span class="hljs-string">        &lt;&lt; android::base::StringPrintf(&quot;[Address] 0x%x: &quot;, dex_pc)</span><br><span class="hljs-string">        &lt;&lt; inst-&gt;DumpString(shadow_frame</span>.GetMethod()-&gt;GetDexFile()) &lt;&lt; <span class="hljs-string">&quot;\t[Regs]&quot;</span>;<br>    <span class="hljs-keyword">for</span> (uint32_t i = 0; i &lt; shadow_frame.NumberOfVRegs(); ++i) &#123;<br>        uint32_t raw_value = shadow_frame.GetVReg(i);<br>        ObjPtr&lt;mirror::Object&gt; ref_value = shadow_frame.GetVRegReference(i);<br>        oss &lt;&lt; <span class="hljs-string">android::base::StringPrintf(&quot; vreg%u=0x%08X&quot;, i, raw_value);</span><br><span class="hljs-string">        if (ref_value != nullptr) &#123;</span><br><span class="hljs-string">            if (ref_value-&gt;GetClass()-&gt;IsStringClass() &amp;&amp;</span><br><span class="hljs-string">                !ref_value-&gt;AsString()-&gt;IsValueNull()) &#123;</span><br><span class="hljs-string">                oss &lt;&lt; &quot;/java.lang.String \&quot;&quot; &lt;&lt; ref_value-&gt;AsString()-&gt;ToModifiedUtf8() &lt;&lt; &quot;\&quot;&quot;;</span><br><span class="hljs-string">            &#125; else &#123;</span><br><span class="hljs-string">                oss &lt;&lt; &quot;/&quot; &lt;&lt; ref_value-&gt;PrettyTypeOf();</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if(strstr(oss.str().c_str(), &quot;myTraceExecutionBefore&quot;)) &#123;</span><br><span class="hljs-string">        LOG(ERROR) &lt;&lt; oss.str().c_str();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">// add</span><br></code></pre></td></tr></table></figure><h1 id="过root检测"><a href="#过root检测" class="headerlink" title="过root检测"></a>过root检测</h1><p>平时应⽤测试过程中经常遇⻅Root检测，特别是⾦融类应⽤在启动时进⾏Root环境监<br>测，会向⽤户弹窗提示运⾏环境存在安全⻛险不让APP继续运⾏下⼀步操作或禁⽌安装<br>运⾏（直接闪退）。虽然之前说到magisk配合Shamiko模块可以过掉⼤部分应⽤root检<br>测，⽐较依赖magisk环境，若app对magisk进⾏检测，此时我们⼜要对magiak进⾏隐<br>藏。<br>这⾥的思路是-通过⾃定义su,并去除userdebug编译模式的⼀些特征！</p><h2 id="root-常规检测⼿段⼤致可以分为三类"><a href="#root-常规检测⼿段⼤致可以分为三类" class="headerlink" title="root 常规检测⼿段⼤致可以分为三类"></a>root 常规检测⼿段⼤致可以分为三类</h2><ol><li><p>⽬ 录 特 征 遍 历 我 们 来 看 段 检 测 代 码 ， 从 代 码 中 可 以 看 会 去 遍 历 “&#x2F;sbin&#x2F;su”, “&#x2F;system&#x2F;bin&#x2F;su”,</p></li><li><p>“&#x2F;system&#x2F;sbin&#x2F;su”, “&#x2F;system&#x2F;xbin&#x2F;su” 等⽬录其次检测magsik、SuperSU等特征。</p></li></ol><p>2.尝试执⾏root后的⼀些操作 对特定⽬录尝试新建⽂件例如 &#x2F;data、&#x2F;system、&#x2F;etc 等（只有root后才有权限<br>操作的⽬录），或者去执⾏典型的，例如su，还有find、mount等命令。</p><p>3.读取⼿机编译版本、调试状态 例如读取&#x2F;system&#x2F;build.prop中 是test-keys（测试版），还是release-keys<br>（发布版)，去获取ro.debuggable、ro.secure的值检测是否有调试状态</p><p>其实我们只要通过定制ROM⾃定义su，就可以轻松应对1.⽬录特征遍历和 2.尝试执⾏root后的⼀些操作， 当<br>我 们 把 su 改 成 mysu, 对 应 ⽬ 录 也 ⾃ 定 义 成 mysu ， 提 权 命 令 也 会 变 成 mysu ， 当应⽤执⾏</p><p>对&#x2F;data、&#x2F;system、&#x2F;etc 等⽬录进⾏⽂件操作，没有提权命令mysu⾃然也⽆法完成这些操作，最后我们把<br>test-keys 以及ro.debuggable等特征都改成正常值，这样基本上可以做到ROOT检测通杀了。</p><h2 id="⾃定义su"><a href="#⾃定义su" class="headerlink" title="⾃定义su"></a>⾃定义su</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">/system/extras/su/Android.mk中su修改为mysu<br>/system/core/libcutils/fs_config.cpp中/system/xbin/su修改为/system/xbin/mysu<br>/system/sepolicy/private/file_contexts中/system/xbin/su修改为/system/xbin/mysu<br></code></pre></td></tr></table></figure><h2 id="更改test-keys"><a href="#更改test-keys" class="headerlink" title="更改test-keys"></a>更改test-keys</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ro.build.tags=test-keys被写⼊在system/build.prop⽂件，我们查看这个⽂件看到<br>autogenerated by buildinfo.sh 是被buildinfo.sh⽂件写⼊的，我们找下这个⽂件<br>在/build/make/tools/buildinfo.sh ro.build.tags的值是读取BUILD_VERSION_TAGS ⽽<br>BUILD_VERSION_TAGS 则是/build/core/Makefile 中BUILD_KEYS 给的值，所以我们将 test-keys 改为<br>release-keys即可<br><br></code></pre></td></tr></table></figure><h2 id="更改userdebug"><a href="#更改userdebug" class="headerlink" title="更改userdebug"></a>更改userdebug</h2><p>虽然我们改了test-keys 但是ro.build.type、ro.build.display.id、ro.build.flavor、 ro.build.description、<br>ro.build.fingerprint标签中均有userdebug,发布版值应为user 我们先 看下ro.build.type对应的值是来⾃<br>TARGET_BUILD_TYPE</p><p>TARGET_BUILD_TYPE 的值⼜是TARGET_BUILD_VARIANT，⼜索引到其他⽂件去了，为了减少出错率，我<br>们就在这⾥直接赋值user</p><p>ro.build.flavor 对应TARGET_BUILD_FLAVOR</p><p>TARGET_BUILD_FLAVOR :&#x3D; $(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT) 我们对⽐下值就可以判断出<br>TARGET_BUILD_VARIANT 就是userdebug字符串</p><p>我们直接改成<br>TARGET_BUILD_FLAVOR :&#x3D; $(TARGET_PRODUCT)-user</p><p>其他⼏个地⽅就可以按照此⽅式挨个去除即可，只在&#x2F;build&#x2F;core&#x2F;Makefile 中改动即可</p><h2 id="修改ro-debuggable"><a href="#修改ro-debuggable" class="headerlink" title="修改ro.debuggable"></a>修改ro.debuggable</h2><p>在&#x2F;build&#x2F;core&#x2F;main.mk可以直接把ro.debuggable指定为0 这样我们就关闭了全局debug模式了，但是平时<br>分析应⽤需要调试所以我就保留了这个功能，借助mprop帮助我们隐藏ro.debuggable的值，这样既能保留全<br>局debug模式，⼜隐藏了ro.debuggable的值，缺点就是每次⼿机重启，需要执⾏⼀下命令，才能做到隐藏。</p><h1 id="暂时完结"><a href="#暂时完结" class="headerlink" title="暂时完结"></a>暂时完结</h1><p>定制系统其实相对来说是一种最简单最快的方式去实现想要实现的功能，使用别的方式虽然更便捷但是相对而言需要花费更多时间。比如使用frida去实现trace smali指令 就需要各种hook 极其复杂<br>优点：花最少的时间做最多的事情<br>缺点：不通用 不能很好的适配各种设备 绕过风控更加复杂 </p><p>最优其实是根据国内厂商的手机去修改so文件来实现编译系统源码实现的功能 不仅速度快而且也不需要额外处理特殊风控</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> aosp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
